//! This file was generated by `ssz-rs-test-gen`; do NOT manually edit.
mod test_utils;

use ssz_rs::prelude::*;
use test_utils::{
    deserialize, hash_tree_root, read_ssz_snappy_from_test_data, root_from_hex, serialize,
};

#[derive(PartialEq, Eq, Debug, Default, SimpleSerialize)]
struct SingleFieldTestStruct {
    a: u8,
}

#[derive(PartialEq, Eq, Debug, Default, SimpleSerialize)]
struct SmallTestStruct {
    a: u16,
    b: u16,
}

#[derive(PartialEq, Eq, Debug, Default, Clone, SimpleSerialize)]
struct FixedTestStruct {
    a: u8,
    b: u64,
    c: u32,
}

#[derive(PartialEq, Eq, Debug, Default, Clone, SimpleSerialize)]
struct VarTestStruct {
    a: u16,
    b: List<u16, 1024>,
    c: u8,
}

#[derive(PartialEq, Eq, Debug, Default, SimpleSerialize)]
struct ComplexTestStruct {
    a: u16,
    b: List<u16, 128>,
    c: u8,
    d: List<u8, 256>,
    e: VarTestStruct,
    f: Vector<FixedTestStruct, 4>,
    g: Vector<VarTestStruct, 2>,
}

#[derive(PartialEq, Eq, Debug, Default, SimpleSerialize)]
struct BitsStruct {
    a: Bitlist<5>,
    b: Bitvector<2>,
    c: Bitvector<1>,
    d: Bitlist<6>,
    e: Bitvector<8>,
}

#[test]
#[should_panic]
fn test_containers_bits_struct_extra_byte() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/BitsStruct_extra_byte/serialized.ssz_snappy",
    );

    deserialize::<BitsStruct>(&encoding);
}

#[test]
fn test_containers_bits_struct_lengthy_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([46]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([94]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([101]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9c6ecf69a7358d02abee9eb030842f538e13cf10d67747887f0e536fe4eb791f");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([63]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([105]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([179]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe60c419e4e47a1b6ef55da0450fdba5b8b6d9e8c8a1ddf913aad21c1faf6bb61");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([60]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([85]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([118]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4a082a227bdfdf5f1b7ebd49d0d4cdf7e8408c789d3fb7c0fe864c76df8e24fc");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_3() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([50]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([64]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([36]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xd843398a3d7f8a24411eb830f22fac7c9717599712f914de6dac35eaccfdc1a7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_4() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([47]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([75]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([61]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa57212943eb47330d7a46286317233228ea24753830d7f535c9f3539da05c221");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_5() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([41]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([91]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([164]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2f71110caf7d5cacae796b3ddeeb74b43390f33c06e1587b794b7872b5e6bbd9");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_6() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([52]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([121]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([34]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x1d2a640e0bd2c88f0e39fe04acac9ccab6023295f82442fbcb8f437cd5958928");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_7() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([53]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([106]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([43]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf1355a89ade8334350d4d958939abf8c912e13680583a94614f6f579fa7cf321");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_8() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([36]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([118]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([63]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x30c3e66f646c942bdcfcee75ac9df9ff077b4cf42a4e83036eab3f6694c0d9ef");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_9() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([61]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([92]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([215]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x180723e3b3e1cdc31c4273a035a3c6aa98429a81022a538eb11527500c3eed54");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_chaos_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([24]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([84]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([166]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc519405516b452d688b17e71d666d289b3c869240fe80a0777f667079dcdd417");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_chaos_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([85]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([167]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9d428532ee66fb4d06c44d1bbe7e8e7c833de8c5d7d6d21d8d0c4061e2b4fa98");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_lengthy_chaos_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([90]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_lengthy_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x1242c79e7318d2fe4313ee7c803fffeba9c536a176904ec947a6e4ff118c6e7a");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_last_offset_0_overflow() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_last_offset_0_overflow/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_last_offset_10_overflow() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_last_offset_10_overflow/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_last_offset_6_overflow() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_last_offset_6_overflow/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_offset_0_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_offset_0_minus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_offset_0_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_offset_0_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_offset_0_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_offset_0_zeroed/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_offset_10_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_offset_10_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_offset_10_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_offset_10_zeroed/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_offset_6_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_offset_6_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_lengthy_offset_6_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_lengthy_offset_6_zeroed/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
fn test_containers_bits_struct_max() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([7]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([15]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x190480a9dff580c6ae64dcf4906a5db90dfd45a2ad0baed4ad53995d1951fc81");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([31]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([15]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xeae3e4f6352cba6d4f3177ba2b84c3a8a64cc32cd4ab95a3f9c803da92d10c73");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([63]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([127]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x8b80e46316a0153807d81741e170b9b2c1c33a42ed143a5bd3fca75e248f8382");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([7]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([15]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x190480a9dff580c6ae64dcf4906a5db90dfd45a2ad0baed4ad53995d1951fc81");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_3() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([15]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([31]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x662a52b056d31844fe9a143bc7bf82f6c52d7cc9d6b9d9736c2e0d7c9a4b65f3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_4() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([31]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([63]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9b86a73b16c1aabe418cf266c4ba7160bdd39881fa3f36196c0b8fd21c689236");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_5() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([31]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xd075a5e28fe1a7cec77ef949d5cee0e5a49ce1f7ff024141635f9a057abb22b9");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_6() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([7]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([15]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x190480a9dff580c6ae64dcf4906a5db90dfd45a2ad0baed4ad53995d1951fc81");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_7() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([7]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x66f206fba60009ff2bcadce0380055d893d4eb154f13bbce8a1e88618ad17f7c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_8() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([7]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xad8ac96de2066eef5bcb859e32dbf4120dff7d64efd015629878c805d7d38a01");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_9() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([31]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([7]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([255]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x40a1610ef58a700508f807372f97fe4f218b495f1b2dac7eb7e3473c08e12e8a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_chaos_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([35]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([39]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4f2f961dd57ecda6054514babf40477a40ff8a1fa93181300d2c423202ed8c9c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_chaos_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([41]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x284a24c22e1267eaceb9a5ccc4a33b62be2214d29e4bcf51bb1ce3b814543751");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_max_chaos_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([17]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([85]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_max_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x44c854217e658de6aadd600dd1d35b161c957258b52f1a714ab484899752ce17");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([133]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x02cae738e3dc8b57f344ada4f509f2945e8264c80c3438eadaf7c02535f9e5ef");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([46]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe82bc1a89606f63c4bdacbe443e271857c6d30b872266f9b27684779d96dae87");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([26]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa980a92d284073c940c314a2e9e2c5ccbd4c38185095c01b625ddd74985b5100");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_3() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([67]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x26d7bf2aa63ea0083ab583c594d124e800fc6f2bddf60e421e8b19e9cce812c8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_4() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([222]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0ba55be71b0c8aa27881aa7d980e2b48d14d613ee44de539507f146f7c6e0dd8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_5() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([106]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xbe88737ecc160104b6d2b57424aeadc47a65e5fa0bb5bf78ddf4c2cf3430e1ac");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_6() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xbdbeec5011cc40b1917d0c7954acc5001525b78f91eccfddd9a25bda277301e8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_7() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([149]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2b87f84bf6446b279917684baa83c80f4fa8d689f62e145be8d712015a18a2d5");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_8() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([181]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc1299667d3f14c145f16a59725a14f80ccec9a83e337111e3610778964134490");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_9() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([105]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x6ac1452c1f8cd1182acd576a5d19d6eb4dc2004f4bde3c6571876be6a0227702");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_chaos_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([9]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([71]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x60a456ab306a8e0f64432852dfc84c3dad3bd89cd7bbd579eab99cea81741f30");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_chaos_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([4]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([45]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9d19b565eb266738667e6a8da2f208b1c7134a5b7c0567b667082a7590e9021a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_nil_chaos_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([41]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([37]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_nil_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x1e26e04116dd161c893ae1113250ca48a28e7a022f55d52d1602ee435600e601");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_nil_offset_0_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_nil_offset_0_minus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_nil_offset_0_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_nil_offset_0_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_nil_offset_0_zeroed() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/BitsStruct_nil_offset_0_zeroed/serialized.ssz_snappy",
    );

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_nil_offset_10_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_nil_offset_10_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_nil_offset_10_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_nil_offset_10_zeroed/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_nil_offset_6_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_nil_offset_6_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_nil_offset_6_zeroed() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/BitsStruct_nil_offset_6_zeroed/serialized.ssz_snappy",
    );

    deserialize::<BitsStruct>(&encoding);
}

#[test]
fn test_containers_bits_struct_one_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([228]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7fd438e3ac2c6ad689ef88c4438fea7d4ed8ea53ae0a245c57a8b52369959654");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([157]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xce39647d9029abdc453ad6d6b247495fc23e5e82013ba821b120dabfab8fb537");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([49]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x097a90072bcf49d920b02bcab4e1da31a077dcbee8bfce2966d7840c3022f838");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_3() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([58]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4d33c9a02ae2fa2d66880c086862b88e4300727de2ab8860e5599de3a7653c64");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_4() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([149]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3d2f26de96c8814d47d80494bad8a04cb958198a1a10950f19e2324d29e3a037");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_5() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([166]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x02289430e9b794b65c6e1ac184209135a3ccb6c3b5e8b4fd2c3064fae138667d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_6() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([92]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x226c12e28fc1b8a77c3b19cf64436d3312a4437301fe83783b8be1840c1e8653");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_7() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([148]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x6f276c9d37fdb7089835b85c261c14d75b198c06c2eb819dd71643f4589f7d18");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_8() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([218]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x74f7aac312d88b6652023e15626bfd39184bd672f1fa3d79884b6decc800fb4d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_9() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7cab55ba2fd53be0f8a4f8c4251b7c0a5ef803d7823412898d665823abfbc306");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_chaos_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([28]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([186]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xff3ba06886f4ad196c05211f6e949d9308d3c6db2387b26d43ca0e8c5e9046b1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_chaos_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([42]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([30]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([105]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x10f2e40368c4ddd6e2bbfc642ba10f92d87e1e163b5c3c6cecc6f4f2fce4af11");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_one_chaos_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([31]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([119]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_one_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x643306351ddbcaa2e885e08cc0a794491f5a7802d4ed29026b508d0446ded10a");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_last_offset_0_wrong_byte_length() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_one_last_offset_0_wrong_byte_length/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_last_offset_10_wrong_byte_length() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_one_last_offset_10_wrong_byte_length/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_last_offset_6_wrong_byte_length() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_one_last_offset_6_wrong_byte_length/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_offset_0_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_one_offset_0_minus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_offset_0_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_one_offset_0_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_offset_0_zeroed() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/BitsStruct_one_offset_0_zeroed/serialized.ssz_snappy",
    );

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_offset_10_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_one_offset_10_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_offset_10_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_one_offset_10_zeroed/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_offset_6_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_one_offset_6_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_one_offset_6_zeroed() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/BitsStruct_one_offset_6_zeroed/serialized.ssz_snappy",
    );

    deserialize::<BitsStruct>(&encoding);
}

#[test]
fn test_containers_bits_struct_random_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([8]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([143]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3d6d0bb8bf83015e09b309485d2e76fab9218bbf6c3a9e7c69cfe542ad1dc763");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([42]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([212]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x15d9164c4e094b4403feb31122f3b66b7ca7822e4df67f26def12cc8215eb841");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([11]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([9]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([152]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xecba0d802886089cf592e9fc1618eba10423632ccb4ee47861ef967a46cb0128");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_3() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([27]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([153]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x51edea0f4034e4367f17128b2ca93ce6d640ca7d0cbd5441115e0a88f3570286");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_4() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([27]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([15]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([230]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x755039126524a09294e1127ef05e4d63ef1d24b08697ef1b8492264b397c23ca");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_5() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([88]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([188]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3febb22617b99d80ea55324e92473257af007edd898977edbaf18b292e9883ab");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_6() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([14]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([6]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([176]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x56a559c34fc3c84452dfa273cbf2e6e59d07475374a37caeee6a33e5172842b0");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_7() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([49]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([67]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x13ec3bf0b472b0e516f29b26ea2cd1b2df5339f4523b13aa382467a227ce9630");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_8() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([59]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([4]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([228]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7cac78985bce1d521c85c04de9131c25c520f41e4e8199a1d29531f8e1770049");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_9() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([4]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([98]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([85]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x79724705ac18d0920f81f87f6f727d38ce5c83253a5391151efba7664f6a5695");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_chaos_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([11]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([30]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([235]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x95854efa0f0935a1a80eefdd467742fd57bcba65b702cafe6ae1486054da4577");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_chaos_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([9]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([17]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([118]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x62a43ebc4181c5be74e81c7d524e8d0a73c0c824b997c1788cdeb0d502b6a56e");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_random_chaos_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([61]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([16]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([218]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_random_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9b213c958d8c67fbee3c40ce85f14eb32efbe45919b9374844a878cd37ddc531");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_random_offset_0_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_random_offset_0_minus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_random_offset_0_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_random_offset_0_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_random_offset_0_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_random_offset_0_zeroed/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_random_offset_10_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_random_offset_10_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_random_offset_10_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_random_offset_10_zeroed/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_random_offset_6_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_random_offset_6_plus_one/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_bits_struct_random_offset_6_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/BitsStruct_random_offset_6_zeroed/serialized.ssz_snappy");

    deserialize::<BitsStruct>(&encoding);
}

#[test]
fn test_containers_bits_struct_zero() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([64]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x434f7fd5c6afb75027d4220d1638330a7db1e338e3926862797e2b3dc06df758");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([2]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xde86acdbf24592cddb2b2c46ae0a7a8df2500ff298ebb7991d3ba9b1004aa3a7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([32]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x23ef8cd72a9fc4008bd066d5ff490fa88b67da044916c18c08f2a932c974f981");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([32]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x23ef8cd72a9fc4008bd066d5ff490fa88b67da044916c18c08f2a932c974f981");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_3() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([16]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa08e590982dffd5e3b7a9410c9d86d152cfb2d342bd00eec228aab3e3c5ef64b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_4() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([32]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9e0668c44cbaefb38cebe11f091d66fa6b78c970bbefe5b1e9d6412adae30179");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_5() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([16]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([4]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7aa68d25017352ef95142af2bb269ce805269676da6111d74887aa9cdcb072a4");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_6() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([32]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([4]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe7767ef6cf38ec10994866c9dbfc2263fdbae71ab5b70728fbe184f7714511bd");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_7() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([32]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9e0668c44cbaefb38cebe11f091d66fa6b78c970bbefe5b1e9d6412adae30179");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_8() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([8]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([16]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7ae92ab3514825eced5b012a3506efa5034df961f432552a898b3f13cad1d064");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_9() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([4]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([64]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([0]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa7c8f2f9944d28e0554028670f6c36c9887e8d3bcbe583e1fbef3c5ca2071f34");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_chaos_0() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([45]).as_ref()).unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xb1eb7e2c64e6ce5bc27ee4f1a03ed21dcc80eff8981e3397dd81316778cec97c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_chaos_1() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([6]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([133]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xdbec2b84815a9559d7a268df030674d92da93d7ba62d356542f09f721b928a97");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_bits_struct_zero_chaos_2() {
    let value = BitsStruct {
        a: <Bitlist<5> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        b: <Bitvector<2> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        c: <Bitvector<1> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([1]).as_ref()).unwrap(),
        d: <Bitlist<6> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([3]).as_ref()).unwrap(),
        e: <Bitvector<8> as TryFrom<&[u8]>>::try_from(Vec::<u8>::from_iter([239]).as_ref())
            .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/BitsStruct_zero_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: BitsStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf523978784972b9399337193a286299df5ef1559f4d336b4d1859331cc1fa99b");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_extra_byte() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/ComplexTestStruct_extra_byte/serialized.ssz_snappy",
    );

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
fn test_containers_complex_test_struct_lengthy_0() {
    let value = ComplexTestStruct {
        a: 5717,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            235, 64949, 43916, 37422, 6559, 2732, 61895, 2418, 64448, 36828, 54582, 10602, 58840,
            41906, 6299, 9640, 65098, 25540, 21303, 60074, 42304, 24256, 2452, 34060, 13492, 60381,
            13865, 45393, 62497, 8580, 57956, 740, 62868, 56743, 44661, 53090, 12252, 44468, 41754,
            35555, 22850, 57374, 9974, 26770, 35311, 64606, 49948, 9966, 38080, 1549, 49713, 15898,
            37459, 50666, 37759, 44825, 44337, 50653, 46095, 42576, 41871, 35552, 6671, 11692,
            62035, 16562, 49706, 47473, 49602, 62115, 28265, 45687, 49177, 57850, 55322, 24563,
            12193, 41716, 12757, 50238, 49055, 61066, 33436, 18102, 17540, 15869, 26361, 64025,
            64099, 58097, 42522, 47787, 15572, 3496, 7587, 40535, 59823, 17473, 39390, 32235,
            63408, 60300, 3979, 15343, 42259, 8617, 6781, 58482, 6044, 9419, 57800, 8295, 16731,
            36123, 51778, 63177, 21258, 27164, 11294, 8994, 6069, 47955, 33507, 30025, 7278, 6106,
            30788, 38937,
        ]))
        .unwrap(),
        c: 29,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            159, 109, 74, 27, 155, 169, 81, 184, 34, 12, 205, 140, 211, 126, 176, 77, 118, 146,
            111, 173, 83, 11, 126, 41, 172, 130, 56, 248, 13, 232, 161, 27, 215, 145, 71, 235, 231,
            221, 187, 160, 112, 210, 129, 84, 38, 79, 171, 41, 236, 201, 22, 79, 247, 230, 141, 93,
            82, 241, 202, 223, 51, 75, 208, 98, 90, 148, 171, 225, 160, 36, 8, 30, 86, 112, 146,
            221, 150, 197, 36, 80, 35, 237, 104, 169, 44, 100, 177, 224, 91, 45, 121, 33, 57, 188,
            173, 63, 207, 225, 76, 195, 47, 168, 146, 153, 232, 80, 30, 74, 188, 39, 147, 0, 7,
            128, 144, 75, 58, 171, 133, 54, 73, 22, 182, 85, 46, 113, 138, 51, 247, 120, 40, 220,
            103, 227, 59, 23, 222, 231, 141, 149, 2, 188, 36, 110, 7, 128, 169, 231, 151, 98, 245,
            14, 173, 216, 76, 67, 244, 154, 174, 20, 225, 162, 162, 210, 82, 206, 213, 174, 142,
            201, 202, 175, 219, 80, 71, 56, 80, 67, 139, 146, 244, 80, 224, 178, 158, 29, 115, 136,
            124, 141, 86, 237, 148, 72, 39, 13, 194, 141, 106, 188, 5, 77, 255, 148, 188, 57, 54,
            106, 178, 147, 69, 167, 96, 209, 125, 45, 152, 39, 34, 92, 215, 90, 222, 40, 119, 183,
            203, 132, 77, 105, 246, 144, 37, 4, 226, 171, 86, 252, 152, 21, 160, 253, 170, 146,
            233, 45, 153, 78, 232, 193, 102, 233, 233, 236, 20, 206,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 26935,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                10249, 43556, 50531, 32378, 24412, 27197, 45843, 62396, 10858, 45155, 36632, 48350,
                6704, 63139, 31630, 42767, 5795, 63962, 17152, 63052, 30848, 40101, 60146, 38983,
                24761, 30725, 399, 50336, 55438, 41481, 27737, 20084, 21026, 51969, 22420, 56680,
                44694, 34473, 8227, 26994, 20777, 23402, 62830, 7234, 27458, 6656, 44260, 3196,
                45565, 45086, 52477, 3041, 40855, 56914, 18620, 21648, 5871, 46598, 21094, 25422,
                30346, 2885, 33974, 6795, 40002, 39064, 26623, 61564, 43313, 57302, 54238, 769,
                34489, 41722, 32632, 56982, 35153, 55466, 42379, 3727, 57323, 33312, 3970, 42909,
                8109, 4483, 26312, 63378, 50364, 6744, 39041, 58828, 34961, 17110, 63034, 2290,
                33765, 54708, 65397, 56768, 14224, 10424, 61820, 48868, 14028, 5048, 35846, 47220,
                6492, 8468, 15914, 30734, 8064, 17308, 59809, 24985, 46323, 941, 37939, 45853,
                50846, 13439, 5046, 56946, 24902, 48330, 51141, 42224, 12584, 10241, 46214, 5541,
                38933, 54853, 35632, 2811, 62290, 33498, 28989, 60803, 20380, 43960, 45632, 22668,
                27154, 36005, 6234, 10958, 42051, 19918, 13279, 49375, 47132, 10247, 36361, 10247,
                44350, 41520, 17877, 56449, 2551, 27877, 23014, 5437, 49859, 20342, 64317, 45162,
                29926, 9773, 8037, 21768, 38484, 63389, 61351, 3525, 311, 32412, 22995, 33562,
                57947, 41586, 57875, 47466, 40981, 63026, 13179, 55931, 31646, 46317, 59022, 56146,
                62761, 64166, 57367, 64643, 52313, 2840, 43943, 58314, 52000, 64264, 22359, 40941,
                26086, 25640, 28390, 55285, 30615, 25002, 54095, 23386, 49764, 26003, 20586, 53546,
                6018, 12581, 54375, 38920, 51490, 45080, 33968, 16939, 6486, 2147, 20508, 23264,
                13486, 15944, 10011, 42915, 5766, 20217, 42913, 25524, 3945, 60919, 12868, 27094,
                45567, 33602, 41887, 9763, 62254, 19498, 8487, 4167, 10929, 41289, 62807, 36484,
                33308, 21024, 34758, 21713, 22131, 7439, 59993, 12850, 49488, 15814, 32689, 3637,
                577, 60218, 9449, 52588, 46575, 51382, 50716, 28851, 13972, 23467, 20387, 32593,
                45932, 59637, 25374, 18665, 3295, 8966, 58827, 3913, 31712, 53967, 63564, 44062,
                55667, 29838, 41747, 64053, 13348, 56221, 37374, 59539, 24983, 55582, 30848, 46270,
                60180, 61578, 26992, 9025, 46758, 14754, 45813, 31301, 58000, 40014, 33515, 50300,
                39938, 15729, 42035, 45056, 11714, 17851, 2986, 24049, 39804, 58627, 26225, 23216,
                30525, 36946, 43518, 1628, 6416, 51576, 22120, 42294, 19989, 12303, 13847, 57549,
                5738, 14125, 12629, 54480, 42206, 57669, 17084, 22136, 6763, 54225, 24358, 51680,
                38996, 53342, 16734, 9314, 58350, 64027, 43818, 32267, 15237, 41158, 38437, 47038,
                44941, 34323, 41321, 44174, 23597, 35601, 6795, 62710, 16304, 9705, 14417, 28029,
                57617, 27980, 21503, 29138, 30468, 21943, 39184, 33627, 43616, 10109, 44708, 48381,
                32484, 23136, 21738, 14522, 48177, 27101, 56348, 54765, 22027, 51756, 40697, 9136,
                4050, 29596, 39490, 40285, 35449, 33861, 65218, 8129, 34936, 42569, 14197, 36825,
                1909, 34790, 62070, 31076, 26112, 45098, 52223, 58189, 60262, 44948, 57936, 39041,
                47582, 35713, 10043, 60405, 9332, 27122, 57361, 39723, 45292, 16624, 4845, 50847,
                62786, 15510, 24290, 33327, 5634, 49016, 37186, 5299, 30162, 10354, 60243, 25401,
                36804, 30411, 15642, 57393, 38502, 41987, 12828, 44864, 52293, 24681, 20206, 21329,
                33570, 27214, 47872, 42774, 19639, 24645, 59075, 39007, 31375, 59269, 62154, 50855,
                32775, 16062, 14162, 10139, 18647, 23976, 48074, 59390, 45356, 44707, 54370, 19190,
                61403, 51969, 59983, 5188, 54232, 31932, 41997, 21254, 44880, 10259, 44381, 37708,
                39509, 27342, 43999, 39001, 17064, 41439, 26094, 52176, 43007, 49596, 24015, 16595,
                8958, 5910, 25446, 41820, 24403, 35373, 52975, 13152, 26120, 26500, 21467, 339,
                55186, 49857, 45045, 26512, 43217, 6376, 56572, 17898, 9479, 20332, 25481, 33820,
                35678, 51131, 14887, 12098, 64416, 7117, 55136, 30812, 10866, 62239, 37613, 25821,
                40355, 38241, 29897, 24572, 39619, 63710, 6458, 36918, 57755, 18396, 22804, 23668,
                51740, 48652, 6380, 3005, 20755, 6534, 6727, 19158, 42965, 11456, 56083, 56876,
                32990, 41566, 56770, 57696, 32393, 43651, 31740, 47496, 60289, 8600, 57421, 60943,
                30738, 29042, 25052, 39740, 48585, 33450, 26571, 9520, 33788, 29259, 14498, 54760,
                40396, 11318, 26635, 14225, 18476, 39847, 48006, 1610, 22901, 10652, 2536, 30092,
                39904, 4534, 40858, 64330, 9816, 24870, 17792, 58389, 29188, 20670, 65417, 33353,
                31543, 64041, 32394, 41910, 58920, 17712, 32091, 43192, 31353, 2493, 16626, 32525,
                61943, 48428, 15825, 34080, 48587, 58219, 49198, 58021, 44104, 56503, 10617, 6998,
                49926, 32334, 18632, 25389, 32723, 57677, 25747, 4352, 63629, 26905, 26795, 32938,
                20951, 46511, 53508, 46031, 27214, 22460, 30199, 23778, 35464, 48128, 44573, 31645,
                64267, 27629, 58246, 15769, 22646, 37281, 23809, 54766, 29176, 31818, 61933, 51038,
                35692, 25234, 1977, 53744, 18274, 37042, 2688, 3384, 46261, 53731, 580, 6383,
                54920, 43083, 10414, 22199, 61537, 36215, 43521, 14929, 10204, 59884, 4278, 10551,
                46398, 43195, 46815, 52166, 54649, 41131, 56367, 34543, 30682, 6162, 58867, 26826,
                24077, 31553, 31691, 62437, 2057, 39778, 59423, 48469, 5599, 14123, 29883, 36662,
                14614, 12689, 17740, 57079, 47637, 43695, 49643, 2666, 30843, 26536, 6226, 41490,
                41961, 8781, 19368, 44621, 4100, 63166, 42543, 21247, 11642, 59385, 48985, 13704,
                47856, 52796, 19489, 20381, 38607, 38760, 9665, 44691, 38974, 33168, 16765, 27020,
                60695, 28191, 18919, 37477, 22590, 43878, 29895, 17425, 25370, 35650, 55797, 34845,
                35460, 26752, 59997, 28222, 49610, 55218, 3111, 13350, 44623, 11603, 48690, 19387,
                64758, 4615, 56336, 10868, 52915, 14575, 31302, 54181, 14522, 17348, 58219, 26462,
                18473, 28637, 27782, 21014, 61134, 63137, 36649, 44959, 902, 42869, 62507, 65182,
                57335, 5583, 45386, 907, 62158, 58919, 28197, 7234, 56068, 49282, 37296, 64144,
                43871, 7137, 32463, 11718, 22487, 52467, 62049, 46149, 40010, 59060, 55233, 64648,
                59852, 38718, 43304, 38505, 1506, 25837, 3633, 29460, 36739, 21697, 11212, 28268,
                905, 32385, 49208, 21787, 64179, 18365, 40892, 22696, 7, 10678, 43456, 6352, 43299,
                56003, 9178, 49726, 35269, 47738, 25250, 4834, 33669, 34968, 30302, 18240, 22323,
                64336, 3177, 11394, 62862, 19004, 56129, 10729, 22986, 52891, 39020, 1316, 26410,
                11174, 16057, 56272, 11473, 543, 35315, 43523, 45592, 31036, 44813, 23829, 33573,
                58271, 44827, 46665, 5549, 41645, 9291, 12457, 361, 27355, 49808, 44918, 27122,
                4824, 4208, 63233, 43410, 37958, 30595, 6678, 7656, 2571, 22841, 26542, 11344,
                10069, 23671, 28739, 15127, 14433, 54107, 31398, 59257, 18365, 4846, 5175, 19468,
                52944, 60332, 14373, 9433, 41176, 41501, 32425, 34284, 731, 62439, 36099, 42797,
                34759, 14334, 7952, 1317, 19713, 63663, 7172, 31151, 60429, 57584, 214, 52931,
                48186, 53899, 30507, 37952, 53545, 6237, 63944, 13886, 19542, 44271, 30112, 11246,
                54657, 63817, 55875, 20147, 53008, 29243, 14010, 60198, 48824, 55707, 53591, 50976,
                55565, 20583, 3444, 64533, 14095, 20703, 25820, 33160, 33611, 60794, 29095, 36456,
                28814, 12046, 3282, 50130, 12495, 59043, 3592, 20409, 63628, 47165, 53808, 42900,
                54119, 40716, 22081, 59737, 42239, 35456, 1080, 17474, 1231, 45216, 46169, 53755,
                11140, 51210, 42016, 21635, 41091, 35743, 63746, 26755, 36460, 20084, 39803, 34379,
                65334, 32831, 14886,
            ]))
            .unwrap(),
            c: 49,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 97, b: 10394227296878543743, c: 2310770699 },
            FixedTestStruct { a: 244, b: 8699702200281349292, c: 3782875451 },
            FixedTestStruct { a: 52, b: 5466972047613681000, c: 2737210888 },
            FixedTestStruct { a: 28, b: 1987881295990893724, c: 1825862996 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 23462,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    30929, 16276, 22575, 22996, 24426, 18049, 23381, 17471, 45440, 57003, 19762,
                    1146, 5298, 31435, 19141, 37079, 46179, 38144, 54491, 65355, 15320, 20738,
                    17594, 44000, 5057, 19754, 7417, 50377, 35990, 16560, 3769, 59936, 19996, 6403,
                    39, 27926, 36412, 35110, 22053, 16664, 13243, 11743, 11678, 33374, 20604,
                    64814, 17539, 53250, 60055, 9782, 27275, 9256, 49760, 2784, 10915, 34573, 7116,
                    38999, 8380, 18529, 9618, 11993, 17521, 18424, 23233, 10988, 60760, 5441, 9366,
                    7987, 43256, 39661, 64034, 51113, 27896, 20361, 62133, 42626, 10437, 30389,
                    19224, 15057, 35860, 62585, 36401, 8704, 36561, 43495, 20925, 54259, 52245,
                    29072, 56121, 60476, 33825, 35465, 41980, 46222, 9012, 20564, 12506, 7761,
                    33331, 28693, 51259, 42950, 30572, 60064, 12172, 5484, 13074, 13143, 36910,
                    6527, 60740, 64254, 47001, 11916, 43588, 64673, 33500, 14914, 17681, 24475,
                    13914, 16719, 40993, 40475, 55166, 64014, 45905, 42475, 23460, 38117, 4587,
                    895, 2326, 11193, 46559, 11216, 62032, 4089, 24114, 36342, 20877, 12878, 56517,
                    40994, 15028, 13450, 37507, 20410, 15713, 49077, 60011, 12838, 42922, 59323,
                    21984, 16491, 20728, 25248, 57325, 27797, 34395, 42472, 21682, 6506, 10690,
                    55293, 17920, 61234, 26703, 43801, 57234, 38746, 31090, 16945, 33394, 29751,
                    38441, 23998, 52746, 32254, 2238, 9098, 28753, 11040, 42409, 23789, 27113,
                    43776, 22048, 13908, 30110, 38377, 47052, 124, 56943, 33216, 19738, 63166,
                    35926, 11960, 10922, 22838, 3927, 59670, 32779, 45082, 22897, 11521, 29993,
                    5746, 27439, 59124, 8602, 42013, 9051, 43411, 50527, 62677, 58522, 43530,
                    33389, 38392, 25685, 20010, 27089, 23352, 49737, 38733, 30324, 9909, 17693,
                    33673, 3832, 56071, 21673, 22218, 37948, 6129, 40196, 38561, 19638, 60330,
                    4942, 10562, 61928, 44974, 30688, 21606, 50982, 3288, 42524, 3954, 63738,
                    54858, 30147, 54046, 59825, 42154, 17199, 2709, 890, 216, 53128, 31504, 5250,
                    3718, 17010, 65391, 16872, 20324, 11424, 45905, 27402, 9245, 16750, 44321,
                    58299, 37757, 5153, 57972, 57460, 47309, 304, 29009, 34047, 54575, 56167, 2803,
                    2784, 31580, 58798, 7761, 21686, 59788, 24015, 47189, 58653, 41579, 63537,
                    20944, 38658, 47770, 32134, 13101, 4632, 54424, 47049, 49011, 33149, 20279,
                    1850, 27309, 65263, 24284, 43256, 32114, 61632, 61286, 65353, 46712, 57359,
                    35497, 29568, 28945, 31660, 44675, 64118, 29550, 53699, 16089, 8963, 52213,
                    65052, 48537, 3836, 33223, 56379, 52299, 17272, 10640, 25805, 29294, 59876,
                    62547, 53795, 61993, 63083, 40306, 41983, 58976, 33618, 50995, 33751, 40168,
                    29155, 14331, 43784, 8930, 5736, 39730, 37753, 11721, 37523, 40832, 42702,
                    47244, 26455, 1893, 60026, 35092, 12176, 58080, 60114, 12191, 39402, 50038,
                    39761, 27631, 48221, 50090, 48585, 64013, 37974, 42466, 33217, 34836, 18111,
                    48581, 28329, 37779, 33176, 29837, 28962, 34589, 64831, 32528, 63618, 65438,
                    26082, 36575, 44584, 10197, 36850, 6044, 8199, 22109, 52, 41499, 65145, 29577,
                    38621, 57327, 40557, 39791, 753, 48835, 11905, 57871, 30277, 53936, 12236,
                    28873, 54182, 25200, 8446, 34870, 30242, 62865, 51522, 56366, 3065, 31400,
                    19551, 11556, 59408, 5615, 12582, 24498, 54755, 42472, 21195, 16326, 54331,
                    65266, 29584, 61222, 56993, 42115, 52972, 6667, 43912, 33817, 28008, 53048,
                    63528, 57011, 46408, 48338, 58493, 34007, 30151, 18788, 46177, 55648, 40571,
                    26545, 37588, 43300, 46262, 1873, 12876, 14127, 10910, 2823, 12842, 58486,
                    52316, 35774, 26, 31375, 47605, 47554, 15316, 7116, 50892, 63950, 33445, 39945,
                    63713, 16455, 56400, 8868, 57496, 22285, 35320, 7177, 34525, 32373, 12834,
                    22014, 47938, 17303, 6127, 961, 62843, 40607, 10177, 11589, 32421, 36699,
                    59894, 45500, 59696, 50021, 40614, 46900, 3744, 953, 20234, 21249, 38554,
                    53119, 57265, 13226, 16341, 5973, 53646, 20702, 41280, 37423, 25092, 17597,
                    19608, 50287, 50817, 8823, 50558, 54239, 13944, 45784, 27839, 18239, 46712,
                    46121, 10838, 31446, 52864, 216, 9528, 59986, 56031, 44275, 51788, 3264, 29146,
                    42579, 24586, 43887, 11508, 34377, 19189, 2166, 48578, 7862, 57296, 48931,
                    19245, 12048, 58350, 1608, 56129, 34373, 39019, 45323, 16377, 19248, 55893,
                    47104, 31725, 21500, 33340, 31829, 25310, 28551, 23204, 44429, 4425, 27277,
                    25834, 59350, 4016, 63025, 47800, 35371, 52498, 49368, 36810, 41311, 17731,
                    11559, 64562, 7348, 21347, 45127, 46204, 30559, 57169, 29224, 36066, 59203,
                    61361, 33731, 31868, 20145, 12301, 62127, 12725, 15930, 13345, 15872, 52319,
                    19471, 17735, 25297, 10204, 41635, 40979, 55644, 33744, 23971, 11894, 17344,
                    34128, 51349, 33753, 6618, 20687, 30357, 46385, 2803, 16401, 1161, 60205,
                    64095, 64526, 40561, 34386, 9544, 26331, 55185, 35941, 56782, 12164, 23111,
                    24234, 51813, 9740, 22359, 28008, 29188, 29153, 54340, 12390, 44524, 46328,
                    22548, 40699, 54388, 26513, 38042, 58877, 8718, 24771, 41097, 24974, 59710,
                    13356, 47617, 55333, 8105, 37891, 17996, 27033, 39839, 28651, 61209, 4112,
                    43863, 15082, 10328, 11765, 8728, 46834, 64955, 60454, 48326, 65245, 568, 4982,
                    29946, 43871, 62720, 46653, 47687, 13622, 44050, 41265, 9956, 39928, 28294,
                    61047, 57822, 38884, 59847, 63234, 57966, 52652, 23106, 55983, 481, 21981,
                    38426, 6213, 41817, 47510, 33644, 17836, 25946, 41968, 742, 25176, 8591, 11904,
                    43546, 42132, 12860, 39035, 50949, 4252, 63926, 24871, 25530, 21401, 48368,
                    30214, 31948, 63551, 65114, 41704, 51066, 28449, 34326, 12318, 63015, 50072,
                    31756, 62782, 408, 57460, 47060, 57277, 54241, 30820, 26351, 1855, 12205,
                    29938, 52856, 26712, 44365, 42671, 46560, 59494, 62885, 40630, 39527, 21494,
                    2058, 48705, 61846, 12495, 31765, 52685, 4901, 35146, 33950, 39003, 38303,
                    12939, 58443, 41101, 57476, 11428, 12070, 61697, 62659, 60093, 35708, 46926,
                    23641, 42455, 12611, 36082, 6754, 24172, 2821, 1285, 11065, 2278, 24610, 16763,
                    45022, 59164, 17484, 53068, 54584, 18777, 64296, 55866, 26810, 63730, 11251,
                    61573, 15781, 54778, 25317, 29879, 21001, 32984, 4191, 6639, 23044, 7807,
                    36069, 29551, 57682, 20968, 8524, 31141, 8427, 10177, 21973, 35541, 56457,
                    21691, 51618, 50699, 45188, 52019, 63940, 33237, 7312, 5401, 9205, 44042,
                    13933, 50820, 48931, 7732, 40235, 59971, 49621, 13121, 58870, 34002, 56564,
                    6746, 50677, 13671, 3253, 61656, 58, 14136, 2355, 18156, 38457, 18192, 35451,
                    32230, 645, 48503, 636, 34700, 50858, 2371, 10544, 43588, 43284, 35474, 22335,
                    62553, 50590, 39404, 59335, 9423, 25854, 14475, 48491, 65104, 30232, 61102,
                    53388, 15004, 21505, 62358, 35018, 8998, 57529, 1550, 21663, 48751, 27123,
                    27655, 34083, 65355, 50673, 47149, 38904, 1604, 15246, 3784, 60125, 58625,
                    14541, 42132, 43782, 21779, 39409, 50046, 11302, 3756, 38488, 62398, 41686,
                    41211, 26880, 44951, 19333, 41869, 3229, 29642, 9879, 32909, 10118, 54204,
                    15907, 57210, 37963, 35374, 64813, 28029, 5563, 16445, 54244, 53894, 671,
                    36325, 10310, 20705, 18761, 46668, 43778, 9546, 55011, 6991, 14974, 9182,
                    65037, 1850, 44044, 29765, 63468, 24683, 56028, 48246, 20911, 21101, 11311,
                    17191, 64980, 30874, 14576, 22012, 64078, 36413, 11880, 18063, 47371, 5097,
                    43515, 9024, 22710, 16367, 63977, 1174, 59415, 28548, 47111, 30374, 43806, 983,
                    58518, 10557, 23885, 2605, 25523, 2686, 40527, 6091, 23542, 15116, 53968,
                    43868, 12012, 4870, 64060, 331, 43823, 47250, 9293,
                ]))
                .unwrap(),
                c: 130,
            },
            VarTestStruct {
                a: 40166,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    54043, 50596, 14034, 14153, 39729, 3646, 43626, 7304, 41108, 40285, 9810,
                    25903, 50110, 7170, 37407, 23703, 47708, 39247, 51866, 27826, 30891, 49449,
                    42721, 47268, 49391, 8446, 62433, 5953, 32559, 34536, 26449, 55360, 44990,
                    62608, 9057, 24577, 29791, 59127, 106, 19484, 64217, 49766, 62407, 36633,
                    18191, 28343, 43827, 64699, 57327, 19680, 21294, 5297, 36792, 58178, 36460,
                    32037, 13112, 11320, 4296, 14785, 61496, 54847, 21482, 44656, 62059, 51609,
                    13485, 57640, 36199, 26888, 22599, 23692, 43160, 61576, 15902, 58977, 32955,
                    49398, 5118, 10258, 22497, 12683, 22530, 23509, 2327, 46832, 55917, 47865,
                    6088, 39543, 52726, 36646, 16540, 21295, 50418, 14579, 48353, 56037, 59253,
                    56033, 44440, 10645, 48244, 2681, 54833, 30926, 36170, 39698, 53837, 31233,
                    55783, 22756, 16, 63077, 34320, 22347, 15187, 6878, 28362, 12863, 17010, 6690,
                    49025, 12362, 65018, 19042, 11384, 23229, 62542, 31741, 34130, 44763, 58955,
                    29711, 16009, 56500, 45019, 25062, 16563, 48388, 64849, 55549, 32925, 12664,
                    6492, 18705, 65272, 10666, 24336, 23388, 58364, 8642, 4207, 48521, 34436,
                    32731, 17665, 1599, 5391, 20119, 37208, 9273, 4696, 40229, 24538, 24553, 56356,
                    48537, 15399, 46240, 26136, 38375, 38130, 13922, 39079, 27056, 4775, 63457,
                    48216, 27575, 60149, 36964, 51890, 50495, 21892, 31213, 44848, 63886, 14082,
                    38605, 6861, 15791, 4304, 59242, 51257, 16488, 32702, 6537, 9808, 54924, 37726,
                    715, 45628, 45583, 51720, 38260, 35171, 54154, 31172, 43135, 35085, 60328,
                    22772, 24781, 9348, 19925, 65048, 50919, 19597, 22557, 2346, 11535, 5620,
                    13562, 27420, 30342, 56861, 15295, 52508, 28886, 26364, 35160, 55644, 32382,
                    35857, 41286, 34922, 39732, 64037, 26109, 4179, 32873, 17650, 6422, 22473,
                    28000, 37393, 59065, 62401, 5363, 29152, 53816, 30900, 43936, 7206, 57217,
                    43067, 30708, 49114, 49699, 17251, 42508, 18514, 29700, 37188, 49814, 10247,
                    16616, 45265, 22033, 59763, 50534, 11814, 7749, 44996, 40729, 3975, 11578,
                    47843, 37474, 58121, 42916, 34628, 60136, 40308, 7411, 54556, 61192, 29267,
                    12158, 12718, 23535, 18819, 36543, 62603, 60332, 26639, 18296, 57782, 50721,
                    2466, 22995, 17026, 35514, 63527, 38351, 64324, 17545, 53468, 18647, 14189,
                    40652, 59800, 5715, 60799, 59201, 28715, 43677, 10699, 2031, 3225, 13485,
                    20167, 46672, 17658, 47734, 38090, 64495, 42273, 63120, 42043, 11141, 15945,
                    48804, 11778, 49143, 38655, 60802, 19087, 7281, 11581, 4701, 37464, 58761,
                    61831, 53595, 54210, 47303, 34708, 50619, 49094, 64257, 49608, 12841, 46804,
                    28059, 15780, 29245, 25921, 52872, 65361, 16061, 38807, 61018, 9378, 18444,
                    58957, 42772, 4161, 4163, 31090, 60900, 1617, 17693, 44209, 6974, 7613, 23520,
                    30463, 206, 41442, 53838, 4578, 31617, 43141, 36137, 48405, 61333, 3680, 10415,
                    55655, 11936, 12182, 1001, 17018, 29022, 1733, 56289, 62343, 34374, 61605,
                    61655, 32922, 57362, 18718, 37139, 13278, 40863, 49366, 55005, 29378, 37129,
                    25255, 10305, 26244, 11784, 55221, 19507, 61288, 12417, 56620, 13229, 1531,
                    31029, 47441, 11462, 41878, 58026, 27743, 151, 1889, 21134, 43711, 36750, 239,
                    45265, 36580, 2631, 63188, 49495, 22525, 23580, 58949, 21751, 44573, 15334,
                    24328, 22796, 48483, 15819, 35459, 49130, 10832, 49520, 12251, 43967, 38342,
                    7704, 29519, 54953, 16351, 28500, 42617, 53414, 49399, 33370, 4408, 20331,
                    8029, 8522, 9842, 59594, 5094, 63546, 11898, 33364, 28400, 27348, 45591, 19806,
                    27025, 38392, 17057, 35073, 3251, 27231, 38202, 100, 49246, 51075, 21932,
                    41837, 24100, 17870, 26414, 59747, 60942, 6539, 32755, 62336, 15245, 16189,
                    51684, 29212, 42977, 19124, 10456, 34969, 7414, 54571, 40351, 64920, 60389,
                    58862, 61109, 42320, 7682, 53190, 54090, 23943, 6750, 4697, 42959, 25042,
                    54376, 8897, 58655, 55312, 34545, 55234, 29446, 30272, 36565, 37024, 43609,
                    5810, 59589, 8820, 13841, 57177, 26310, 57516, 23160, 60493, 31658, 32035,
                    62452, 39022, 39747, 10057, 60247, 10562, 62921, 37069, 48243, 16449, 52502,
                    45952, 27489, 54865, 9759, 21658, 5536, 52679, 18567, 11336, 54948, 19386,
                    7651, 39928, 28966, 52420, 37600, 61748, 59013, 20081, 53920, 63614, 19487,
                    5340, 39983, 5208, 25179, 48097, 13860, 62090, 10481, 35142, 18289, 29660,
                    24041, 40655, 49542, 16345, 145, 42552, 59030, 48137, 16368, 64814, 46478,
                    55442, 1328, 49419, 61961, 48037, 4644, 22247, 30270, 55366, 21514, 37698,
                    7204, 2525, 35271, 49325, 35490, 6561, 4124, 30715, 13418, 54819, 25244, 6537,
                    53717, 45230, 60241, 28634, 29717, 30269, 13805, 1414, 22214, 20820, 46126,
                    32598, 42835, 21463, 50476, 324, 64765, 60392, 45129, 37156, 33942, 40448,
                    23612, 49207, 48599, 10022, 300, 4077, 31177, 14616, 56754, 11679, 24069,
                    16237, 49219, 46328, 56166, 48865, 19340, 5131, 59010, 17167, 30618, 39272,
                    5419, 6310, 20598, 10153, 721, 49473, 58040, 35182, 9549, 52950, 62261, 40739,
                    13700, 1426, 29053, 1796, 35489, 21023, 48247, 21289, 59013, 50184, 20452,
                    54280, 51990, 30518, 41701, 39461, 36530, 12429, 6373, 28738, 40072, 1336,
                    26925, 52827, 50656, 33098, 58228, 4882, 45852, 9457, 60684, 60047, 37624,
                    51959, 26789, 54563, 48233, 12000, 28461, 30950, 50831, 17824, 51787, 28146,
                    38163, 8207, 24983, 43136, 16177, 1720, 48334, 21644, 21783, 21748, 17582,
                    8682, 45920, 40970, 31654, 46245, 51134, 37615, 759, 3944, 11765, 22238, 27209,
                    56964, 9037, 51668, 43614, 36414, 4536, 31035, 60731, 50565, 64499, 4110,
                    40696, 22922, 2538, 33658, 62063, 29639, 47197, 34207, 31416, 50155, 6461,
                    58911, 30431, 14980, 34093, 45617, 51832, 25671, 5305, 12637, 36838, 4833, 247,
                    57931, 48875, 61050, 41894, 57368, 1232, 21162, 18768, 49029, 56047, 48278,
                    61767, 17390, 62828, 13436, 48808, 9550, 64407, 61055, 353, 34903, 45727,
                    21903, 53375, 42276, 3601, 51842, 26075, 7489, 58453, 45296, 11426, 53357,
                    50119, 51128, 8758, 5839, 21714, 59299, 4907, 34596, 13904, 58278, 4884, 48699,
                    24896, 15523, 7905, 14118, 34527, 34842, 44738, 51775, 22045, 5145, 7475,
                    40457, 10800, 48415, 64458, 53340, 54244, 23859, 7494, 10567, 8991, 8367,
                    50628, 32921, 23202, 9193, 57765, 17072, 6162, 19554, 49794, 42946, 41637,
                    45096, 50762, 6979, 59327, 5360, 55734, 32340, 23236, 44200, 7516, 15743,
                    26512, 50931, 35732, 51748, 60219, 44079, 46535, 33852, 34657, 22875, 62040,
                    48952, 47488, 48481, 60482, 46378, 11826, 43226, 3385, 26380, 9793, 31416,
                    9898, 15571, 15540, 12671, 3728, 45270, 64625, 4563, 18414, 45638, 17397, 4114,
                    8195, 12843, 31882, 40991, 57993, 37860, 45713, 60938, 9671, 57166, 11189,
                    17359, 7073, 47656, 28523, 17266, 38659, 61827, 16761, 60709, 804, 12466,
                    17086, 26509, 19888, 24374, 24913, 16858, 27344, 7026, 64568, 35796, 22094,
                    25621, 14621, 25041, 13731, 33591, 58785, 22586, 60945, 52044, 32819, 42796,
                    9196, 53834, 39936, 40525, 20393, 57397, 37063, 13281, 29176, 26092, 18325,
                    16986, 3682, 19281, 52256, 19311, 49412, 21951, 38980, 14479, 33705, 7439,
                    24631, 25653, 53861, 48986, 35070, 33414, 12188, 39654, 53542, 59446, 15833,
                    19512, 36859, 18609, 46937, 56171, 65121, 52136, 63850, 21651, 6903, 50095,
                    64861, 65086, 59128, 47546, 56114, 40490, 61307, 44285, 23127, 53374, 11726,
                    13948, 17557, 20560, 28420, 49563, 53395, 48735, 59699, 18910, 40441, 31818,
                    65308, 9992, 49220, 4902, 37443, 11376, 55511, 31729, 20730, 24161,
                ]))
                .unwrap(),
                c: 240,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x409c14e61e36bf8db6c0a273f5fca52280863df38f70c876ba562c01533cba17");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_1() {
    let value = ComplexTestStruct {
        a: 55607,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            62505, 41292, 62622, 63875, 25101, 7094, 43058, 29347, 7897, 45444, 63411, 49477,
            55649, 16899, 29654, 60380, 52861, 2299, 47898, 24274, 32152, 27113, 53276, 63817,
            26359, 26556, 37284, 63007, 44210, 25181, 58139, 10848, 15839, 29052, 28828, 63240,
            14802, 13330, 10366, 10402, 33278, 62674, 13234, 57939, 9554, 65518, 36680, 42047,
            53028, 56779, 59946, 7255, 25348, 3509, 45840, 9611, 64878, 57639, 12394, 11460, 12483,
            24930, 59521, 51658, 30353, 764, 16910, 44809, 27857, 13898, 2503, 13826, 3514, 28881,
            45999, 61908, 17381, 51638, 9481, 44231, 58028, 60061, 8495, 49259, 62768, 63702,
            41785, 19414, 41494, 63755, 45857, 43960, 28875, 43556, 39644, 22248, 5844, 28605, 234,
            56916, 48525, 59507, 50250, 43682, 17410, 1938, 20700, 63290, 44546, 15914, 414, 65269,
            6803, 7991, 21773, 5459, 3330, 44052, 52104, 31971, 62125, 11619, 55175, 44484, 17914,
            62703, 48459, 38801,
        ]))
        .unwrap(),
        c: 171,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            227, 187, 88, 49, 185, 48, 197, 232, 58, 91, 239, 116, 137, 32, 130, 251, 12, 206, 123,
            8, 216, 123, 255, 179, 15, 162, 165, 146, 118, 126, 28, 181, 211, 210, 145, 167, 18,
            96, 167, 52, 128, 85, 251, 38, 150, 47, 39, 37, 26, 196, 117, 143, 232, 242, 171, 236,
            91, 216, 248, 89, 234, 124, 34, 113, 62, 22, 95, 123, 228, 17, 62, 108, 68, 190, 207,
            85, 102, 130, 135, 201, 92, 225, 131, 84, 214, 158, 47, 149, 126, 245, 178, 118, 117,
            184, 74, 5, 182, 240, 49, 17, 226, 148, 138, 205, 129, 120, 92, 234, 117, 140, 241, 95,
            33, 185, 42, 57, 212, 139, 178, 125, 213, 163, 21, 218, 72, 45, 171, 106, 212, 129,
            154, 181, 155, 29, 196, 55, 114, 216, 53, 18, 136, 103, 159, 180, 223, 160, 207, 197,
            22, 193, 240, 30, 13, 43, 24, 233, 67, 138, 85, 169, 228, 173, 174, 160, 235, 114, 166,
            255, 173, 54, 7, 89, 153, 194, 214, 215, 181, 249, 74, 127, 132, 149, 68, 42, 193, 174,
            86, 45, 123, 1, 116, 61, 213, 139, 234, 233, 117, 72, 132, 241, 176, 197, 183, 143, 32,
            88, 82, 227, 69, 86, 16, 0, 11, 76, 198, 110, 159, 252, 99, 234, 224, 152, 33, 22, 51,
            59, 231, 136, 67, 66, 41, 159, 74, 118, 216, 73, 44, 190, 162, 149, 158, 163, 224, 230,
            59, 49, 107, 139, 136, 8, 201, 82, 103, 185, 194, 53,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 29437,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                28062, 43652, 58427, 37517, 31197, 5756, 57708, 8547, 39060, 56100, 31975, 65382,
                49550, 5730, 1899, 6160, 30282, 20993, 59817, 39435, 47283, 28532, 34831, 26228,
                24831, 48519, 3964, 30724, 43875, 55613, 27418, 43514, 46200, 44929, 30752, 18611,
                33923, 42378, 2509, 29985, 3365, 50241, 47603, 5913, 64265, 60191, 4381, 60195,
                52257, 8319, 17226, 33510, 21910, 36008, 47181, 46498, 62647, 64293, 8237, 52988,
                8429, 30288, 61242, 15886, 20878, 36914, 26985, 15918, 22455, 15111, 57579, 40171,
                51379, 22865, 123, 18539, 12775, 37124, 37183, 53672, 62981, 15213, 52534, 57669,
                55561, 44128, 63745, 4987, 10918, 59584, 50536, 16194, 9955, 8000, 29145, 26491,
                786, 36659, 49852, 39488, 50223, 47115, 51898, 43073, 13749, 17473, 46325, 12986,
                52878, 55953, 33529, 25698, 52805, 16878, 44039, 57282, 33653, 44329, 32550, 19413,
                82, 23578, 13014, 18528, 4571, 25938, 34107, 41657, 49230, 45622, 61743, 11037,
                3616, 33212, 48356, 62391, 19786, 46850, 65063, 11554, 24158, 19176, 37583, 17948,
                35746, 14283, 57465, 102, 11464, 50353, 32463, 47838, 32814, 13447, 822, 38429,
                35887, 2772, 8249, 56418, 58329, 54021, 7154, 46271, 64647, 41844, 48320, 14849,
                3687, 49835, 42697, 13874, 24482, 47331, 12997, 64447, 5167, 27444, 10449, 47009,
                7033, 13668, 26509, 25931, 43616, 63274, 25197, 51924, 49903, 7615, 31087, 40684,
                23690, 9220, 28555, 29352, 25147, 56359, 36049, 59553, 50161, 11636, 56402, 63944,
                32999, 52526, 62197, 32598, 33275, 39413, 55734, 12599, 4706, 17357, 16499, 24072,
                45395, 37698, 19098, 61210, 30590, 18064, 30783, 30295, 35121, 46037, 6084, 53354,
                21791, 53214, 56948, 28048, 5076, 21893, 24443, 17012, 46505, 46280, 18781, 15365,
                56811, 31155, 38242, 55163, 1292, 46542, 61963, 57289, 33038, 25, 52081, 19091,
                21069, 40486, 10108, 50677, 61918, 12707, 57257, 50555, 33418, 45330, 40647, 8896,
                26080, 61907, 41936, 65462, 54584, 44126, 58851, 50207, 56923, 31992, 47721, 39634,
                25590, 41214, 58032, 60938, 65307, 43968, 48752, 61391, 45034, 35633, 31588, 61227,
                35019, 16819, 20542, 12794, 53649, 58554, 61746, 57647, 14215, 51870, 10050, 61221,
                58773, 60195, 48726, 29889, 15079, 10043, 29019, 18899, 26012, 16401, 43855, 63069,
                61647, 7136, 38241, 60104, 9587, 29410, 42343, 64967, 29170, 64150, 38526, 25994,
                7673, 23210, 45043, 24277, 54115, 28303, 60073, 43737, 6031, 5668, 9942, 33665,
                26797, 17533, 16820, 3934, 35458, 14911, 17753, 13280, 36501, 26329, 26322, 30341,
                2296, 58472, 50252, 59069, 32304, 40320, 60379, 31350, 53792, 36106, 30614, 47433,
                29400, 64251, 46079, 49796, 24230, 4133, 21292, 5622, 63441, 9734, 11309, 23719,
                36631, 15990, 21734, 14415, 46842, 15892, 58514, 38528, 15405, 61022, 58050, 36243,
                54661, 47638, 46619, 582, 33621, 48483, 40371, 7615, 27816, 40494, 8444, 15942,
                56895, 63904, 27589, 45724, 5517, 8583, 1408, 16277, 29648, 21671, 52503, 10429,
                127, 57791, 64595, 1080, 56974, 27077, 12897, 30626, 36821, 29051, 18500, 4435,
                50958, 39340, 49621, 1815, 39985, 15934, 36779, 31123, 40005, 7579, 2729, 16836,
                18032, 16973, 65285, 45233, 30934, 36170, 17047, 31875, 48463, 54787, 6987, 64265,
                44516, 21404, 56981, 744, 11853, 63861, 15589, 56897, 48055, 64377, 22937, 57003,
                39575, 47030, 55396, 52461, 61589, 54249, 8930, 57564, 46031, 14112, 17047, 46471,
                10174, 4365, 38415, 52948, 62715, 50041, 51973, 5434, 38061, 13272, 38028, 53130,
                9475, 40016, 53229, 44076, 59783, 50717, 52603, 21009, 5486, 2882, 28565, 63564,
                62037, 25490, 24691, 24607, 5621, 19278, 24466, 63721, 2018, 51647, 60634, 44402,
                47470, 47072, 17539, 135, 53327, 23611, 20733, 22085, 54828, 15090, 36469, 15332,
                47031, 30378, 60277, 56027, 64012, 60593, 38235, 50743, 25902, 28555, 27334, 2510,
                57558, 27016, 51477, 58571, 26172, 21974, 44733, 31867, 46300, 31581, 10817, 47280,
                832, 57432, 58641, 11027, 59896, 10055, 26070, 3080, 12709, 64316, 3767, 58757,
                57262, 4204, 58619, 27596, 14356, 35646, 23127, 44044, 53508, 3610, 36884, 17507,
                12074, 11208, 33905, 8226, 14953, 41716, 25979, 51091, 48156, 15384, 35348, 44355,
                12326, 7498, 36711, 12992, 55385, 34691, 62028, 19985, 61393, 40828, 2746, 39141,
                17945, 41555, 48287, 20246, 46809, 14012, 39185, 11904, 22606, 44276, 53015, 6490,
                39924, 38071, 57, 57429, 64938, 4268, 5449, 40144, 27066, 61075, 61940, 32308,
                60455, 61326, 3704, 18303, 30834, 49426, 40648, 3853, 15653, 59446, 11292, 24688,
                14809, 39266, 23286, 18076, 28768, 42746, 21868, 30207, 43299, 295, 63809, 7898,
                17956, 11152, 21166, 48415, 39014, 15134, 9903, 63926, 55808, 24506, 60151, 38258,
                2493, 35633, 12629, 13802, 30066, 43022, 17022, 57377, 64704, 5218, 50170, 3626,
                39697, 10087, 65530, 12033, 36422, 1738, 13477, 54184, 41538, 53862, 47159, 5054,
                14755, 45002, 5923, 12309, 37642, 16496, 22221, 18096, 15132, 8706, 48927, 45233,
                51246, 45951, 9304, 34730, 65138, 977, 22085, 5862, 19270, 44460, 32874, 46327,
                2470, 31874, 31561, 51392, 63663, 39078, 47218, 26605, 44663, 20032, 25580, 40333,
                11381, 6134, 59631, 62556, 30404, 21469, 47247, 17795, 60489, 28995, 28004, 20490,
                49065, 58104, 49330, 44478, 20236, 35917, 55248, 52762, 42524, 8396, 44134, 834,
                7430, 33391, 28342, 19492, 45311, 6693, 7460, 9854, 18115, 23170, 211, 37705,
                44710, 62170, 31886, 42590, 27309, 47771, 44016, 63865, 8484, 34894, 1651, 26264,
                5124, 11162, 6808, 55565, 29031, 12438, 41303, 2913, 53350, 63673, 3118, 35006,
                1560, 41136, 9071, 48506, 26910, 8327, 50345, 11163, 32280, 57420, 17556, 60816,
                62894, 30395, 46223, 59297, 877, 27721, 14567, 33419, 42989, 64345, 43782, 36821,
                25086, 10936, 29852, 59570, 25167, 48388, 5439, 50086, 26667, 19198, 59999, 63908,
                18939, 3288, 65474, 42233, 1275, 2482, 30837, 15496, 61442, 28819, 20642, 28771,
                46764, 65050, 30458, 53280, 60533, 55758, 59964, 18259, 34340, 53025, 31538, 37279,
                41182, 11296, 5643, 40366, 17387, 44647, 3594, 4213, 41261, 10591, 29018, 23062,
                11618, 1835, 9568, 167, 40975, 39561, 56241, 401, 18785, 53649, 47883, 29046,
                47341, 63404, 15977, 30583, 36011, 31855, 52845, 10150, 6787, 17672, 4477, 61969,
                52631, 6184, 63642, 22364, 62169, 31625, 51560, 50011, 8227, 37511, 23559, 4669,
                4964, 27604, 50319, 38388, 46510, 52492, 38035, 1031, 60402, 41494, 43197, 25190,
                40897, 47219, 2238, 51849, 52927, 64336, 23334, 38427, 34965, 51550, 59912, 45050,
                2844, 39823, 20736, 59971, 34176, 957, 43590, 42759, 3365, 31964, 43493, 13553,
                734, 58623, 16200, 38891, 58853, 48898, 6316, 53870, 45180, 55957, 64555, 50314,
                61629, 53066, 36801, 42586, 44949, 7538, 43423, 2596, 22043, 53557, 64701, 42047,
                32789, 5268, 44885, 15096, 29614, 52876, 27126, 50054, 29134, 53293, 39797, 19175,
                13041, 16193, 45162, 17525, 51257, 29010, 40224, 21154, 48391, 27566, 55429, 50281,
                15376, 12502, 41158, 18230, 35230, 19043, 62323, 48364, 3745, 4973, 36283, 56399,
                60725, 19185, 18415, 11590, 57600, 16803, 3642, 17928, 50785, 15806, 50179, 35140,
                38046, 1935, 18014, 63215, 21927, 4544, 51981, 43741, 12769, 47671, 22865, 40754,
                39025, 41145, 2491, 38647, 8947, 64839, 11809, 45553, 49738, 21659, 26393, 52991,
                22242, 42192, 11540, 12394, 23926, 52867, 5820, 39167, 603, 65512, 18700, 64200,
                16923, 53878, 53091, 8102,
            ]))
            .unwrap(),
            c: 191,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 118, b: 17898722259386336437, c: 547028514 },
            FixedTestStruct { a: 129, b: 1696191175750378731, c: 441271196 },
            FixedTestStruct { a: 79, b: 5656593105049608470, c: 767613966 },
            FixedTestStruct { a: 86, b: 18333645735520644347, c: 815560055 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 33689,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    62530, 44649, 29854, 58068, 16506, 50867, 35171, 682, 8225, 51885, 64263,
                    59471, 10232, 10988, 50916, 6958, 21670, 35134, 15072, 23280, 50462, 43383,
                    53899, 13108, 31128, 5505, 18184, 21356, 28188, 53305, 8847, 10739, 16128,
                    61911, 34784, 57065, 27155, 36478, 34699, 47869, 2809, 19476, 1397, 15487,
                    35488, 23, 22699, 52499, 19378, 21941, 54265, 40593, 12644, 19667, 7302, 19220,
                    31616, 2470, 58308, 1193, 55829, 50929, 34118, 21280, 15378, 50725, 47052,
                    9451, 45938, 1869, 6637, 60820, 55589, 9551, 21625, 43601, 60493, 30261, 39640,
                    28761, 996, 45975, 24842, 60244, 58729, 11108, 42608, 46292, 25125, 60270,
                    39690, 1076, 60639, 56960, 7720, 37861, 40753, 47845, 35041, 56018, 49755,
                    44315, 15042, 52793, 18360, 30950, 15097, 52572, 10356, 25489, 37421, 54132,
                    30301, 50787, 21191, 30707, 4946, 19194, 32760, 24736, 1766, 28215, 54927,
                    56821, 32308, 18946, 19539, 31501, 2375, 14640, 9334, 28531, 2697, 9467, 64218,
                    57413, 6241, 37805, 42121, 26541, 54921, 22415, 35303, 24179, 18096, 57569,
                    20836, 7405, 1758, 14013, 50213, 32026, 60545, 48861, 46476, 56929, 57331,
                    50772, 60598, 40803, 35821, 43306, 53095, 3944, 4212, 62082, 55523, 23353,
                    3974, 42011, 29962, 6263, 20121, 50439, 43564, 43261, 10965, 48151, 21381,
                    53260, 16065, 23922, 44281, 62627, 57237, 18526, 61645, 61077, 27717, 52090,
                    9608, 40498, 54711, 55615, 51509, 49660, 26278, 51028, 20895, 24827, 32886,
                    57697, 4674, 39051, 10962, 35300, 57721, 54688, 18565, 39842, 29788, 32053,
                    22380, 29836, 53893, 17207, 6061, 11221, 1194, 13836, 166, 13341, 782, 65149,
                    51559, 13117, 50973, 6819, 39517, 9190, 36922, 20984, 32148, 17045, 34135,
                    12829, 55755, 22114, 60340, 47395, 64043, 15088, 7884, 44870, 37497, 23095,
                    11086, 14518, 14300, 17229, 22719, 32005, 20226, 22845, 33504, 65282, 46550,
                    59392, 22698, 62835, 42428, 5068, 33090, 25260, 24764, 19840, 11692, 10560,
                    15428, 5894, 36469, 1089, 18994, 24909, 28358, 45786, 6063, 37124, 6321, 12738,
                    46859, 7161, 7693, 15449, 47911, 18069, 33817, 11638, 19572, 16039, 30263,
                    56367, 55980, 17991, 38577, 28211, 43408, 30378, 4345, 12764, 12458, 37452,
                    61647, 51060, 45889, 46747, 21824, 59021, 29810, 17627, 12337, 15913, 41355,
                    36459, 50584, 50129, 18982, 14832, 63847, 19279, 26971, 56370, 48373, 16912,
                    36070, 57668, 42596, 32202, 53388, 39568, 24270, 2259, 35974, 16621, 22901,
                    14438, 29774, 18843, 60286, 1239, 21090, 28745, 8214, 48803, 64351, 47989,
                    59081, 13531, 2872, 38635, 55266, 14755, 13172, 50033, 4353, 57725, 4297,
                    17288, 55870, 49440, 31800, 24358, 38203, 48116, 24772, 3315, 55547, 44020,
                    18630, 20230, 19876, 28408, 1924, 58984, 51871, 36020, 111, 23865, 21119,
                    43187, 12476, 42920, 58671, 50266, 38301, 21021, 53483, 57848, 52284, 2509,
                    5276, 63897, 12814, 53021, 4521, 39886, 49102, 30061, 20411, 666, 54133, 51846,
                    61860, 8960, 1839, 5891, 51375, 31913, 42988, 35667, 33502, 49102, 63568, 6948,
                    37589, 6977, 35862, 25374, 42700, 25442, 34339, 30825, 11402, 2238, 5023,
                    53468, 36891, 53547, 34426, 35798, 47379, 46436, 61636, 14672, 9365, 519,
                    44847, 33250, 15883, 52001, 30298, 49425, 62052, 29692, 3220, 59012, 53021,
                    42723, 18904, 6964, 57080, 43094, 4915, 59830, 18105, 61872, 49925, 9381,
                    14090, 39371, 7614, 8123, 14801, 38490, 52853, 50257, 39089, 15690, 15447,
                    4098, 56386, 26130, 231, 26085, 32434, 17354, 47890, 63094, 37814, 32048,
                    55738, 30158, 20459, 10093, 35827, 29829, 50064, 50011, 61362, 47261, 21484,
                    15125, 38043, 62612, 19606, 51279, 27319, 18406, 7711, 845, 54338, 20958,
                    51039, 40810, 9731, 32836, 54568, 43614, 6051, 47944, 46780, 51537, 34824,
                    20832, 34881, 34703, 52696, 48155, 63930, 4742, 35455, 18262, 10182, 31301,
                    53019, 803, 23919, 27315, 4054, 52737, 57889, 11976, 34740, 61283, 57961,
                    18743, 32607, 36146, 45068, 15976, 7589, 56094, 52212, 42864, 51759, 60716,
                    52478, 17328, 31212, 31782, 33630, 18143, 16914, 11151, 45393, 62488, 11174,
                    2731, 7811, 16857, 13971, 32459, 29734, 21508, 51784, 7179, 30676, 62897, 9707,
                    10244, 24367, 38336, 64284, 22535, 52716, 4914, 20226, 9250, 26509, 37163,
                    32899, 11797, 12143, 60148, 10285, 51091, 59231, 58976, 27185, 40824, 5613,
                    61206, 21453, 8981, 1187, 10879, 24628, 12233, 50134, 27770, 47483, 26915,
                    37567, 50443, 22908, 63645, 23597, 54193, 36265, 35831, 21171, 40700, 30715,
                    14026, 1398, 30908, 59173, 42740, 391, 40363, 25100, 24888, 31788, 1734, 50025,
                    19157, 43650, 58603, 35709, 50590, 2355, 28139, 51402, 27056, 17200, 58397,
                    25369, 49671, 46315, 49881, 46069, 4322, 16821, 38447, 34348, 26915, 25296,
                    28276, 53083, 738, 50719, 56613, 21793, 26112, 20341, 31836, 62869, 40063,
                    49251, 61809, 5821, 18904, 4125, 47548, 2989, 23220, 49684, 4892, 10053, 6845,
                    12079, 62921, 30743, 9836, 7562, 10226, 27180, 9872, 24256, 37618, 49264,
                    65276, 19840, 38786, 65467, 38990, 51685, 38196, 36233, 21010, 9712, 51660,
                    17285, 3520, 45300, 8234, 41814, 8230, 55465, 24002, 58996, 23995, 44, 27612,
                    1222, 55582, 10288, 28682, 60622, 19721, 63749, 31297, 22461, 46685, 42796,
                    58295, 14193, 18000, 41708, 54061, 41703, 56889, 35306, 40604, 22650, 40998,
                    29928, 27296, 3660, 27725, 47601, 23060, 14650, 51366, 26083, 38630, 46456,
                    30454, 24209, 57674, 25704, 41440, 55637, 58976, 26635, 44228, 12119, 52000,
                    20399, 6701, 64592, 50326, 46284, 29129, 53831, 50111, 10335, 13313, 11975,
                    34380, 55759, 45047, 34983, 25479, 9928, 33349, 39667, 7734, 3954, 11141,
                    43034, 49650, 47595, 59460, 9821, 61240, 39396, 15182, 40374, 2819, 65045,
                    14458, 24008, 33989, 32244, 9364, 28902, 64745, 55628, 34632, 37123, 10154,
                    42704, 56249, 12742, 39102, 41559, 17601, 16326, 56500, 53232, 41076, 5494,
                    44174, 19277, 61369, 47611, 16724, 45709, 63909, 40888, 65105, 65129, 4969,
                    18388, 65266, 63157, 59069, 61299, 8618, 13986, 48325, 35023, 7554, 59183,
                    48032, 52445, 10594, 13892, 57451, 33565, 59449, 15262, 62237, 32499, 64405,
                    16602, 43535, 65166, 61425, 63533, 22577, 18731, 58541, 50128, 43280, 43412,
                    55138, 24121, 13639, 37875, 42162, 13233, 1047, 18374, 63928, 32265, 22846,
                    1742, 4661, 35350, 24643, 37514, 26525, 19847, 50411, 17293, 2973, 12739,
                    35014, 18078, 49176, 34885, 58976, 20349, 34040, 39699, 55457, 6496, 16798,
                    57469, 9813, 54291, 16887, 61271, 39207, 41101, 7050, 44552, 55398, 6230,
                    35660, 63164, 6822, 40135, 23987, 2031, 60381, 55977, 1477, 17703, 12113, 9730,
                    57047, 30788, 41837, 63418, 52850, 53543, 60557, 62675, 64384, 263, 53297,
                    32822, 56334, 62735, 1036, 17559, 12389, 43005, 10191, 25091, 11614, 11225,
                    60081, 10003, 22666, 46772, 53431, 44698, 33021, 3625, 6583, 57814, 3998, 6771,
                    37186, 62504, 14616, 8474, 46336, 6439, 43900, 14697, 11672, 9598, 22231,
                    43700, 33424, 43368, 42154, 60076, 50717, 47203, 38562, 55326, 10654, 31287,
                    20065, 21512, 11599, 57976, 9811, 26964, 62980, 803, 63189, 12274, 62802,
                    44802, 45384, 10276, 19558, 16547, 18209, 30466, 17486, 4231, 28724, 28061,
                    24595, 20195, 10892, 4686, 60117, 24328, 30101, 15432, 9795, 39252, 2615,
                    44553, 19023, 49900, 43334, 47979, 63896, 19809, 53601, 9421, 37053, 19118,
                    12297, 61584, 62299, 48690, 61172, 8422, 46287, 35075, 27211, 2026, 62737,
                    47333, 44598, 5456, 49090, 61830, 36327, 60356, 30742, 32377, 40148,
                ]))
                .unwrap(),
                c: 109,
            },
            VarTestStruct {
                a: 58838,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    49658, 37537, 25700, 45346, 63345, 65132, 38446, 43914, 50000, 62086, 1328,
                    36452, 57324, 9737, 54653, 31513, 53012, 55142, 1461, 52584, 61080, 47577,
                    41202, 28554, 51016, 3395, 21150, 12211, 16631, 4736, 51622, 20853, 48055,
                    36665, 38198, 21707, 62715, 27251, 56397, 58251, 20691, 59462, 54066, 14496,
                    12001, 57294, 56845, 26369, 29814, 34603, 34624, 32640, 24630, 53704, 52972,
                    1442, 48234, 57217, 7410, 54435, 39184, 16945, 26130, 19393, 29353, 46432,
                    22530, 25280, 46319, 2456, 43794, 19084, 3999, 13723, 59888, 18991, 6336,
                    33994, 39883, 7156, 30544, 4935, 36305, 46871, 44707, 2403, 24512, 18361,
                    45353, 23333, 41515, 51072, 6572, 4622, 7773, 20374, 2079, 39276, 5866, 1956,
                    30298, 41162, 31599, 34614, 34697, 8326, 61013, 29554, 36633, 48167, 20032,
                    25457, 51141, 25570, 16769, 33919, 35383, 41487, 53945, 59643, 15499, 16000,
                    28282, 8774, 61412, 30042, 22151, 7154, 31953, 53103, 43074, 3550, 62797,
                    56455, 2268, 34010, 46390, 29640, 34619, 55348, 3068, 58323, 37111, 31134,
                    48520, 57543, 312, 37253, 59501, 20461, 3783, 28570, 6261, 35380, 54351, 23376,
                    35341, 2855, 44202, 28883, 9262, 28779, 50805, 53635, 18202, 30217, 34092,
                    17894, 14625, 3684, 8745, 939, 41361, 53409, 16811, 16090, 20295, 17841, 34279,
                    44537, 35192, 25061, 39313, 55206, 17666, 15806, 15708, 38005, 3114, 55378,
                    49154, 16971, 47154, 478, 40052, 39720, 9061, 47610, 23, 48897, 21399, 4812,
                    46994, 29219, 13866, 42527, 60574, 64288, 36496, 50092, 46261, 21588, 39914,
                    48299, 24414, 27845, 15615, 52931, 4692, 45028, 20060, 52608, 57697, 57700,
                    128, 38070, 48372, 43641, 9578, 62056, 56088, 61328, 64073, 51126, 64993,
                    40363, 47925, 50622, 60601, 9971, 53019, 32250, 49892, 20965, 40202, 63271,
                    30467, 35644, 44742, 15072, 42731, 61281, 60878, 4203, 61821, 57592, 28319,
                    64318, 47250, 12094, 34154, 51669, 54324, 19442, 30809, 56956, 30686, 23486,
                    14413, 15593, 63604, 1036, 11176, 19273, 36219, 35466, 12766, 22074, 40009,
                    2165, 60871, 10347, 18371, 24026, 49210, 12254, 61533, 19213, 17225, 47173,
                    23502, 19775, 16365, 22372, 23420, 17370, 16473, 31126, 21509, 57384, 13788,
                    57261, 35364, 16417, 44529, 7955, 44734, 34744, 16949, 22873, 45312, 61913,
                    21451, 54156, 34596, 48106, 38739, 19399, 17826, 65002, 48667, 45100, 33250,
                    13181, 53778, 61679, 12600, 34137, 23291, 11566, 54421, 3586, 52520, 52111,
                    22904, 34356, 16399, 42888, 44715, 811, 14021, 29563, 19294, 20194, 4654,
                    30802, 53104, 63566, 16361, 18204, 40434, 14592, 54330, 34911, 65254, 15030,
                    40691, 4026, 57356, 37607, 51999, 7557, 60424, 32999, 5102, 55569, 7475, 32717,
                    39629, 46335, 18013, 63081, 15022, 16576, 27703, 15518, 17745, 39333, 27791,
                    39625, 14139, 1093, 55255, 14612, 14935, 12345, 5001, 17837, 28995, 29585,
                    5056, 54529, 11226, 19431, 54130, 52849, 63301, 38394, 53611, 9896, 40345,
                    20777, 52688, 43652, 33871, 31087, 31651, 35739, 40443, 25280, 10296, 15747,
                    32611, 1081, 39938, 14502, 9303, 3537, 60499, 36699, 24564, 65253, 6807, 30936,
                    41530, 48628, 6260, 15739, 1139, 40541, 47136, 15559, 42283, 289, 14025, 46768,
                    12445, 65457, 29556, 56398, 22133, 4010, 15117, 51299, 1849, 41906, 3322,
                    63024, 29634, 59788, 8797, 37379, 46302, 54222, 59902, 39908, 892, 40776, 851,
                    63341, 17747, 9924, 31453, 3330, 47434, 49418, 38032, 15150, 19307, 14499,
                    55637, 62039, 31569, 7939, 22269, 29644, 36440, 29079, 54213, 60614, 8454,
                    7136, 25386, 54692, 52439, 7988, 4419, 7337, 5885, 37333, 44102, 8467, 19262,
                    14565, 29567, 4389, 2150, 22606, 24929, 62638, 36224, 59591, 64252, 12798,
                    33698, 57182, 49489, 21629, 29980, 16955, 56048, 31331, 672, 7913, 36101, 4590,
                    9552, 64424, 48603, 63066, 48019, 35026, 32305, 63429, 47675, 9882, 63825,
                    1988, 51424, 64792, 7468, 53151, 11836, 26345, 18733, 8007, 59569, 43430,
                    24548, 19184, 63699, 22931, 48166, 36294, 10338, 53620, 23212, 39218, 18483,
                    45371, 55720, 27938, 4726, 44647, 38401, 49521, 19471, 44093, 63219, 13068,
                    37585, 29740, 24131, 14987, 28170, 29699, 21522, 53644, 10230, 61387, 40881,
                    54835, 32503, 30687, 17639, 20658, 41262, 57767, 32695, 57562, 33557, 61532,
                    39796, 38990, 37545, 21916, 36408, 23564, 21978, 33729, 17441, 39285, 39075,
                    32251, 11196, 530, 20433, 53546, 3251, 5308, 7916, 15230, 15239, 29647, 11165,
                    13798, 15624, 45725, 24663, 27518, 29704, 20356, 17569, 23591, 40658, 62983,
                    13806, 32779, 49993, 60125, 35645, 34057, 21187, 700, 22933, 42449, 11875,
                    38642, 54045, 62276, 17852, 43830, 33150, 7567, 26722, 12643, 61311, 11197,
                    31854, 24390, 14883, 43019, 16072, 28709, 53377, 14780, 41804, 28600, 22978,
                    59696, 28566, 22795, 54819, 565, 25043, 60497, 61053, 25985, 5623, 48427,
                    28414, 63343, 1552, 24065, 55802, 52313, 20987, 20413, 23652, 38352, 35994,
                    2359, 34882, 54943, 51456, 45078, 2482, 50647, 9045, 44827, 13211, 7614, 30564,
                    37107, 42904, 16679, 18928, 346, 60545, 23498, 56045, 24394, 4957, 1612, 31439,
                    40317, 26146, 21858, 62101, 6024, 23110, 1710, 39471, 7255, 41863, 12500,
                    54170, 51554, 13006, 51282, 64352, 38251, 56915, 56357, 59322, 41790, 38471,
                    37871, 16280, 5836, 21261, 63787, 63480, 50239, 19560, 13311, 147, 61842,
                    59690, 46612, 3647, 36505, 15819, 48395, 62981, 22804, 64596, 31329, 53717,
                    13176, 14350, 9580, 59930, 6626, 46327, 45394, 32470, 52910, 63908, 35667,
                    56648, 59841, 23125, 47598, 64652, 43078, 9051, 38319, 2169, 33224, 8208,
                    25652, 31213, 65189, 49435, 22200, 25770, 10046, 56995, 6051, 37079, 47757,
                    1575, 31413, 62094, 47831, 37338, 22664, 59667, 47280, 50437, 36960, 55442,
                    18695, 9506, 3419, 37141, 32711, 13765, 44832, 44756, 43642, 13683, 39098,
                    51545, 48305, 61022, 50798, 48781, 49651, 11142, 58483, 36057, 26512, 50015,
                    46941, 1717, 6499, 54385, 50804, 21901, 57400, 56294, 33992, 57100, 47195,
                    53247, 11033, 64931, 51432, 63216, 24006, 7085, 37975, 10085, 33231, 37845,
                    28664, 31642, 18596, 53057, 22196, 45887, 55139, 33019, 10912, 29363, 47731,
                    26613, 27872, 33421, 10935, 40453, 6549, 24689, 22586, 61720, 42568, 47856,
                    5594, 57343, 60876, 20883, 57761, 5956, 32113, 3280, 1178, 15913, 2049, 59601,
                    16040, 32110, 32684, 53297, 29911, 29285, 39850, 46579, 820, 53434, 1348, 4384,
                    44069, 9891, 26242, 123, 22715, 15634, 25332, 4730, 36848, 15146, 54955, 26910,
                    6389, 21390, 41975, 40896, 64000, 57206, 33749, 40627, 1089, 16195, 27857,
                    26715, 36724, 61762, 14098, 52516, 14825, 45574, 16740, 50819, 15917, 42908,
                    57274, 59206, 48821, 18520, 63350, 21886, 5404, 56160, 14298, 50529, 19117,
                    51178, 10729, 9479, 33161, 49061, 40405, 28682, 51229, 41030, 34045, 32018,
                    8913, 8102, 54945, 19476, 10464, 25104, 29972, 30576, 23970, 18614, 30398,
                    48925, 22794, 53775, 4360, 56013, 30762, 27630, 36344, 22201, 31812, 57292,
                    16847, 8723, 44865, 14239, 21211, 40014, 45888, 9448, 42422, 10155, 47957,
                    54903, 19108, 30675, 38878, 55849, 19222, 63753, 52007, 7711, 33914, 14692,
                    42498, 36292, 80, 58900, 62143, 33579, 10866, 9229, 33885, 33596, 33049, 24701,
                    31623, 8145, 39668, 16053, 50623, 48594, 30376, 54719, 3191, 24141, 51164,
                    47700, 23261, 50228, 44211, 16540, 16983, 50346, 42231, 39277, 1890, 15757,
                    64567, 32369, 34087, 34497, 49583, 32796, 19877, 6123, 33688, 26272, 9943, 364,
                    37190, 29476, 7916, 26196, 7435,
                ]))
                .unwrap(),
                c: 45,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa4207e21d4f48b20a17aae0219bd46da1eb9b13485685656fe109d55cd369ac8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_2() {
    let value = ComplexTestStruct {
        a: 32608,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            55350, 21656, 57724, 51795, 3930, 4048, 47282, 29956, 20641, 44773, 60183, 30145,
            52596, 33581, 37854, 48499, 52450, 37241, 39260, 61850, 31260, 65004, 24599, 59099,
            8488, 9090, 26873, 42722, 11990, 55440, 6440, 52949, 42119, 39667, 39535, 9551, 14793,
            65248, 24786, 7594, 27946, 10427, 63086, 64125, 61148, 59202, 46526, 36548, 58192,
            38515, 45732, 15881, 5315, 33765, 63866, 24349, 41267, 36335, 46448, 37326, 44485,
            26486, 22998, 39914, 15176, 30154, 36370, 41988, 39079, 12642, 58414, 18475, 59493,
            4021, 12388, 14050, 27629, 39314, 3812, 8418, 36396, 56265, 21661, 18297, 33798, 45977,
            14658, 47219, 65435, 6893, 55984, 17635, 30505, 34812, 56035, 341, 64693, 11675, 52967,
            46548, 41950, 46037, 27232, 20237, 59428, 39272, 11168, 63822, 51982, 34297, 9583,
            40733, 54617, 8106, 63768, 49931, 42463, 51512, 33001, 32730, 20866, 13896, 26820,
            2256, 52704, 20449, 23064, 26726,
        ]))
        .unwrap(),
        c: 114,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            81, 34, 35, 80, 170, 3, 81, 160, 138, 138, 153, 78, 43, 226, 13, 178, 242, 254, 66,
            131, 45, 252, 1, 21, 54, 172, 185, 180, 56, 22, 175, 142, 14, 23, 31, 193, 220, 193, 5,
            23, 141, 188, 200, 154, 28, 99, 74, 168, 83, 34, 81, 178, 251, 113, 89, 17, 250, 112,
            38, 191, 42, 241, 24, 114, 137, 35, 143, 115, 10, 36, 13, 174, 180, 59, 74, 206, 81,
            141, 212, 154, 188, 241, 231, 58, 93, 210, 118, 143, 69, 187, 7, 170, 50, 167, 68, 244,
            199, 185, 68, 90, 225, 154, 35, 35, 29, 217, 251, 189, 195, 244, 153, 5, 254, 110, 85,
            49, 189, 235, 153, 232, 230, 73, 87, 172, 67, 105, 4, 144, 147, 58, 125, 2, 1, 109, 6,
            219, 192, 224, 194, 132, 178, 3, 26, 102, 49, 4, 47, 212, 158, 232, 120, 21, 89, 25,
            163, 133, 51, 123, 172, 68, 200, 44, 239, 78, 248, 56, 46, 121, 96, 132, 128, 188, 126,
            48, 137, 141, 107, 82, 204, 226, 88, 161, 45, 30, 147, 116, 115, 153, 215, 249, 3, 173,
            136, 128, 164, 163, 189, 64, 149, 5, 80, 168, 147, 47, 40, 174, 207, 5, 94, 254, 92,
            100, 54, 9, 119, 70, 18, 160, 144, 17, 195, 248, 130, 212, 205, 107, 134, 22, 122, 197,
            126, 20, 37, 175, 176, 165, 247, 30, 35, 167, 149, 249, 93, 107, 79, 38, 102, 181, 31,
            192, 198, 188, 17, 59, 127, 41,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 41136,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                61639, 18621, 40045, 33842, 40864, 55241, 27434, 65279, 49298, 8007, 59239, 18968,
                52874, 19465, 39178, 21287, 6199, 12653, 31158, 12800, 26270, 27500, 44391, 29281,
                21678, 50067, 64292, 22880, 65463, 7138, 53665, 14459, 7247, 28850, 3632, 48847,
                4930, 27628, 65477, 46860, 56833, 37500, 54486, 32885, 40941, 35048, 2303, 51735,
                33978, 3806, 7921, 10309, 6720, 40601, 58072, 30791, 41291, 59863, 47889, 44613,
                39102, 64879, 18428, 60829, 17503, 15135, 42841, 52697, 13327, 25197, 21289, 12684,
                3032, 52332, 31674, 54132, 46576, 9328, 19929, 15199, 28739, 64668, 14956, 12487,
                11298, 63454, 8433, 59697, 10916, 10576, 7778, 2933, 6240, 41564, 33717, 33157,
                32638, 28815, 24690, 56340, 57098, 12594, 4884, 10251, 52714, 38939, 50189, 59680,
                60785, 8434, 21363, 38159, 21210, 7813, 57275, 48557, 19144, 49458, 37297, 4938,
                55434, 57328, 48834, 31094, 52384, 46280, 36369, 32522, 50513, 43750, 21913, 42931,
                33435, 56808, 51411, 33397, 19192, 314, 19092, 56648, 22113, 34241, 29343, 59574,
                45397, 22937, 12923, 51665, 61548, 18252, 13989, 32443, 35371, 34000, 15966, 28542,
                43895, 37691, 43946, 23361, 31019, 47770, 37293, 1317, 23353, 27705, 22762, 12063,
                30990, 48165, 33960, 9359, 49239, 59607, 21590, 63123, 23882, 8591, 51475, 49097,
                56351, 32627, 62560, 31764, 61277, 43166, 20931, 28824, 2261, 25890, 21257, 52400,
                62298, 12636, 26512, 31233, 7924, 16836, 9421, 473, 45438, 52131, 33646, 13964,
                22344, 49422, 22029, 2643, 15253, 60944, 19839, 51819, 37299, 33641, 45154, 17558,
                37923, 16057, 14251, 19645, 31147, 25540, 24210, 47302, 4334, 61043, 49038, 49138,
                14645, 60456, 34158, 51891, 45900, 9064, 52434, 16409, 27182, 14597, 50036, 63404,
                44719, 36248, 46806, 19898, 40730, 51144, 50223, 12889, 20890, 13446, 59804, 4308,
                59376, 58207, 11130, 19410, 3580, 51378, 21218, 5571, 22459, 43310, 51370, 47510,
                4906, 38160, 185, 50073, 23563, 46787, 1134, 49942, 29705, 34854, 42239, 26463,
                45191, 14758, 44872, 15758, 13509, 35241, 60869, 1180, 28884, 65034, 40406, 43540,
                59859, 12472, 27235, 29732, 2850, 4677, 45797, 23491, 57561, 38559, 9150, 57394,
                55174, 27405, 14792, 65063, 31178, 59833, 3992, 61436, 5507, 62030, 11270, 7891,
                44528, 39536, 62181, 29705, 50009, 6318, 7008, 28140, 63195, 35116, 16219, 36277,
                54583, 61926, 22439, 55119, 23900, 47365, 54634, 27477, 48718, 55945, 62353, 42684,
                26179, 54934, 58362, 59848, 14301, 11550, 32290, 47877, 59428, 18842, 12660, 47022,
                36199, 15279, 43073, 10706, 41013, 29076, 26146, 58099, 841, 34914, 55835, 47362,
                32550, 9495, 5268, 62103, 54611, 30863, 2081, 29651, 41084, 1359, 48434, 64730,
                54973, 50126, 2330, 9468, 49299, 16687, 43299, 36671, 50540, 64279, 33834, 8622,
                33841, 10688, 37470, 42486, 13936, 47066, 32289, 36691, 23849, 39080, 62657, 2773,
                31344, 42870, 15677, 30603, 37153, 42395, 15322, 63124, 48559, 7328, 20189, 58043,
                8093, 58828, 51207, 2114, 36835, 13252, 3707, 39308, 25399, 53406, 13064, 39503,
                42822, 13484, 38997, 63362, 59378, 54524, 5137, 64056, 47367, 39193, 16882, 32708,
                18031, 46298, 853, 5439, 40214, 57048, 25090, 55664, 21207, 49603, 17699, 58781,
                1924, 58961, 59483, 52953, 60307, 62525, 34479, 58494, 54391, 10794, 18956, 16365,
                4443, 38307, 62346, 51856, 16471, 29440, 18772, 23814, 15911, 7070, 3814, 20349,
                62982, 5907, 32825, 20539, 17303, 46730, 22652, 33165, 17845, 63772, 15107, 32494,
                14987, 63697, 45621, 32698, 53224, 60643, 21055, 56974, 45361, 45284, 44643, 50551,
                47011, 51060, 45721, 44041, 30835, 9881, 6391, 58187, 58994, 58604, 12222, 31423,
                33364, 9211, 40136, 28115, 902, 64318, 36908, 47299, 27806, 65025, 56474, 22184,
                1347, 15152, 58487, 22663, 48281, 50383, 27012, 60317, 10930, 58668, 25699, 65086,
                63670, 37544, 13743, 29675, 9059, 59240, 60332, 42067, 45576, 10439, 24820, 33770,
                53328, 17818, 51074, 1101, 10223, 17557, 33394, 14350, 21327, 535, 10266, 56608,
                53721, 50965, 46452, 6628, 60343, 19453, 2031, 29074, 6841, 54516, 38480, 32486,
                50226, 27771, 65047, 48750, 46925, 23550, 12936, 61725, 8960, 58747, 63394, 14362,
                62625, 34672, 44488, 36369, 18002, 52446, 56401, 23489, 16458, 32346, 61390, 63897,
                44782, 52399, 23980, 47161, 34397, 51454, 23096, 5915, 38087, 32330, 30759, 64907,
                23291, 57274, 50361, 2438, 65103, 15611, 35113, 14452, 24767, 47741, 6771, 5464,
                18028, 34414, 20216, 61370, 38822, 54651, 9997, 49885, 12194, 57514, 54941, 23964,
                25211, 42202, 62513, 1482, 50034, 15373, 29366, 6518, 62828, 44943, 23540, 60872,
                34821, 11471, 48374, 50550, 46184, 57887, 39127, 44717, 57530, 55050, 24207, 18865,
                16812, 54363, 24025, 27634, 53075, 56798, 11209, 8542, 17612, 63460, 18319, 24223,
                20119, 43846, 23677, 2043, 62607, 28177, 14729, 63173, 3573, 14973, 24655, 53232,
                45305, 16004, 29849, 30363, 56088, 7304, 43785, 3745, 30406, 39539, 28636, 9826,
                37167, 28079, 38691, 41687, 52727, 36603, 6532, 55972, 58854, 40001, 27012, 31467,
                10885, 51968, 40634, 38334, 48923, 38917, 9345, 15379, 39211, 23137, 23680, 19685,
                27357, 39568, 30352, 1221, 9847, 32890, 64371, 24432, 59292, 29796, 8865, 50896,
                13383, 65165, 64813, 58863, 62256, 50694, 4005, 52913, 13044, 44650, 18022, 10963,
                40399, 16733, 42523, 25865, 14058, 57112, 54382, 50123, 49378, 47060, 26100, 61428,
                23399, 52180, 47432, 43529, 47807, 3548, 1649, 62506, 24732, 57335, 12939, 2445,
                60052, 56214, 21944, 22678, 2333, 38485, 29216, 57769, 27778, 11103, 11657, 28153,
                65248, 47062, 57037, 39819, 27645, 12723, 28614, 43831, 4879, 29063, 9191, 56588,
                3524, 50473, 29823, 13413, 35968, 13411, 30390, 28453, 43423, 22630, 21359, 10937,
                5891, 4024, 10313, 61875, 31116, 61714, 57223, 57066, 35134, 3306, 38544, 58431,
                39002, 29273, 25657, 36366, 36201, 29920, 18817, 51234, 1743, 5610, 6535, 11243,
                11750, 35869, 54518, 57026, 31084, 17954, 17018, 31061, 9010, 34366, 46449, 46626,
                14605, 15340, 28281, 48176, 18299, 16830, 40421, 62857, 50759, 32586, 22972, 40189,
                57097, 61732, 51089, 50555, 20246, 19972, 6857, 6066, 8899, 33451, 41181, 60518,
                10812, 53543, 41959, 6898, 56889, 24460, 54529, 47261, 65479, 38784, 18860, 49388,
                44832, 36788, 23391, 55467, 45585, 593, 25372, 52439, 39129, 38297, 11694, 42871,
                52432, 37960, 5975, 24967, 6784, 22940, 13569, 15322, 30808, 41078, 21779, 55278,
                56941, 57162, 37426, 49844, 20751, 65095, 553, 22041, 57433, 13702, 56756, 9738,
                10730, 43825, 51206, 3846, 5067, 4530, 7474, 53004, 16880, 13976, 48440, 64924,
                41769, 53831, 18007, 25740, 53501, 5765, 16481, 9370, 9215, 27715, 32600, 63059,
                477, 56163, 6795, 36965, 59318, 61703, 36318, 28881, 52037, 62255, 56436, 3350,
                35307, 60908, 56557, 9511, 20001, 31208, 22330, 15784, 29174, 51004, 29021, 49288,
                30727, 14524, 40929, 61498, 6682, 60102, 40195, 42501, 40427, 35669, 3208, 12501,
                5997, 38962, 63611, 54147, 30767, 50079, 10401, 48961, 57477, 7170, 49076, 42623,
                62301, 62640, 906, 54476, 29802, 44727, 51111, 61797, 32882, 30971, 6591, 54332,
                26948, 1339, 15681, 20937, 60583, 58110, 8648, 45273, 44179, 46977, 62778, 49195,
                45342, 25689, 41104, 13364, 29007, 32860, 8492, 48825, 16478, 3958, 33220, 18983,
                56898, 13293, 33388, 57384, 20773, 57702, 44664, 6798, 24610, 38836, 15132, 39434,
                41898, 33155, 12551, 28531,
            ]))
            .unwrap(),
            c: 228,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 113, b: 12418776966693203458, c: 1111141746 },
            FixedTestStruct { a: 139, b: 5239459090452583293, c: 3876266876 },
            FixedTestStruct { a: 113, b: 4627819204503014684, c: 1292831473 },
            FixedTestStruct { a: 27, b: 11719097115770283329, c: 1859338100 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 37859,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    38784, 47297, 16490, 46876, 14434, 59976, 18686, 52905, 35542, 53890, 62146,
                    7934, 42139, 27861, 6454, 12550, 56788, 34173, 60275, 52163, 43444, 31478,
                    10378, 39625, 46265, 46166, 49816, 31867, 16558, 25895, 2996, 55050, 24105,
                    17354, 47100, 46836, 11416, 32905, 40733, 12316, 5906, 22671, 12926, 61635,
                    45033, 20928, 29922, 49327, 25439, 18241, 2307, 64858, 36404, 63027, 54157,
                    30849, 7651, 28544, 27353, 50876, 55798, 7487, 29320, 14233, 50164, 35351,
                    25869, 7981, 57499, 62035, 55646, 24474, 65453, 3655, 42375, 63330, 39055,
                    31017, 840, 55732, 16969, 4853, 42838, 17024, 62107, 53038, 17328, 42412,
                    23061, 63323, 4196, 43417, 52117, 13454, 34855, 2009, 16955, 28149, 18381,
                    12658, 24321, 45656, 43998, 32456, 53105, 32548, 46839, 52041, 31061, 1809,
                    6065, 28847, 58331, 58188, 36887, 44225, 5122, 14080, 17057, 31036, 62287,
                    29583, 35836, 63282, 1474, 10386, 64844, 28127, 1719, 30772, 4014, 8815, 6298,
                    13413, 63307, 42025, 33081, 26099, 10021, 50075, 13997, 30351, 52470, 31694,
                    24331, 16702, 54619, 18707, 16071, 60574, 55181, 48416, 19776, 63349, 22894,
                    61573, 18314, 63100, 27827, 58132, 30545, 57340, 18305, 30266, 28865, 22379,
                    4022, 62071, 11734, 54899, 37941, 19254, 50153, 46645, 33839, 5023, 18917,
                    15599, 49432, 10423, 29690, 58396, 11326, 52348, 60105, 37951, 16837, 17482,
                    41954, 56376, 57039, 27662, 40843, 35098, 59637, 16114, 37994, 58016, 39165,
                    11107, 841, 56817, 41740, 31991, 17304, 34550, 55282, 61214, 2295, 64467,
                    20625, 23285, 33085, 15160, 32987, 26524, 16565, 28706, 61070, 62335, 11617,
                    62611, 55822, 8372, 45841, 18377, 8438, 52095, 19900, 36093, 31518, 47210,
                    1526, 47603, 32826, 39037, 12709, 37301, 59542, 65456, 65337, 10147, 21680,
                    28023, 56695, 12784, 46084, 32953, 328, 55871, 27257, 13978, 12214, 25991,
                    60306, 3121, 11520, 19360, 55903, 54509, 58395, 12310, 55498, 1448, 2624,
                    51507, 59785, 35092, 14688, 39810, 21056, 36088, 8398, 16828, 9132, 12606,
                    63082, 40854, 14528, 19130, 54996, 30388, 26490, 32371, 50064, 50662, 42283,
                    23909, 54985, 29822, 47740, 8322, 8262, 57203, 29546, 29668, 22812, 38039,
                    38031, 61257, 34499, 25237, 47820, 21886, 50805, 30225, 42457, 16584, 37790,
                    28103, 12211, 21345, 37100, 16492, 51591, 46750, 58467, 15613, 9071, 57201,
                    18426, 37422, 25951, 59194, 8582, 44849, 28287, 38117, 43390, 31852, 27521,
                    64594, 36274, 15559, 49432, 29181, 5730, 8395, 45237, 14886, 3215, 11421,
                    63038, 52614, 5042, 55608, 52450, 37806, 39645, 28224, 60154, 43119, 57382,
                    55658, 32623, 35363, 57794, 58361, 41783, 44388, 13143, 32030, 20203, 54281,
                    22157, 21472, 8736, 61490, 4025, 6012, 62445, 58407, 50014, 49277, 25469,
                    48941, 17471, 47128, 17066, 60189, 22970, 37698, 37864, 31339, 27600, 43300,
                    47458, 50985, 3122, 27897, 45397, 19383, 7347, 13520, 25565, 26745, 17977,
                    31869, 39374, 28124, 721, 18530, 342, 13051, 61923, 3855, 29524, 53902, 45108,
                    47878, 9159, 17734, 13466, 27446, 42308, 53489, 40346, 26062, 25719, 54361,
                    60254, 7861, 22122, 62538, 27201, 58681, 15638, 51115, 18291, 5672, 10203,
                    25051, 49872, 6928, 24773, 25500, 39825, 30848, 17685, 26323, 3032, 30173,
                    14457, 29642, 23807, 11328, 16277, 33100, 40931, 12873, 12227, 33581, 52984,
                    15066, 37054, 33862, 32543, 23127, 18356, 1858, 30829, 51568, 14495, 2640,
                    34734, 62460, 13191, 37284, 56382, 65385, 52698, 36788, 33235, 18878, 50262,
                    47475, 52151, 50523, 42583, 6818, 47993, 58869, 59933, 743, 5032, 39184, 53906,
                    2395, 449, 8013, 56728, 14566, 27334, 33037, 61939, 64455, 14861, 47446, 7011,
                    12345, 59934, 49485, 24984, 26723, 59873, 65392, 43725, 63231, 1484, 16297,
                    33744, 10662, 48257, 65058, 6545, 56068, 38160, 34417, 15743, 22765, 5873,
                    36812, 40808, 19041, 58234, 18120, 59080, 57057, 56989, 59172, 65367, 39304,
                    62737, 25324, 3813, 17398, 50801, 60904, 32965, 4548, 37439, 5998, 53473,
                    10326, 39159, 63603, 27590, 60297, 18437, 40221, 20300, 29959, 55452, 61767,
                    54906, 61447, 30334, 487, 6176, 12970, 26687, 2219, 46565, 55590, 37369, 61653,
                    17292, 15404, 28037, 34879, 59090, 58189, 37146, 39289, 32104, 59106, 36584,
                    43939, 56637, 13533, 44645, 57578, 34027, 30793, 56916, 56858, 63385, 31733,
                    7768, 56488, 35521, 31179, 49861, 45155, 33577, 23244, 15418, 64584, 20739,
                    64411, 34059, 3155, 20341, 44392, 57595, 2238, 52319, 11167, 44065, 7739,
                    33438, 62651, 58152, 12637, 10162, 38016, 55444, 35498, 1776, 53995, 55151,
                    9860, 50828, 39846, 32519, 15039, 22242, 1408, 58097, 42437, 57798, 47613,
                    10416, 21839, 49283, 12474, 5553, 3063, 37432, 26476, 28180, 56248, 40458,
                    8372, 19692, 1740, 27670, 40456, 8994, 8527, 48204, 7690, 40755, 9323, 37950,
                    253, 5965, 40263, 58589, 17811, 12853, 21386, 26749, 26033, 36007, 48257,
                    14967, 47304, 62240, 40866, 63732, 43018, 41995, 32104, 13974, 51311, 9851,
                    11777, 39867, 52546, 19088, 20015, 16594, 49254, 62473, 29279, 41694, 38257,
                    39659, 65145, 5949, 23520, 11822, 20655, 55952, 20228, 41403, 32749, 49884,
                    21642, 19935, 29242, 29710, 8515, 40312, 41324, 57890, 27224, 47955, 53368,
                    30090, 33816, 2239, 27409, 3065, 18242, 48535, 56868, 12100, 571, 3639, 59905,
                    48489, 55401, 49187, 2302, 914, 48951, 64645, 58366, 37841, 48833, 28712,
                    26433, 51940, 37757, 18044, 21658, 54295, 24766, 19918, 1934, 41025, 17130,
                    12387, 63846, 54711, 30267, 40658, 3645, 18071, 55870, 2075, 37734, 1889,
                    58908, 37826, 2301, 7373, 6256, 29956, 39147, 48746, 7523, 3918, 21983, 56639,
                    41908, 46343, 24019, 43717, 45597, 54500, 45369, 64794, 51619, 27342, 57138,
                    14104, 64745, 32442, 60083, 39249, 28754, 43156, 15038, 47370, 24344, 31286,
                    49708, 31360, 10422, 41394, 12117, 57430, 56285, 41688, 19010, 35437, 18918,
                    59151, 27131, 49205, 26134, 58797, 2844, 22194, 52590, 42833, 39403, 35383,
                    38013, 17522, 42441, 32007, 33073, 41469, 6351, 42379, 61175, 43042, 59429,
                    31180, 47950, 15901, 40015, 41723, 56784, 53325, 38700, 23600, 34006, 35203,
                    27692, 61588, 55278, 17482, 47141, 56412, 36071, 57706, 60945, 33647, 7738,
                    38128, 58432, 12463, 42864, 3738, 12734, 52176, 26068, 32193, 38078, 49841,
                    25355, 28916, 65516, 40322, 52189, 33877, 7886, 49477, 49593, 57477, 11904,
                    33951, 43112, 21849, 8963, 20985, 34414, 25506, 59206, 61670, 49924, 43620,
                    14109, 59834, 36437, 1357, 44938, 58300, 53424, 51048, 7622, 7207, 62071,
                    16084, 29282, 26143, 47976, 57684, 63378, 38521, 7145, 63359, 14438, 44028,
                    24900, 33799, 54049, 1058, 9573, 34224, 48175, 16842, 26172, 12160, 33149,
                    24383, 25754, 29135, 25261, 44387, 601, 9649, 44749, 47256, 33629, 36804,
                    45071, 20925, 7179, 2961, 34170, 20691, 21828, 57792, 50851, 33553, 12051,
                    3437, 63853, 33510, 51536, 812, 56029, 19496, 53784, 10945, 54152, 46354,
                    16822, 11521, 25521, 57291, 44074, 56589, 7696, 47238, 38422, 128, 30555,
                    34576, 45760, 23625, 14201, 59861, 45825, 32478, 19431, 36634, 13304, 63936,
                    54325, 15159, 43583, 33923, 23346, 15538, 39697, 23928, 27618, 35253, 17802,
                    18782, 1885, 6766, 39663, 8960, 44945, 54220, 12113, 39765, 21884, 24868,
                    13089, 11077, 10643, 44397, 4769, 37780, 16483, 4825, 26581, 62372, 12716,
                    37193, 8446, 64329, 57747, 53148, 15916, 17895, 57125, 47188, 64611, 13150,
                    48768, 17788, 51180, 63494, 19391, 4062, 11525, 64498, 16275, 38102, 11672,
                    51183, 49513, 65084, 37895,
                ]))
                .unwrap(),
                c: 103,
            },
            VarTestStruct {
                a: 173,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    50609, 18794, 52399, 46643, 27629, 31515, 28292, 12953, 6340, 32183, 38853,
                    446, 43411, 33993, 28153, 3672, 23194, 60515, 58120, 3437, 31860, 4605, 47559,
                    53153, 11101, 19342, 51774, 15206, 12482, 29051, 49916, 42564, 59665, 18254,
                    41374, 55126, 25212, 53158, 37559, 58653, 37667, 4453, 16566, 40757, 38839,
                    58349, 2205, 63535, 22287, 42047, 37356, 24267, 20339, 61828, 50214, 25856,
                    45819, 16742, 33283, 21832, 49574, 38409, 23891, 47976, 11656, 8133, 8407,
                    39068, 37574, 53042, 60383, 2873, 48447, 55307, 5112, 46842, 16014, 14735,
                    39988, 22739, 19030, 61821, 37558, 5888, 59388, 43358, 12171, 5616, 27891,
                    49960, 41018, 49601, 31973, 58221, 2336, 58880, 28846, 30306, 64581, 58512,
                    14073, 37253, 61810, 61036, 25759, 25622, 58986, 821, 16174, 21560, 15170,
                    26984, 23696, 26151, 49284, 60661, 34539, 4438, 44121, 26475, 1552, 19139,
                    16910, 8131, 38029, 45565, 53771, 29002, 41597, 9031, 36369, 21327, 47990,
                    11554, 41606, 22895, 49818, 32685, 63543, 12655, 60665, 42779, 31745, 3692,
                    2633, 12140, 20840, 12226, 17028, 40560, 52398, 47191, 44574, 64661, 53155,
                    39301, 32811, 9763, 47000, 30048, 2204, 45958, 24595, 13277, 28335, 54386,
                    28463, 25451, 57197, 58512, 21966, 41958, 15569, 1582, 55672, 55009, 54443,
                    53252, 9373, 62266, 16585, 50973, 6080, 21356, 52116, 2049, 57931, 36528,
                    10558, 59254, 23965, 17365, 8413, 64367, 32598, 34498, 30295, 20815, 18872,
                    1147, 22267, 61345, 32255, 27363, 9433, 44922, 14053, 53041, 44130, 8825, 635,
                    38265, 27561, 27956, 38997, 60853, 58420, 46901, 46923, 37439, 40528, 21917,
                    52702, 62101, 45451, 7467, 96, 9134, 28590, 4430, 1259, 43457, 29321, 19830,
                    6316, 31001, 34435, 64149, 44468, 1997, 58473, 49939, 28920, 33448, 60528,
                    57367, 30375, 24971, 1646, 13121, 49325, 10008, 36808, 23662, 22903, 21523,
                    27414, 1629, 11342, 62751, 39056, 60974, 4641, 48662, 59868, 57651, 45471,
                    60349, 38720, 1938, 6359, 9714, 16232, 50490, 4048, 14600, 35248, 31431, 18266,
                    53884, 40987, 26899, 7235, 56817, 5774, 18300, 30275, 37745, 45208, 37618,
                    4246, 56592, 2018, 6205, 27276, 8754, 40389, 21586, 60777, 42504, 1096, 16989,
                    16872, 18246, 53752, 20319, 1309, 41632, 53110, 9141, 16846, 55297, 55736,
                    13242, 30970, 10778, 29044, 54213, 61057, 22445, 39518, 26706, 4827, 60166,
                    53836, 64809, 21354, 33876, 49394, 42775, 19458, 35514, 42098, 56453, 35361,
                    15390, 21599, 63873, 56321, 45994, 25860, 21240, 10829, 13787, 12356, 28519,
                    10203, 14090, 4906, 21066, 5413, 27697, 3367, 62474, 28881, 49995, 35440, 6703,
                    11387, 22828, 62123, 41801, 28524, 62115, 27248, 39216, 10197, 38745, 17494,
                    38597, 12349, 12547, 6979, 37100, 1581, 40341, 28274, 8930, 14632, 18464,
                    50194, 6992, 18574, 62375, 48618, 46161, 17893, 24371, 65003, 59719, 53984,
                    59995, 55481, 50057, 31671, 48224, 56254, 22253, 62905, 48497, 40759, 17087,
                    10878, 58751, 8506, 15882, 9548, 16344, 23542, 17200, 19116, 911, 46268, 21550,
                    48776, 44823, 25256, 635, 59263, 27390, 57234, 36899, 23254, 766, 42039, 40429,
                    5321, 59281, 13668, 2903, 11469, 11508, 22740, 57095, 22136, 17835, 52110,
                    2630, 9699, 53212, 25218, 42056, 52784, 46233, 41344, 43343, 39804, 19084,
                    57184, 16533, 63183, 7893, 43388, 31270, 21749, 11298, 19222, 44536, 25177,
                    16360, 39640, 45477, 49539, 3480, 34865, 54260, 40794, 1874, 60461, 11587,
                    45899, 18896, 31523, 31374, 60378, 12465, 22150, 12219, 4250, 20160, 55465,
                    32172, 44607, 42343, 23452, 39695, 31842, 63779, 17247, 20390, 9787, 44826,
                    20770, 56942, 30517, 63109, 45619, 23389, 56670, 903, 2716, 15581, 58586,
                    33892, 35113, 5330, 7783, 60527, 31014, 25544, 50122, 11179, 44393, 52252,
                    27820, 57148, 28306, 32402, 24292, 6430, 60312, 9074, 21537, 61464, 51166,
                    35366, 28954, 18207, 17818, 16762, 47973, 43013, 13492, 59216, 52397, 50133,
                    33327, 58681, 31368, 26783, 62898, 50472, 42835, 13472, 42115, 53388, 10452,
                    61457, 33218, 49840, 33236, 37498, 42761, 59712, 49244, 28935, 34527, 43867,
                    27537, 33060, 50149, 41847, 20969, 40499, 44833, 538, 48836, 36756, 57058,
                    46266, 35156, 10322, 60231, 51949, 12810, 59994, 59984, 50745, 834, 22248,
                    25591, 7982, 43592, 4328, 43671, 24802, 48695, 11575, 7146, 13753, 19503, 7063,
                    37832, 17937, 48953, 12483, 57139, 60468, 9995, 48214, 13662, 37425, 21868,
                    64043, 44674, 402, 46195, 19542, 46652, 9320, 4569, 2048, 55311, 55890, 53360,
                    48164, 8129, 13565, 31195, 28793, 58969, 32395, 14952, 4959, 51589, 17531,
                    37328, 24754, 27389, 2237, 51401, 1195, 16965, 5561, 37068, 56867, 58526,
                    62891, 1960, 40544, 65116, 32746, 20606, 6369, 30863, 51186, 40126, 33446,
                    31007, 27279, 60993, 59392, 61017, 6698, 8446, 32501, 60276, 1577, 61646,
                    64818, 50661, 56501, 26017, 64311, 63837, 52936, 35766, 56148, 29611, 11340,
                    54193, 54728, 35329, 59472, 25546, 65116, 60964, 35792, 19844, 35023, 50834,
                    15609, 63446, 943, 51679, 61283, 57662, 29361, 44771, 25660, 60244, 60566,
                    43308, 26440, 58180, 34788, 17628, 58101, 64723, 22998, 61205, 23649, 18982,
                    45696, 45445, 3439, 23803, 4881, 56969, 49844, 48966, 10572, 31379, 33628,
                    12440, 1672, 17355, 50960, 26177, 53123, 21113, 18644, 39181, 34263, 6222,
                    23546, 40762, 47891, 56159, 9646, 9893, 56807, 21867, 36793, 57248, 12664,
                    48010, 60796, 36668, 49393, 26673, 8500, 4497, 6110, 61631, 20222, 30841,
                    13909, 12674, 42449, 5690, 4767, 30822, 30160, 8893, 34388, 6405, 49289, 28039,
                    52254, 34224, 15168, 55115, 4319, 5944, 28185, 39917, 17444, 14029, 59880,
                    52305, 48980, 26514, 23345, 50470, 12126, 34276, 37664, 2507, 10810, 30768,
                    17673, 42728, 38517, 16982, 2067, 21968, 54363, 22422, 53511, 64610, 60469,
                    31434, 11858, 36120, 3672, 53944, 24534, 29614, 10056, 33814, 20541, 11198,
                    58997, 11574, 54070, 3772, 53529, 39069, 29419, 10057, 10407, 60456, 58387,
                    63314, 36744, 45686, 7527, 34128, 44169, 2094, 21570, 57591, 756, 37338, 31261,
                    50506, 51270, 12605, 48467, 24839, 5736, 43877, 46153, 46460, 32139, 48648,
                    23015, 61935, 37891, 57442, 61222, 32552, 34750, 16270, 20645, 35458, 55310,
                    27561, 7658, 51217, 8963, 49986, 31311, 11678, 4843, 24187, 53417, 61180,
                    63351, 19648, 6534, 25849, 11561, 4391, 21486, 44696, 60868, 7136, 12364,
                    48955, 21177, 2627, 63647, 11748, 11926, 21936, 28934, 53920, 43465, 3557,
                    3591, 17032, 49536, 9611, 11527, 2607, 60124, 53834, 45807, 57466, 64271,
                    44349, 25281, 20376, 52269, 35342, 29601, 65509, 16182, 16834, 47377, 38171,
                    47534, 20108, 63020, 29773, 19577, 47302, 8974, 64999, 46810, 7589, 6386,
                    13011, 27386, 62780, 18820, 29720, 40036, 50199, 54096, 47421, 27469, 49324,
                    43076, 36547, 7554, 622, 43369, 40746, 54535, 59921, 30492, 44351, 8609, 19523,
                    50843, 32101, 17839, 42931, 12454, 22850, 22786, 50903, 34869, 52533, 52848,
                    35269, 63383, 26630, 50228, 10148, 26237, 33009, 37812, 53443, 63335, 39669,
                    15886, 4012, 43094, 9954, 12140, 5843, 35081, 18023, 52335, 15722, 5247, 47161,
                    10617, 27883, 31908, 37593, 58963, 31325, 49609, 65049, 16717, 60680, 18484,
                    2835, 63352, 35544, 31178, 57684, 58877, 27587, 56259, 25092, 60121, 39144,
                    47780, 3708, 894, 16328, 29410, 19535, 52142, 2444, 626, 28826, 26076, 63470,
                    11214, 59795, 27264, 18668, 63948, 15609, 22312, 23987, 8229, 14884, 42077,
                    36024, 52388, 14377, 55885, 5499, 47714, 28812, 43943,
                ]))
                .unwrap(),
                c: 196,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf41cc77c30f0cd5add63388b749139c9df6fcb8ff2806512e79d98466ba1fa41");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_3() {
    let value = ComplexTestStruct {
        a: 22118,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            34158, 709, 41595, 32315, 36989, 37132, 49334, 7713, 10602, 52865, 45676, 59352, 54292,
            57746, 10958, 58077, 52487, 29166, 22798, 15247, 40458, 38727, 33399, 2320, 44095,
            32183, 57620, 18801, 52702, 32808, 58255, 29857, 57880, 48257, 63854, 59119, 29866,
            58716, 58583, 43058, 25231, 31774, 61801, 16547, 19869, 29925, 30544, 28334, 52532,
            46540, 18459, 59862, 60498, 14540, 29387, 1156, 8426, 53086, 30259, 22186, 55971,
            42341, 2911, 47386, 56569, 32916, 55369, 5047, 3822, 7783, 24239, 22299, 30424, 60547,
            38607, 23704, 35699, 20027, 16508, 33821, 45921, 64591, 40708, 8669, 3683, 41424,
            45588, 3963, 39390, 18843, 58763, 39709, 54665, 27746, 37391, 18503, 2621, 50454,
            44194, 12132, 1615, 57205, 55143, 16260, 29558, 25016, 41650, 29919, 62669, 49960,
            47530, 25238, 505, 14328, 58268, 10786, 24413, 15587, 36389, 19043, 37579, 20765,
            55013, 53314, 64034, 36223, 50858, 20994,
        ]))
        .unwrap(),
        c: 88,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            162, 247, 46, 214, 181, 104, 245, 23, 250, 102, 238, 89, 133, 244, 57, 119, 32, 25, 42,
            133, 67, 3, 85, 181, 222, 250, 146, 144, 19, 239, 5, 253, 173, 44, 6, 135, 142, 94,
            182, 103, 24, 158, 130, 34, 25, 30, 130, 66, 249, 49, 184, 45, 196, 242, 95, 202, 146,
            199, 194, 32, 123, 63, 240, 202, 168, 51, 44, 27, 212, 248, 49, 45, 178, 175, 157, 96,
            168, 234, 2, 221, 117, 136, 174, 53, 9, 40, 160, 80, 38, 211, 109, 16, 72, 161, 141,
            226, 44, 129, 78, 170, 122, 187, 211, 18, 38, 235, 162, 207, 131, 119, 57, 181, 253,
            252, 147, 84, 2, 211, 202, 241, 172, 6, 222, 177, 212, 27, 254, 23, 251, 8, 198, 197,
            237, 39, 54, 177, 146, 56, 221, 122, 144, 38, 121, 107, 225, 96, 100, 154, 253, 30,
            239, 14, 233, 146, 145, 152, 69, 66, 185, 215, 224, 64, 79, 172, 107, 232, 62, 42, 33,
            28, 156, 181, 173, 124, 236, 187, 228, 173, 213, 92, 116, 231, 132, 64, 51, 59, 221,
            194, 237, 138, 211, 204, 202, 180, 137, 7, 42, 67, 197, 218, 13, 54, 114, 245, 179, 7,
            120, 38, 131, 108, 195, 62, 49, 32, 141, 235, 247, 68, 227, 1, 89, 192, 17, 58, 228,
            170, 74, 124, 142, 77, 19, 203, 95, 211, 104, 90, 4, 63, 151, 133, 147, 136, 122, 75,
            176, 99, 91, 153, 237, 59, 82, 50, 19, 151, 19, 252,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 11741,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                21070, 30796, 35538, 34119, 17305, 24526, 34163, 60937, 49334, 29764, 46814, 58387,
                44099, 28446, 8589, 56365, 40590, 8956, 58923, 64469, 50427, 46843, 14396, 47296,
                9111, 29576, 47246, 37062, 5115, 43152, 44049, 22854, 14538, 31446, 35413, 16249,
                7554, 6236, 58558, 19074, 65388, 6248, 27568, 59420, 56767, 52556, 59242, 41699,
                8788, 63864, 32363, 3216, 23239, 14439, 52774, 41898, 673, 5713, 51951, 42526,
                56655, 15295, 29359, 63827, 210, 2029, 35776, 34125, 58649, 20473, 60424, 49217,
                61869, 3184, 64651, 19403, 36854, 51538, 34418, 56225, 64907, 47240, 16140, 15501,
                39300, 51617, 33783, 43804, 56548, 31360, 2378, 3470, 21963, 50704, 37142, 50169,
                43652, 59311, 9359, 46155, 38934, 38536, 38272, 51582, 60835, 50389, 24038, 60025,
                435, 12111, 32888, 20535, 50839, 3859, 27687, 15596, 22933, 23398, 10472, 59659,
                62059, 10223, 4687, 37532, 14805, 51248, 50707, 9246, 442, 64913, 7426, 23661,
                11020, 58035, 40037, 54377, 15633, 20912, 18934, 38256, 10641, 20453, 61621, 35923,
                8054, 44427, 49708, 12591, 15116, 45655, 6657, 60758, 55231, 1501, 43357, 27615,
                33701, 11537, 8931, 39806, 29358, 29917, 36428, 52511, 56532, 25314, 5528, 43192,
                44320, 64293, 15324, 53181, 6007, 47787, 51533, 26526, 43524, 48733, 23430, 33217,
                63966, 36060, 30388, 55946, 38867, 54466, 5122, 45359, 2071, 54771, 46586, 5503,
                63314, 21837, 10076, 52017, 42719, 47985, 57999, 26135, 46578, 64892, 22843, 62750,
                19251, 31341, 65243, 25671, 24160, 52613, 26631, 63597, 54426, 51380, 58924, 45792,
                3172, 38607, 43362, 50021, 6142, 2577, 22660, 2055, 37022, 34967, 34201, 37291,
                26499, 8602, 15306, 19107, 28153, 53370, 38076, 34, 38795, 3089, 31967, 50760,
                46066, 43126, 36243, 58714, 4417, 18796, 18445, 37012, 50195, 17678, 39215, 8714,
                63871, 58532, 30296, 20691, 62580, 48874, 7515, 45168, 27713, 3635, 13607, 6288,
                9777, 11542, 18851, 43650, 12090, 10521, 11210, 16049, 2693, 38424, 23870, 64794,
                57181, 9493, 4497, 5898, 19078, 7322, 15531, 26973, 43541, 2920, 10587, 63083,
                63305, 54983, 29513, 18622, 50616, 15911, 42098, 1582, 11192, 15875, 47741, 54385,
                32130, 39215, 46286, 56139, 9191, 34852, 23966, 43411, 25347, 41121, 8365, 64312,
                43168, 9927, 23104, 46105, 30168, 43140, 47083, 22900, 26770, 15558, 36592, 36787,
                9191, 22864, 53312, 48471, 24552, 37827, 4478, 35407, 31243, 4767, 18669, 42857,
                876, 39069, 23671, 46466, 19527, 19691, 59578, 40266, 12914, 6280, 58307, 41340,
                58532, 60507, 9971, 60035, 59883, 38450, 1358, 27605, 25984, 13527, 30029, 54859,
                65300, 52533, 46428, 7547, 12479, 37251, 22284, 17815, 21901, 29355, 51568, 24750,
                7517, 43833, 8543, 38025, 5698, 54023, 25055, 41943, 17415, 37824, 59719, 8573,
                59447, 51421, 13884, 36795, 50766, 42091, 15205, 37684, 39343, 52914, 17564, 48621,
                35677, 29773, 24791, 38135, 39588, 25310, 32877, 49982, 35068, 7589, 8424, 9031,
                23253, 22196, 43938, 51619, 49471, 34999, 45739, 30570, 42278, 28589, 38878, 7825,
                33354, 7242, 50551, 64714, 38997, 35620, 57827, 17107, 2842, 2390, 33557, 44887,
                17071, 56561, 20497, 43693, 4085, 40119, 38437, 38941, 21498, 15765, 15020, 37096,
                53696, 53412, 54220, 52458, 415, 15662, 2506, 46685, 15368, 27066, 26890, 35807,
                2227, 37360, 36741, 59992, 15043, 15116, 17305, 7323, 24395, 17922, 19158, 5601,
                56845, 58119, 7781, 7001, 19237, 61351, 42717, 15828, 6692, 13079, 15537, 9263,
                41732, 65287, 1289, 15781, 4627, 4932, 55876, 49957, 23150, 58964, 5020, 37632,
                14656, 33611, 20020, 35295, 16449, 9663, 30926, 46167, 26372, 7407, 57065, 14738,
                34620, 8529, 56863, 42825, 53005, 17111, 12100, 61969, 47254, 57266, 41118, 46235,
                19279, 21853, 21977, 64680, 31827, 17157, 43177, 4469, 16376, 8609, 3224, 64057,
                42275, 35750, 60388, 37389, 5757, 64164, 53061, 27238, 33447, 39538, 65078, 23643,
                21670, 6911, 32708, 38484, 21868, 8941, 15847, 12677, 38789, 31411, 36742, 60062,
                46657, 24338, 59576, 39450, 41547, 20348, 24006, 32298, 16014, 64621, 30156, 22264,
                37091, 53107, 36441, 25725, 61735, 64562, 62861, 5041, 47712, 29755, 11449, 54702,
                44210, 5077, 13735, 63196, 38012, 51511, 1427, 20865, 59616, 9791, 52284, 15207,
                36496, 3851, 59066, 43351, 47201, 60011, 25972, 21861, 7336, 50268, 39043, 19937,
                30146, 19893, 51281, 13596, 33367, 30583, 60283, 8056, 27214, 39076, 503, 22994,
                59919, 58063, 14081, 29353, 40668, 21480, 9352, 18631, 564, 59737, 3481, 32574,
                60252, 53441, 26779, 42415, 18125, 16627, 1396, 14084, 28985, 47589, 8782, 23779,
                30315, 10410, 23067, 45531, 16611, 12, 2099, 13601, 39654, 46612, 35309, 9051,
                18981, 58020, 37256, 1624, 31507, 60345, 16297, 61472, 29326, 27891, 36537, 4963,
                52709, 22402, 60237, 10610, 63170, 36374, 22970, 64400, 36068, 51858, 42099, 45247,
                17455, 39006, 42962, 63016, 21569, 58247, 14978, 41072, 45000, 4356, 32652, 15448,
                59420, 17073, 9738, 7896, 6059, 19937, 15248, 62424, 53085, 20864, 41614, 28307,
                48955, 33021, 14635, 60846, 5262, 22491, 37476, 6049, 14070, 61788, 6723, 21579,
                61422, 39119, 23831, 2828, 40825, 26577, 28688, 38859, 54827, 18443, 29788, 39744,
                43968, 44191, 3073, 58877, 28273, 36637, 13691, 58373, 54637, 37336, 13203, 60429,
                20665, 40816, 13103, 55950, 63512, 41648, 3369, 22138, 19213, 40206, 61630, 15379,
                23766, 63458, 58464, 49826, 38187, 11842, 19190, 13121, 27297, 33212, 12941, 64740,
                6674, 8917, 31720, 53187, 22646, 23386, 35862, 26626, 65152, 49176, 43305, 27788,
                26374, 7016, 14516, 24561, 24407, 46213, 22082, 46450, 42912, 10794, 52053, 45727,
                59079, 1609, 8926, 30635, 28289, 45735, 43443, 6601, 49071, 42282, 22945, 36081,
                24545, 47531, 13002, 41713, 57709, 7804, 65023, 10520, 22499, 31540, 44206, 30594,
                60470, 53097, 24856, 64226, 58509, 46982, 42865, 64506, 64560, 30139, 19509, 3065,
                560, 27202, 58161, 4004, 61640, 54431, 14549, 35848, 60542, 8453, 55074, 739,
                59056, 36416, 8235, 25776, 53956, 4094, 10323, 33633, 52311, 35376, 2114, 20141,
                52714, 3895, 31946, 58571, 9363, 4793, 51320, 52371, 21997, 17695, 29730, 3557,
                46953, 64844, 18212, 45405, 20840, 40550, 40733, 24093, 7231, 889, 21835, 49973,
                51457, 42937, 60010, 53392, 15852, 10340, 51892, 47718, 27035, 36420, 5396, 20073,
                3589, 14796, 12986, 56125, 5787, 36891, 46214, 53191, 33213, 23325, 2628, 8096,
                19839, 39913, 8681, 1278, 39754, 54892, 5994, 31202, 58661, 48245, 37108, 4632,
                56363, 3216, 2436, 5074, 5729, 59079, 54851, 40632, 49036, 51920, 45095, 29726,
                26046, 12060, 18307, 64610, 54212, 47102, 3056, 23011, 37643, 32550, 56074, 9316,
                54383, 3370, 25953, 3250, 31971, 31936, 47207, 44528, 37260, 42902, 55753, 44257,
                16695, 7577, 38367, 58305, 34227, 16854, 5087, 5809, 43552, 2083, 53143, 60263,
                6841, 11303, 25613, 60356, 13694, 11385, 24727, 32475, 148, 11877, 48560, 50231,
                1047, 6071, 18667, 21156, 48034, 37636, 42434, 22793, 46913, 65418, 33709, 34429,
                2661, 2889, 3737, 33812, 5435, 57868, 21145, 36658, 41798, 46570, 25826, 7343,
                43174, 8765, 27650, 36742, 5101, 6043, 57535, 54722, 22890, 2347, 61047, 63668,
                29388, 54249, 33357, 31854, 38062, 26177, 48185, 25949, 59881, 57384, 43100, 28141,
                38991, 1638, 54234, 50355, 25175, 50625, 22800, 36966, 29530, 25531, 46039, 1512,
                40650, 17931, 43622, 38178,
            ]))
            .unwrap(),
            c: 128,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 131, b: 111702605827304594, c: 2776538391 },
            FixedTestStruct { a: 72, b: 16484567452960080696, c: 4255691941 },
            FixedTestStruct { a: 81, b: 10958519019196722049, c: 2644477828 },
            FixedTestStruct { a: 164, b: 7879546177034977637, c: 1079823704 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 24613,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    40593, 31421, 38731, 1217, 36715, 38306, 10302, 49966, 60158, 36558, 47680,
                    26331, 57173, 63565, 29985, 2652, 4032, 52501, 38337, 40441, 58170, 16289,
                    56684, 60380, 43059, 53143, 32062, 42284, 64518, 35969, 10501, 50825, 29851,
                    8277, 37904, 2999, 17952, 64563, 1502, 17845, 39828, 11141, 3798, 25826, 59795,
                    20494, 26078, 23804, 50393, 28341, 8997, 10015, 35548, 51666, 48760, 7935,
                    23250, 46647, 4070, 25474, 54852, 3743, 4896, 54785, 61769, 29417, 50498,
                    38865, 11321, 16415, 988, 18555, 25812, 7279, 27772, 30699, 10609, 31227,
                    43150, 5736, 7234, 49987, 36202, 34802, 44714, 21520, 25534, 57445, 53008,
                    17328, 41110, 23389, 42079, 17137, 51992, 45538, 36587, 23886, 8501, 46369,
                    445, 35096, 7954, 32793, 12027, 57499, 1319, 61989, 36035, 10842, 7133, 50264,
                    47598, 31357, 59168, 32311, 58379, 11953, 13605, 59897, 57171, 29351, 48824,
                    56365, 17286, 64047, 51762, 41064, 40885, 63659, 4246, 55678, 20058, 24567,
                    49767, 47139, 16873, 62612, 43798, 41883, 18048, 1903, 49106, 30781, 51865,
                    49843, 40522, 33679, 19463, 47716, 9650, 57693, 33262, 7418, 44710, 46088,
                    18432, 26069, 4305, 18786, 19193, 5910, 16805, 65110, 7143, 56507, 51446,
                    29860, 39101, 62724, 33780, 4320, 17558, 11234, 61940, 48515, 1691, 8793, 2239,
                    43653, 50068, 5271, 34464, 4059, 59238, 51163, 38945, 14781, 20253, 32553,
                    2720, 22726, 762, 31781, 4914, 2501, 23176, 31558, 57976, 1989, 45727, 40696,
                    3093, 15119, 43792, 11684, 20805, 45369, 6492, 48108, 17678, 50708, 32039,
                    13694, 56453, 10924, 39050, 22414, 56511, 5741, 44447, 18652, 19724, 25734,
                    5347, 40239, 29786, 50584, 32576, 65312, 42205, 39367, 34317, 60616, 700,
                    16918, 36153, 63585, 27743, 26882, 52434, 24719, 52904, 25833, 32790, 30606,
                    30327, 16455, 59129, 64803, 52456, 65372, 63010, 16050, 57983, 13232, 30054,
                    4806, 54920, 2673, 43312, 61394, 27805, 13423, 5583, 9824, 19791, 50124, 58968,
                    65255, 32072, 18494, 55910, 24819, 19928, 42352, 58716, 57555, 43342, 6189,
                    55370, 51751, 59552, 27498, 26822, 29003, 10697, 43167, 31062, 14443, 5835,
                    36697, 6573, 16131, 1157, 44604, 1336, 45584, 22194, 26756, 39207, 8838, 36969,
                    48811, 23060, 3265, 57298, 56052, 45474, 891, 51457, 52885, 34391, 22547,
                    23773, 21500, 57073, 117, 43960, 33624, 20556, 39863, 48626, 42237, 41558,
                    25856, 7743, 13630, 52943, 13146, 1765, 13367, 451, 17759, 47402, 46212, 5757,
                    4014, 11422, 58129, 27672, 8832, 57502, 29595, 58512, 48219, 61214, 27510,
                    22932, 20917, 46362, 22719, 47158, 19527, 7720, 49766, 59502, 14959, 20295,
                    46917, 12068, 18538, 14183, 48225, 30907, 35393, 45042, 27333, 37659, 20489,
                    14409, 41473, 10389, 36591, 17195, 462, 52041, 63078, 44045, 43807, 55815,
                    38601, 15011, 15159, 21979, 32121, 45301, 14012, 4803, 42649, 58313, 26123,
                    63780, 31833, 1966, 4605, 35356, 46554, 3742, 5892, 23275, 1877, 5826, 22139,
                    52463, 58263, 63322, 63, 51807, 21473, 55569, 33168, 62044, 21197, 37421,
                    65306, 20998, 21939, 63288, 12858, 31978, 26638, 20072, 13736, 40463, 35819,
                    55452, 31976, 22251, 16670, 17870, 23, 56138, 38166, 40058, 37473, 27050,
                    35922, 7025, 37562, 3012, 17053, 30097, 26607, 5086, 61811, 25092, 57025, 2791,
                    11676, 2289, 5229, 4731, 60643, 10844, 54933, 14545, 59671, 17567, 2870, 53825,
                    19530, 51464, 26526, 13687, 33965, 12427, 45476, 34414, 56185, 16990, 36345,
                    47687, 56582, 34583, 22138, 18198, 26336, 28979, 1731, 47964, 30724, 14545,
                    44389, 35431, 16603, 10186, 57346, 27301, 31272, 62425, 13707, 59320, 33346,
                    33135, 35439, 55971, 33136, 11889, 11428, 14547, 39499, 37197, 18411, 64824,
                    42540, 54776, 47863, 60798, 6766, 8325, 55609, 5778, 44616, 24320, 39130,
                    36386, 25572, 18437, 20469, 16039, 17477, 43911, 39146, 18322, 51382, 53666,
                    39703, 31032, 7630, 31786, 61321, 49727, 45191, 51108, 37176, 33824, 39893,
                    6898, 14022, 36044, 15512, 46667, 12878, 11920, 21436, 14379, 7974, 21394,
                    64665, 49649, 56029, 4303, 51677, 40176, 49167, 63349, 41829, 4323, 3048,
                    20757, 64573, 17800, 13704, 58356, 25150, 29605, 15529, 65404, 59371, 20655,
                    22698, 44164, 5035, 59930, 54264, 22227, 35209, 62816, 33894, 1082, 26167,
                    1899, 37410, 13621, 12013, 3619, 59174, 19795, 32292, 27143, 5685, 52657, 9671,
                    49357, 55218, 12419, 15832, 3121, 19000, 42401, 9126, 8954, 28933, 2264, 2165,
                    37404, 12605, 15246, 11374, 60302, 37295, 22898, 17260, 27725, 1543, 17846,
                    27391, 56353, 60567, 2841, 51382, 58417, 34958, 52892, 17461, 17706, 43709,
                    27853, 32932, 18559, 25265, 21261, 49010, 61699, 47538, 22413, 16052, 21051,
                    21163, 29234, 62204, 22801, 55885, 49747, 59615, 18691, 22364, 43104, 56788,
                    33977, 12205, 58926, 15675, 63550, 34034, 41140, 3618, 51122, 18319, 24275,
                    55840, 58748, 62131, 60720, 1601, 55007, 37640, 37308, 36569, 7031, 30058,
                    19749, 30554, 19243, 46062, 13199, 63415, 26139, 5920, 46681, 49451, 46494,
                    21042, 59197, 4466, 27102, 26450, 37032, 35071, 17534, 33928, 65358, 124,
                    28871, 40921, 22016, 46103, 35758, 36118, 41631, 54058, 49507, 7301, 51109,
                    13790, 63838, 1967, 21529, 12789, 19528, 47241, 30356, 41153, 3418, 20229,
                    12763, 20437, 22093, 54645, 37570, 38623, 5937, 64978, 32684, 35498, 39680,
                    1917, 48606, 19679, 4552, 45039, 56063, 48027, 37221, 29714, 31082, 8161,
                    45588, 4073, 7415, 44854, 57720, 55605, 48015, 1586, 16217, 22790, 62749,
                    38790, 34774, 18301, 39732, 28749, 29763, 34287, 24223, 35482, 48445, 15390,
                    24682, 18376, 26268, 19010, 23271, 21335, 39568, 51538, 42925, 49632, 58656,
                    18123, 37221, 33507, 48079, 58370, 20828, 17561, 55476, 53205, 22868, 7860,
                    18974, 46744, 54714, 7848, 33434, 56323, 64824, 39244, 60610, 63227, 20091,
                    10382, 29556, 53616, 1783, 25044, 30559, 44280, 14589, 11193, 38461, 34866,
                    11473, 55388, 48270, 52573, 37373, 2120, 12087, 43233, 1022, 63695, 19911,
                    55254, 49110, 11346, 49936, 19609, 25934, 20756, 33220, 23495, 5773, 61314,
                    32547, 11486, 11058, 58111, 57026, 2210, 10854, 21862, 35817, 27079, 43995,
                    17931, 48966, 34166, 51283, 16241, 25314, 56992, 5637, 14185, 32083, 11338,
                    17026, 29076, 24605, 31017, 23510, 2534, 52952, 51761, 47801, 65370, 35509,
                    55854, 54703, 13802, 7167, 6692, 44556, 44740, 51414, 51685, 9778, 48555,
                    35074, 16301, 116, 33634, 35707, 49641, 62551, 14591, 59035, 13594, 62998,
                    57145, 3531, 28874, 17143, 23368, 24645, 9646, 30745, 12752, 53827, 17793,
                    20023, 1654, 28927, 37874, 37282, 29999, 36637, 4954, 24626, 32901, 47059,
                    33914, 1337, 41600, 34864, 64893, 12452, 54413, 46762, 3092, 52161, 43764,
                    46262, 13578, 32279, 1050, 36584, 35685, 2150, 23141, 23295, 4739, 14639,
                    48379, 12003, 46861, 43908, 18079, 10949, 43740, 13912, 48842, 1687, 13583,
                    10258, 6425, 11402, 42591, 56451, 2189, 19304, 5112, 55238, 64979, 30450, 4790,
                    40135, 10222, 21056, 45941, 18501, 29180, 48342, 42925, 30538, 55393, 21043,
                    3210, 49287, 39056, 31252, 44121, 56828, 41628, 3470, 16604, 25896, 40125,
                    22146, 7954, 63710, 60947, 34358, 8840, 11986, 32888, 8618, 52026, 62089,
                    21231, 60773, 52669, 64845, 64574, 27854, 19162, 59847, 43107, 59739, 14286,
                    4322, 62307, 5549, 13766, 9718, 13081, 28662, 30087, 26716, 59884, 26943,
                    29058, 63224, 2097, 45752, 56756, 62825, 19264, 16494, 53230, 16611, 20292,
                    45237, 9775, 60401, 428, 59653, 15535, 45890, 982, 62835, 55713,
                ]))
                .unwrap(),
                c: 205,
            },
            VarTestStruct {
                a: 54227,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    43916, 56856, 41639, 63948, 53356, 42600, 41587, 8752, 44913, 51602, 10980,
                    39883, 46848, 45211, 44232, 5460, 36993, 11008, 31342, 49808, 12869, 31378,
                    41354, 6840, 49057, 8083, 7088, 47982, 4346, 63800, 6172, 59771, 10293, 58819,
                    13518, 57312, 48745, 11738, 64237, 64541, 2516, 42187, 38686, 24260, 28229,
                    8185, 25908, 59443, 14317, 61596, 1362, 4438, 6298, 32821, 39586, 35571, 47851,
                    63828, 42762, 31047, 10968, 55697, 35539, 57710, 53163, 50889, 27936, 21604,
                    26903, 49571, 20382, 61816, 61405, 32130, 35174, 45359, 5791, 52134, 11152,
                    14012, 51395, 2610, 24109, 38788, 51106, 38755, 13775, 12282, 50007, 57408,
                    46385, 57587, 57610, 57749, 28012, 1790, 12066, 6056, 42057, 15957, 3906,
                    65385, 22945, 8857, 34807, 53698, 48715, 8804, 41139, 25018, 9549, 61195,
                    20714, 63247, 752, 26084, 46746, 17445, 56571, 23040, 11731, 61946, 474, 26889,
                    44216, 9508, 5843, 39648, 30894, 47818, 49745, 6139, 31919, 3068, 18442, 34374,
                    8948, 60817, 23128, 21435, 54531, 14527, 44483, 48346, 12585, 49726, 25704,
                    41730, 16263, 45376, 12459, 42773, 28470, 43332, 61402, 38788, 28921, 35352,
                    46453, 57107, 33426, 50417, 24032, 23200, 59124, 15105, 55859, 1646, 5480,
                    61513, 18308, 56773, 10399, 11729, 11990, 62192, 55961, 30044, 6588, 47196,
                    61314, 51250, 61302, 19187, 32568, 41601, 30806, 15908, 46846, 11099, 31785,
                    41672, 51145, 27041, 18074, 27686, 37419, 55237, 44550, 13433, 51822, 56850,
                    30520, 45846, 47956, 52058, 38499, 25918, 29449, 46016, 11778, 419, 57614,
                    18753, 47872, 64114, 27776, 40478, 40633, 39916, 48432, 6639, 63089, 39929,
                    40790, 22289, 17506, 45534, 42894, 39275, 54501, 32379, 2266, 3611, 6801,
                    53899, 37663, 38137, 31352, 47703, 24589, 25166, 52433, 32363, 32405, 5586,
                    62817, 13549, 1302, 56225, 39525, 34328, 44540, 20214, 5975, 38075, 53375, 960,
                    29686, 855, 30898, 9990, 759, 22418, 2284, 37293, 26168, 24153, 56304, 313,
                    16343, 58481, 12932, 20762, 49864, 41954, 48037, 39265, 62151, 58564, 23783,
                    7121, 13684, 8701, 18762, 11979, 47531, 59689, 32050, 34963, 22200, 44774,
                    26076, 55125, 79, 2210, 10496, 7287, 11039, 59270, 27354, 65267, 4163, 33983,
                    31098, 33873, 20473, 39479, 17896, 5430, 34420, 29216, 50900, 12368, 439,
                    60595, 51751, 7346, 27678, 44172, 59593, 56658, 28766, 12439, 48881, 3465,
                    12043, 10151, 48390, 39615, 46236, 60240, 21067, 12023, 26978, 59524, 11549,
                    15130, 313, 6555, 51542, 50384, 21150, 956, 44682, 14664, 38545, 15350, 7778,
                    5340, 30678, 26844, 19911, 61758, 48333, 23311, 46492, 30272, 2049, 65334,
                    37711, 2828, 37485, 21730, 68, 24616, 55984, 29711, 39647, 42501, 20935, 26817,
                    43776, 31736, 34949, 36989, 28873, 46609, 14805, 7190, 16670, 19856, 58951,
                    30016, 28861, 13353, 39331, 35390, 1529, 28779, 59781, 44306, 46132, 41652,
                    29343, 31123, 2650, 55784, 20562, 44770, 515, 21422, 45586, 50146, 45629,
                    64432, 32141, 30682, 48078, 7808, 48967, 20757, 50643, 30359, 64895, 37275,
                    57171, 59375, 39149, 17748, 1651, 56070, 36498, 25152, 5280, 49861, 15819,
                    6262, 28530, 22880, 27252, 64079, 32875, 48171, 50396, 45440, 10772, 13832,
                    64275, 63000, 10612, 13177, 15079, 11275, 20168, 47022, 24310, 24635, 43875,
                    4047, 45164, 53680, 36949, 50515, 3129, 5169, 56583, 9598, 31276, 41233, 47071,
                    4937, 12004, 18083, 37231, 6932, 30742, 776, 55734, 30933, 14991, 55326, 6964,
                    9989, 33831, 48564, 29942, 424, 58135, 7148, 10012, 45476, 27164, 54043, 46808,
                    2085, 15663, 12871, 39401, 1692, 4777, 16752, 24779, 19449, 27186, 49399,
                    26179, 643, 16452, 16914, 36593, 39556, 4469, 17518, 39226, 37137, 54158,
                    48796, 36407, 4934, 62006, 43450, 39963, 62591, 46445, 25387, 32009, 38867,
                    55511, 37008, 22852, 65043, 38879, 32613, 4741, 33248, 27869, 13091, 50440,
                    39434, 5764, 26032, 12984, 11222, 49648, 9303, 64005, 5648, 20196, 45338,
                    38327, 46983, 45280, 16297, 33467, 20026, 19578, 5154, 12090, 42008, 51365,
                    20868, 39261, 28509, 48547, 34197, 10667, 22170, 61848, 65134, 1976, 4045,
                    25032, 16986, 47940, 31929, 53430, 15606, 6138, 37874, 27787, 39360, 27225,
                    19421, 51184, 3901, 26517, 21282, 25948, 58747, 45666, 1724, 8118, 19776,
                    41337, 16622, 55309, 40327, 45860, 51322, 573, 31182, 64332, 35492, 60317, 669,
                    47855, 29050, 45810, 52632, 64108, 11149, 14435, 10801, 1438, 14013, 14760,
                    14162, 29660, 45447, 1032, 4306, 17490, 37957, 31212, 45907, 40118, 16100,
                    53958, 25610, 54244, 23805, 12996, 40596, 37362, 33393, 10188, 6057, 56754,
                    13789, 3335, 10400, 15732, 17271, 21016, 46170, 4327, 18935, 18168, 1213,
                    22212, 17915, 37850, 49755, 54486, 9139, 52152, 44952, 11550, 44219, 6306,
                    3034, 43002, 59047, 16300, 26568, 17560, 21791, 48167, 19444, 3815, 9707,
                    14903, 28698, 50264, 53996, 25050, 19944, 33265, 45111, 63929, 52895, 63285,
                    15277, 43824, 64098, 27885, 8505, 24813, 39056, 493, 64690, 33810, 60523,
                    43368, 6871, 63002, 64103, 60241, 13780, 45922, 58713, 30176, 24673, 55842,
                    7052, 3737, 18916, 5389, 54157, 36124, 2145, 63015, 44070, 8320, 30323, 52560,
                    65259, 46951, 11329, 64264, 61649, 30472, 51769, 49195, 58711, 61358, 85,
                    32756, 16827, 34426, 25464, 32273, 3831, 53625, 49665, 23722, 12160, 28726,
                    58480, 27916, 9824, 40743, 46646, 22208, 8686, 570, 46910, 43975, 20505, 54995,
                    62582, 40612, 33701, 57534, 55433, 62541, 12934, 8739, 64149, 50022, 51099,
                    39107, 2284, 37440, 59496, 33249, 29462, 34175, 60149, 51048, 36879, 4143,
                    64985, 57465, 12795, 56375, 29852, 64430, 3275, 20816, 52160, 40419, 32113,
                    58362, 14641, 25474, 58062, 40486, 28834, 55183, 39739, 35676, 32314, 33724,
                    33530, 55409, 3729, 27313, 30844, 58965, 30651, 30557, 49562, 61790, 51971,
                    53075, 18848, 61268, 7542, 15113, 24112, 21723, 13772, 20243, 4569, 20823,
                    36625, 35475, 19230, 37363, 28686, 2685, 58715, 23573, 4379, 52513, 42092,
                    42737, 56501, 853, 39045, 31771, 11044, 52757, 17340, 27178, 39636, 46145,
                    62135, 31362, 3679, 15614, 36168, 5478, 30960, 23854, 29945, 51531, 23291,
                    53712, 61635, 7952, 58238, 18288, 64050, 51349, 18958, 42145, 49453, 63623,
                    48832, 61296, 3357, 64268, 42868, 40650, 21990, 43952, 19570, 50543, 13847,
                    20539, 47188, 34717, 29980, 47461, 47003, 41124, 6078, 25970, 27349, 6543,
                    1242, 16545, 37896, 14913, 25239, 49896, 12836, 23757, 45563, 17503, 63705,
                    31022, 40848, 61489, 34199, 49037, 64603, 18164, 49648, 14669, 26261, 63651,
                    13806, 6543, 49369, 1990, 32804, 36952, 8017, 3673, 15404, 17527, 24058, 29767,
                    24945, 22480, 54480, 50847, 49824, 36300, 1629, 40263, 5728, 39437, 16343,
                    47738, 9437, 11646, 16222, 29832, 2926, 18621, 24334, 49886, 34680, 20134,
                    6511, 17400, 19322, 33336, 21213, 49280, 47912, 3270, 47685, 38070, 19774,
                    42822, 51190, 11653, 63561, 56899, 25905, 22270, 36031, 49393, 12343, 28309,
                    45142, 26032, 28972, 60140, 10556, 45326, 43741, 34405, 17533, 36280, 14789,
                    8860, 19619, 7105, 33218, 38338, 38299, 18494, 18924, 27427, 15457, 41487,
                    48231, 36957, 21257, 49193, 50734, 17037, 51820, 55587, 26364, 15305, 60463,
                    26856, 51873, 59056, 21026, 1941, 15579, 50467, 39890, 30574, 24753, 15203,
                    29926, 62341, 62693, 55786, 23945, 60396, 12282, 2876, 19594, 21152, 677,
                    28727, 40089, 38799, 29101, 42002, 64728, 32028, 10599, 27222, 15320, 30833,
                    13633, 33762, 753, 7366, 14824, 12861, 44912,
                ]))
                .unwrap(),
                c: 232,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x31fc8b3bb311ac99f398eb8b474bd4ddc903588f3c654bba01758d752bcbacad");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_4() {
    let value = ComplexTestStruct {
        a: 53065,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            8619, 43550, 7933, 30929, 42442, 12522, 32152, 1808, 32026, 6854, 46390, 64625, 65295,
            24974, 392, 5097, 10832, 21580, 28317, 54625, 33045, 7570, 51587, 35117, 6706, 36998,
            17473, 25845, 40102, 39480, 6895, 40062, 53754, 31791, 17512, 3771, 57831, 20141,
            50377, 4105, 28365, 40565, 36790, 35235, 54671, 11304, 4706, 24477, 623, 41496, 14873,
            25180, 39637, 40670, 57858, 8089, 12045, 19685, 55605, 63304, 34318, 42948, 39725,
            63256, 25017, 31662, 24352, 32015, 16403, 27602, 40075, 26875, 33315, 59882, 39843,
            30776, 18409, 65154, 53083, 17587, 40949, 35932, 24652, 2312, 58614, 49357, 25769,
            56881, 31338, 23516, 64369, 18640, 33845, 55702, 63773, 8945, 6496, 54653, 63278,
            55679, 55481, 34966, 32485, 12119, 58751, 57949, 31274, 29953, 40435, 38813, 58830,
            6538, 18116, 19722, 46893, 44308, 63309, 42122, 51565, 38894, 29767, 18727, 7770,
            33510, 25813, 15550, 52045, 63799,
        ]))
        .unwrap(),
        c: 166,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            105, 122, 204, 172, 105, 9, 185, 131, 228, 248, 250, 111, 173, 40, 214, 227, 18, 217,
            52, 101, 174, 146, 72, 143, 99, 202, 124, 28, 84, 144, 166, 82, 80, 114, 133, 243, 118,
            237, 123, 71, 188, 145, 76, 73, 198, 61, 203, 122, 165, 26, 248, 5, 57, 204, 27, 110,
            128, 95, 225, 242, 76, 245, 163, 251, 243, 107, 17, 24, 95, 143, 228, 1, 0, 109, 128,
            44, 165, 41, 118, 169, 25, 114, 60, 169, 198, 114, 11, 21, 217, 154, 214, 241, 186,
            138, 15, 41, 125, 11, 202, 77, 42, 96, 217, 3, 241, 7, 22, 23, 107, 30, 244, 179, 72,
            99, 47, 193, 201, 154, 22, 138, 41, 212, 84, 3, 150, 219, 69, 50, 253, 35, 220, 79, 47,
            84, 178, 81, 199, 124, 40, 89, 178, 18, 137, 69, 33, 214, 153, 5, 91, 236, 226, 247,
            51, 161, 145, 49, 50, 244, 224, 7, 95, 219, 196, 174, 169, 191, 25, 24, 22, 40, 245,
            73, 10, 208, 153, 110, 217, 172, 43, 57, 49, 158, 149, 90, 213, 245, 29, 104, 14, 149,
            35, 167, 247, 249, 188, 53, 162, 231, 180, 211, 6, 211, 19, 129, 12, 77, 221, 146, 73,
            58, 244, 221, 124, 127, 54, 155, 138, 190, 101, 250, 6, 172, 88, 13, 213, 160, 154, 55,
            137, 100, 122, 43, 133, 204, 179, 160, 126, 98, 171, 33, 210, 149, 250, 228, 178, 101,
            255, 177, 123, 234, 241, 14, 27, 123, 123, 68,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 6731,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                48972, 10789, 16373, 46452, 33421, 11771, 39763, 29778, 42170, 59690, 27334, 6000,
                37823, 7527, 45992, 13311, 64105, 49606, 22242, 38935, 31269, 1612, 14745, 20443,
                7602, 17986, 28926, 31257, 25344, 26055, 38689, 32852, 35418, 22327, 28537, 35064,
                26792, 26967, 42514, 24071, 47277, 58181, 32002, 52850, 7450, 48461, 62125, 47359,
                42358, 25694, 18953, 33257, 31681, 9360, 5893, 43644, 60842, 29541, 47003, 27698,
                60344, 50749, 54211, 7877, 38394, 11179, 1718, 37997, 22789, 38403, 12439, 35681,
                55804, 52990, 11931, 21804, 63272, 65239, 19191, 42374, 27169, 11551, 63855, 2437,
                39840, 25661, 60064, 46931, 58770, 23436, 33824, 47905, 12707, 63305, 35122, 25912,
                54238, 9468, 29882, 22807, 18225, 38237, 3067, 49831, 13275, 33907, 49480, 52374,
                31415, 33589, 57290, 49642, 19555, 651, 32098, 59813, 1016, 57273, 56733, 26814,
                49842, 60648, 18334, 61580, 13176, 9583, 33826, 40733, 65228, 64921, 15288, 29666,
                60945, 7846, 22179, 7475, 57555, 48655, 44514, 1612, 9998, 16212, 24934, 60500,
                32410, 43403, 62273, 3972, 9012, 54522, 39898, 64855, 71, 37155, 24823, 53201,
                65292, 5047, 59899, 36792, 38685, 2073, 50842, 36738, 54331, 41398, 34576, 33023,
                53611, 60342, 61390, 48320, 19403, 30641, 18807, 39820, 17614, 11989, 34876, 685,
                19161, 56182, 45105, 7671, 10881, 56465, 2255, 43422, 32965, 21464, 34145, 61363,
                22421, 15179, 60496, 33886, 29708, 57430, 42014, 11184, 37284, 14980, 13412, 64625,
                34122, 7412, 40013, 53193, 7005, 6230, 20476, 35236, 20032, 60928, 63326, 63615,
                37855, 59120, 13108, 54475, 43552, 48189, 48214, 857, 39419, 17429, 19072, 15470,
                31173, 62300, 63152, 65399, 52371, 20086, 18706, 36064, 62688, 20498, 47322, 52218,
                57090, 22804, 53739, 63077, 20977, 10279, 29622, 25830, 54358, 42679, 18580, 48894,
                37445, 50026, 33299, 40455, 45000, 6284, 9302, 65448, 35829, 51125, 7701, 25229,
                60167, 30798, 38982, 6226, 32706, 53327, 61540, 55551, 4193, 13645, 40722, 6938,
                48943, 42507, 19427, 53948, 10311, 50366, 7541, 37422, 44680, 11644, 42567, 35629,
                41567, 39697, 22549, 61810, 10700, 42840, 14429, 27347, 31044, 12597, 34616, 4695,
                35350, 4847, 4726, 35549, 5575, 47557, 9878, 5004, 43980, 17989, 17290, 37285,
                14864, 20286, 56143, 54927, 63340, 19395, 35328, 34784, 56640, 22113, 47601, 28673,
                36412, 49893, 25346, 45377, 44068, 5194, 53900, 2713, 41074, 38259, 41885, 47065,
                29682, 10553, 54141, 41176, 47419, 55978, 42625, 38541, 48647, 20180, 2097, 35474,
                18846, 41431, 59712, 35175, 52433, 62461, 10098, 9434, 51604, 62520, 12648, 25717,
                47642, 35939, 50931, 40317, 36600, 48777, 23123, 58322, 9530, 62450, 56880, 18612,
                21102, 42471, 53693, 10472, 11907, 59484, 47498, 15721, 32305, 51882, 18364, 59485,
                13046, 24359, 3888, 41614, 4619, 54066, 53858, 52201, 40784, 36777, 54850, 28249,
                64787, 22990, 4955, 13829, 22501, 18409, 36315, 1386, 48736, 30602, 52732, 65501,
                15831, 40704, 47129, 5664, 28522, 13062, 26924, 62427, 39761, 54036, 61774, 10258,
                610, 45512, 24523, 25540, 20190, 14260, 1258, 34142, 55221, 55465, 56794, 41812,
                38389, 8090, 19517, 50505, 42574, 50293, 42620, 13033, 10592, 39595, 8885, 30793,
                44914, 6314, 63213, 13989, 63000, 5529, 10353, 59410, 52137, 53766, 47643, 44773,
                64070, 35260, 48524, 48988, 43493, 14831, 5629, 23648, 48551, 42240, 10597, 48480,
                15742, 62809, 6913, 60943, 13740, 39528, 58523, 19703, 1301, 19307, 9249, 22822,
                21509, 49084, 22477, 7169, 38815, 26097, 14004, 26042, 62016, 36828, 64101, 58582,
                63286, 4380, 59982, 17626, 25517, 49318, 32438, 47246, 19472, 11878, 59447, 53896,
                63199, 20925, 52155, 45539, 1203, 46122, 63745, 63813, 31234, 46782, 13139, 31778,
                49782, 13431, 56558, 2826, 583, 29722, 51241, 54940, 49326, 39962, 42801, 39754,
                36803, 6157, 63613, 56482, 60435, 3686, 40311, 31450, 16824, 18051, 10359, 45613,
                35947, 65047, 43007, 21707, 7560, 19477, 7957, 9228, 28143, 40336, 62204, 38210,
                11845, 49061, 28136, 32508, 48089, 31144, 33258, 1204, 34276, 18560, 18371, 34793,
                53706, 63632, 27876, 13387, 17562, 19749, 41584, 13931, 5676, 14680, 7093, 33888,
                60643, 35995, 48861, 23221, 60854, 9579, 2500, 6635, 8208, 16828, 8558, 59183,
                33388, 16115, 32424, 2353, 60532, 22817, 46211, 46861, 16825, 16480, 9221, 58505,
                44442, 26549, 31024, 12298, 57626, 33092, 25963, 58045, 63340, 22945, 47040, 61652,
                8509, 41531, 57748, 52673, 4116, 16548, 3747, 37472, 48883, 26299, 19400, 54572,
                24231, 23694, 21981, 37801, 9310, 63451, 24886, 57152, 55237, 30216, 59592, 18653,
                55453, 39815, 50448, 22972, 3477, 10588, 7617, 34402, 37231, 9842, 14515, 22274,
                51794, 52611, 26001, 11600, 28684, 11403, 61345, 38379, 58913, 29535, 21107, 3718,
                32192, 57804, 49696, 17557, 1673, 19742, 42431, 22997, 7361, 16470, 18895, 35713,
                50464, 41572, 39093, 14702, 36576, 44896, 34906, 8956, 61153, 24825, 43617, 5715,
                9796, 59554, 11291, 12529, 30537, 21164, 53749, 27599, 45601, 63821, 41751, 51346,
                51922, 19686, 43521, 48396, 36778, 29601, 1063, 63356, 7906, 56356, 3325, 27115,
                23601, 51688, 12551, 26771, 54153, 64931, 31277, 19337, 62080, 32969, 4079, 28030,
                18383, 56022, 50504, 60313, 11981, 7256, 10064, 52554, 28105, 61943, 11230, 23918,
                47754, 17616, 7084, 10172, 58008, 42682, 7916, 24538, 14290, 21397, 41356, 25213,
                1414, 2753, 60217, 16222, 18557, 40736, 27525, 14230, 23078, 11646, 31466, 63516,
                11415, 17637, 28751, 21478, 43069, 61398, 27348, 13424, 28438, 45446, 15778, 60158,
                30743, 10025, 36677, 19796, 11142, 59718, 243, 13440, 39668, 19743, 19850, 37303,
                13461, 23875, 42999, 10719, 48394, 62986, 33097, 62434, 63908, 23461, 54794, 33058,
                27709, 47690, 23041, 1150, 49862, 7525, 46526, 12521, 7948, 57311, 8800, 59498,
                10329, 40377, 18602, 6707, 24639, 30555, 3531, 24761, 31145, 26328, 21285, 43472,
                3961, 45555, 53042, 46802, 60941, 13886, 43366, 62233, 63395, 27412, 19597, 62593,
                511, 51106, 51362, 26990, 16245, 49985, 18251, 56116, 15382, 57892, 55469, 22843,
                35375, 15841, 56851, 7814, 40392, 33649, 16797, 44614, 23453, 18476, 32767, 35552,
                18791, 41643, 62701, 47860, 17724, 34517, 23660, 41620, 59188, 25040, 8956, 29127,
                60426, 14057, 28784, 29429, 1313, 3175, 5283, 18952, 51850, 15596, 1188, 38659,
                19325, 49672, 19151, 44266, 47217, 721, 18609, 22377, 55057, 45416, 61063, 39469,
                26091, 50745, 35732, 18595, 27982, 27709, 38543, 14233, 26776, 23144, 63842, 55199,
                9109, 17536, 7636, 10611, 13170, 52163, 45400, 49757, 35982, 40181, 48103, 61004,
                17764, 34118, 5396, 62894, 31822, 11733, 27885, 5595, 38563, 49941, 14173, 122,
                56102, 65282, 39087, 7391, 23496, 59048, 23818, 26475, 4056, 3501, 5212, 23519,
                63997, 18981, 28859, 41329, 29493, 2739, 33125, 35450, 61336, 53487, 13574, 33362,
                8269, 20445, 38383, 27825, 51990, 50743, 53840, 59433, 2587, 50656, 62799, 13277,
                2318, 5306, 53799, 15918, 49498, 27142, 64938, 25061, 59174, 9006, 28150, 49533,
                12828, 36024, 5451, 5352, 55599, 16735, 45198, 51332, 8907, 7866, 38012, 62227,
                63483, 7840, 45143, 60935, 32131, 10653, 15131, 21431, 38191, 3092, 65175, 10563,
                32625, 64311, 58829, 8087, 6348, 4011, 41212, 5412, 16708, 12277, 54353, 22793,
                26794, 54894, 61198, 53448, 44459, 23533, 22360, 56636, 29985, 5761, 63426, 39448,
                2192, 47023, 60654, 46947,
            ]))
            .unwrap(),
            c: 78,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 6, b: 14143900532736804980, c: 1927611375 },
            FixedTestStruct { a: 44, b: 5111275098625849694, c: 2504821262 },
            FixedTestStruct { a: 172, b: 5059850372689948846, c: 2739727812 },
            FixedTestStruct { a: 44, b: 4575782519425625901, c: 3750767581 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 30584,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    23998, 9724, 59774, 18616, 37862, 12853, 38676, 34981, 4278, 34169, 18498,
                    44702, 54276, 39332, 17668, 65159, 29621, 46436, 8711, 51483, 45835, 58909,
                    60726, 37658, 57623, 40995, 23024, 22278, 11371, 42214, 6495, 48759, 49842,
                    61323, 19291, 44168, 1273, 54973, 3338, 32217, 17724, 47605, 45456, 9949,
                    17287, 1512, 18057, 40684, 47422, 14556, 5346, 43987, 4926, 21339, 24031, 3936,
                    34886, 41070, 64693, 30592, 7430, 32703, 33290, 33494, 37677, 5316, 4579,
                    60986, 8917, 55501, 2013, 19921, 65443, 12884, 33745, 16115, 38121, 56234,
                    30100, 33584, 3627, 45670, 23279, 48942, 31015, 62957, 22317, 44013, 36193,
                    7203, 39718, 38454, 27969, 65283, 57161, 29822, 48131, 6208, 32908, 55798,
                    15576, 26001, 6772, 37460, 20121, 15107, 53944, 14878, 17304, 43017, 61683,
                    13826, 50447, 63913, 32960, 54644, 63112, 30335, 41104, 17092, 52967, 27522,
                    41817, 30044, 19599, 11663, 53174, 15938, 59870, 4695, 35626, 2162, 23501,
                    46710, 65261, 4470, 37645, 53490, 53896, 30032, 21842, 55632, 15062, 4832,
                    29859, 44770, 58071, 1445, 48645, 48004, 23879, 12847, 56140, 48121, 48301,
                    39177, 19172, 57604, 57399, 58902, 31140, 51168, 37890, 29145, 3645, 64240,
                    3514, 60750, 9376, 37001, 43592, 15388, 26904, 61953, 17896, 50472, 63539,
                    28198, 38928, 23721, 28198, 5711, 23894, 21611, 5382, 3468, 22757, 27876,
                    34040, 43132, 63509, 35865, 803, 38602, 8037, 29223, 52835, 10502, 28270, 6098,
                    41552, 41277, 28292, 51783, 24017, 30369, 55134, 45271, 33857, 17358, 37676,
                    10370, 1379, 41431, 51747, 1769, 1259, 34250, 64543, 11642, 25646, 40163,
                    53899, 23514, 17960, 27472, 29855, 3716, 25190, 12060, 19549, 27459, 441, 8564,
                    2048, 55960, 36211, 57129, 59655, 14418, 21092, 17979, 24348, 62105, 52616,
                    9452, 3145, 56710, 62858, 45733, 17423, 43403, 37575, 44868, 6505, 35279, 9688,
                    5509, 4176, 9307, 41110, 56271, 1756, 53401, 32483, 26306, 22553, 43054, 52641,
                    8491, 14411, 56549, 23186, 32850, 35544, 14697, 8283, 47402, 2331, 21733,
                    34862, 17440, 58018, 44651, 11501, 34857, 35535, 55461, 42080, 47463, 59375,
                    37107, 14240, 29084, 55105, 62644, 43895, 20078, 7244, 31466, 30846, 47052,
                    52514, 45389, 49516, 18924, 20551, 60694, 38454, 12478, 26383, 38498, 6384,
                    65026, 58285, 59040, 26951, 60218, 50641, 64328, 55257, 62486, 54166, 2066,
                    7825, 43797, 1549, 23657, 62508, 42862, 12467, 64442, 7848, 39097, 30356,
                    38438, 7858, 60339, 6406, 36354, 17742, 19732, 48898, 45536, 52065, 39373,
                    21041, 33021, 22842, 14584, 63564, 1973, 2462, 45635, 20450, 16057, 42199,
                    24138, 6163, 20486, 24172, 6802, 21448, 24666, 150, 2629, 40125, 39877, 21683,
                    23571, 362, 28923, 11350, 23503, 31191, 54591, 60228, 15263, 22572, 60524,
                    56156, 5171, 56382, 27373, 60475, 3088, 38875, 59075, 63162, 15064, 21273,
                    38645, 31446, 19058, 59256, 1296, 3428, 32918, 34798, 17380, 54988, 45982,
                    12993, 43638, 41134, 26611, 16646, 55387, 9438, 21457, 25651, 56387, 2078,
                    37231, 40355, 6521, 63110, 41998, 65434, 16897, 36715, 11668, 11212, 43462,
                    16582, 64722, 22990, 54842, 27052, 31526, 52864, 24320, 14580, 6913, 54984,
                    47686, 27403, 2030, 30201, 38331, 32800, 44546, 63687, 26186, 61956, 16088,
                    54840, 41618, 44117, 58528, 39886, 25669, 45820, 51203, 44481, 9367, 40373,
                    11289, 3617, 48807, 34249, 64261, 9848, 25009, 28731, 55, 61900, 5009, 33196,
                    45275, 38155, 29019, 5376, 1136, 59816, 961, 49369, 54235, 50677, 9441, 30103,
                    44878, 9687, 30342, 55053, 30275, 30329, 25076, 23863, 17498, 10772, 56519,
                    35430, 19160, 12721, 33824, 23140, 50522, 40308, 27206, 19511, 28567, 36807,
                    20052, 13192, 60197, 29714, 31366, 2672, 53764, 23271, 21167, 16840, 4834,
                    21800, 49280, 17002, 9106, 4879, 19900, 20211, 44052, 64310, 16498, 39902,
                    24501, 31855, 24682, 35374, 19153, 5190, 40889, 65395, 13677, 43137, 9869,
                    43664, 61771, 53236, 58092, 40517, 35097, 54310, 22378, 20488, 37299, 61832,
                    58314, 47292, 34519, 11410, 6532, 12684, 27075, 48248, 21524, 9827, 22010,
                    14727, 10621, 61434, 25408, 52849, 49519, 30008, 32393, 50675, 9454, 43281,
                    43135, 4321, 44563, 11286, 27495, 43181, 63456, 50303, 18080, 7269, 53066,
                    40412, 34524, 49056, 21224, 64059, 14857, 21243, 54717, 61572, 41970, 28217,
                    8474, 24436, 55536, 57505, 64031, 8208, 12369, 33886, 38153, 20668, 7304,
                    52949, 50010, 65456, 24071, 20863, 56449, 47910, 25968, 10672, 2227, 38703,
                    20606, 26791, 54012, 43891, 15888, 47858, 50107, 6117, 17395, 58364, 54533,
                    44577, 59335, 27963, 36901, 42604, 29900, 36588, 42089, 11986, 22174, 22717,
                    10904, 3173, 9058, 22556, 5109, 37417, 11781, 16583, 50738, 33118, 50467,
                    37442, 64483, 31186, 50629, 38847, 40381, 166, 55809, 14147, 58270, 62834,
                    21484, 32522, 15708, 28314, 14870, 2656, 18648, 65248, 42437, 25092, 56588,
                    33844, 16610, 13314, 62074, 12037, 46509, 26428, 3891, 41881, 25278, 60144,
                    13571, 53275, 47999, 41732, 14262, 42041, 44805, 44892, 36566, 15751, 56337,
                    17106, 63473, 8922, 20167, 22725, 21651, 61685, 34008, 43301, 4652, 10473, 707,
                    44592, 38226, 34500, 36458, 32146, 58639, 10351, 59383, 52894, 57430, 39181,
                    13570, 52032, 59717, 55644, 32147, 52501, 46194, 29938, 8232, 57736, 35636,
                    42997, 39908, 24009, 7161, 5284, 19008, 51090, 55755, 8551, 20489, 8941, 20115,
                    21144, 96, 58945, 52110, 12339, 20281, 9856, 54491, 44283, 53761, 45405, 13519,
                    20146, 57177, 3617, 11771, 42258, 16013, 62306, 27446, 17732, 28227, 695,
                    24637, 32209, 1759, 58725, 51872, 16031, 3452, 47715, 49083, 39106, 36015,
                    12466, 4856, 43765, 37679, 65155, 60126, 57184, 3316, 29323, 28797, 20882,
                    56130, 38111, 43141, 8363, 19888, 25110, 4627, 63572, 12303, 47810, 6275,
                    16212, 15077, 17629, 31195, 45466, 62696, 7656, 28264, 14910, 32791, 27321,
                    32422, 63697, 30760, 43361, 55980, 19324, 31769, 59335, 50565, 3882, 57329,
                    52795, 14688, 32829, 12557, 18887, 58660, 25151, 6992, 25182, 46803, 27203,
                    13358, 25742, 35185, 35308, 24815, 49976, 27852, 33543, 47526, 43312, 49298,
                    49135, 9429, 61774, 537, 41285, 63400, 23961, 18962, 64649, 27719, 65123,
                    19723, 37021, 19298, 36400, 39439, 18386, 1484, 2772, 8561, 64529, 62892,
                    47952, 20043, 54599, 2237, 23566, 17715, 29238, 32158, 26274, 53839, 46682,
                    46892, 59413, 65133, 36574, 15446, 23519, 10413, 9884, 42102, 50196, 25360,
                    24680, 17296, 49717, 9049, 17335, 36505, 11110, 26059, 3807, 62058, 31345, 857,
                    3633, 12308, 32833, 22688, 46186, 55784, 61722, 51213, 6335, 34559, 60272,
                    29966, 21520, 7893, 11586, 19431, 49208, 62197, 2878, 8110, 40740, 28575, 2905,
                    9064, 15392, 13148, 159, 9697, 15943, 27971, 9071, 955, 3077, 3565, 34218,
                    17317, 49529, 47005, 17686, 49104, 1279, 34499, 2537, 47352, 34637, 1185,
                    32277, 9802, 33622, 7753, 12235, 30475, 16000, 6238, 26829, 1860, 43216, 18257,
                    29018, 64234, 28699, 21267, 32890, 63056, 27853, 64204, 4941, 25964, 6574,
                    58923, 48627, 48585, 5072, 53122, 42474, 1676, 42985, 51392, 39186, 2833,
                    30492, 23031, 435, 37259, 42352, 58703, 7185, 1416, 38636, 18126, 1193, 49836,
                    23744, 3104, 1970, 48447, 551, 43916, 8877, 43268, 33230, 35705, 63816, 23356,
                    20331, 13286, 1902, 51240, 57853, 42722, 57225, 27785, 5417, 46528, 43655,
                    44525, 35160, 14022, 28457, 64557, 18619, 39545, 58203, 40563, 48119, 7105,
                    15335, 25798, 40478, 59567, 46334, 25417,
                ]))
                .unwrap(),
                c: 64,
            },
            VarTestStruct {
                a: 53350,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    27705, 6863, 4807, 60729, 13577, 10600, 4689, 47781, 33317, 51810, 21669,
                    57675, 53455, 45169, 37315, 18440, 50413, 17138, 37039, 54171, 6623, 15441,
                    44468, 31926, 19062, 33385, 59874, 39049, 55073, 39078, 28873, 12721, 46417,
                    54893, 34827, 22251, 23940, 48598, 30033, 19736, 19373, 60549, 20354, 56886,
                    32359, 48723, 33004, 40772, 42042, 6852, 14497, 24725, 60950, 7857, 35606,
                    58579, 33042, 25988, 37316, 57155, 44401, 13717, 46843, 36364, 25015, 52372,
                    20615, 16548, 5043, 19491, 45601, 8340, 53856, 44712, 6152, 6229, 60439, 60798,
                    3354, 62529, 6955, 64796, 7695, 19987, 22345, 64095, 63384, 54196, 26208, 6137,
                    65326, 59246, 21131, 55157, 46371, 16669, 13101, 34028, 52184, 16112, 23525,
                    24853, 14334, 34497, 64684, 8536, 5604, 63280, 29662, 41577, 51069, 29173,
                    17735, 24754, 60368, 21622, 60442, 5685, 49058, 34218, 22836, 56402, 35128,
                    36817, 53091, 40829, 38535, 38291, 3770, 13868, 56834, 15294, 48282, 58423,
                    19692, 5862, 55391, 18454, 6428, 14573, 33973, 42493, 32091, 63513, 20128,
                    8246, 46683, 30333, 12168, 28734, 3021, 62191, 61077, 63112, 14243, 36828,
                    54258, 14313, 21352, 42473, 44318, 41437, 34752, 22987, 51854, 20554, 31913,
                    47069, 61622, 48543, 56782, 53543, 37377, 7917, 63812, 5524, 45351, 40680,
                    22939, 62571, 43780, 58783, 55429, 7712, 31611, 11175, 59804, 29267, 41238,
                    2691, 35723, 36387, 11594, 61620, 39809, 453, 51063, 24670, 24197, 28768,
                    23359, 28403, 21328, 5625, 39974, 33769, 11321, 525, 64101, 64013, 20260,
                    15819, 322, 45293, 14749, 20120, 27148, 16118, 12848, 41405, 13584, 19972,
                    55266, 36702, 49229, 35552, 41483, 61805, 24747, 21855, 25383, 3672, 29687,
                    13990, 10602, 60196, 6850, 43872, 61341, 1148, 35898, 42630, 13988, 43203,
                    28150, 32844, 29699, 65501, 49853, 19822, 24650, 10682, 20701, 6455, 46086,
                    45543, 55943, 20170, 24858, 12485, 8995, 36628, 47066, 33006, 32153, 11538,
                    39284, 65181, 51115, 52751, 47942, 17625, 19622, 55617, 878, 5001, 21495,
                    33837, 53290, 12188, 39265, 20341, 14620, 15292, 49209, 53915, 37849, 30398,
                    56207, 23106, 45705, 17714, 21356, 20049, 8516, 31722, 34272, 35684, 53665,
                    19185, 39321, 946, 34751, 11313, 37554, 16972, 54251, 59910, 25518, 38857,
                    20496, 31477, 30834, 11524, 40520, 63826, 20374, 63173, 14259, 34110, 26521,
                    34936, 32931, 27448, 12539, 31731, 1077, 47534, 15299, 55560, 27508, 57531,
                    29236, 45123, 31508, 29876, 16548, 6278, 4105, 3682, 58393, 8296, 8265, 45543,
                    4558, 159, 61296, 29143, 4330, 20897, 45696, 487, 23073, 4477, 1533, 38543,
                    16676, 58297, 23885, 53251, 45027, 2620, 63854, 58636, 38461, 16391, 2703,
                    29997, 8961, 65447, 21363, 38140, 37283, 2115, 43761, 8687, 4630, 62407, 62816,
                    40504, 34660, 46719, 192, 40015, 35160, 58738, 30925, 49031, 49784, 38136,
                    39923, 5005, 38606, 11484, 50056, 32218, 13742, 31905, 55744, 34088, 2621,
                    5852, 49615, 36832, 24610, 23627, 14821, 64701, 5763, 36134, 45228, 40558,
                    49442, 43823, 10355, 27827, 46564, 20486, 37298, 62432, 50382, 17783, 36233,
                    27707, 33301, 8727, 35193, 62399, 4964, 36036, 16804, 24104, 41645, 53799,
                    65060, 65408, 55448, 50174, 25225, 38881, 63264, 27354, 41837, 44078, 63761,
                    3640, 13267, 29415, 39630, 21874, 1692, 24247, 28399, 1402, 15249, 16987,
                    18510, 20463, 5699, 28409, 361, 24583, 28544, 27884, 57419, 59986, 40924,
                    52750, 58983, 37422, 10766, 17466, 27232, 39427, 25788, 64838, 18071, 47371,
                    65412, 29239, 43452, 58837, 5502, 22462, 59292, 49658, 51774, 18582, 46759,
                    54928, 5557, 24270, 32170, 34471, 3457, 35502, 43255, 31919, 44280, 25712,
                    5566, 3038, 10914, 15114, 36103, 44360, 39480, 61870, 11935, 50208, 33819,
                    30527, 1149, 53510, 6973, 15285, 55553, 21455, 19343, 60240, 13347, 17137,
                    27889, 1756, 65519, 7963, 18123, 25812, 33391, 49955, 53531, 8186, 60806,
                    58617, 1357, 55054, 55517, 13068, 52711, 28069, 16763, 2594, 28219, 29299,
                    6303, 33116, 60040, 12229, 13530, 28881, 18813, 61132, 31787, 5553, 2339, 4294,
                    26395, 64382, 21861, 23430, 17985, 19770, 37594, 10326, 53463, 34109, 769,
                    50000, 23385, 2018, 16556, 56813, 5406, 39695, 39326, 27129, 15145, 36012,
                    35885, 25042, 42566, 56764, 33605, 7141, 65496, 37298, 48691, 36699, 51671,
                    32207, 48246, 16416, 60685, 50845, 60122, 2525, 36437, 8134, 61022, 16430,
                    57848, 40165, 51260, 43578, 16757, 39265, 9994, 29315, 56996, 37673, 37198,
                    53633, 10541, 50294, 60119, 31511, 62947, 37935, 17980, 3317, 9460, 42271,
                    55170, 43814, 13150, 53674, 32624, 62119, 56153, 9387, 54737, 22375, 36117,
                    20830, 31405, 19627, 1746, 31202, 35586, 2691, 52979, 19699, 38702, 22935,
                    32444, 10327, 42752, 42099, 42934, 38276, 53741, 16465, 62514, 48930, 64522,
                    23521, 46310, 29381, 50158, 62720, 22794, 39969, 23798, 41035, 18406, 13036,
                    61225, 33412, 64385, 53964, 18372, 14200, 60370, 13237, 21665, 17441, 20399,
                    13986, 11766, 53871, 16214, 34456, 12448, 39492, 52630, 62937, 29640, 23740,
                    6564, 52741, 57343, 40147, 5175, 36618, 17947, 63905, 38405, 46669, 38032,
                    30363, 33764, 39555, 6433, 58921, 34169, 49394, 626, 27850, 624, 36687, 4882,
                    20710, 34637, 8865, 53626, 12786, 32999, 64398, 34016, 45446, 3759, 61539,
                    4426, 61108, 40812, 47123, 58864, 54878, 56601, 4618, 34306, 19075, 14519,
                    46817, 23129, 31410, 46288, 42911, 6519, 9033, 49020, 47231, 12317, 58329,
                    23439, 52587, 60970, 53341, 42558, 15315, 1819, 50054, 24525, 42787, 29658,
                    11128, 3052, 61665, 17001, 43007, 17330, 64538, 24948, 33451, 31174, 41407,
                    55839, 57655, 58807, 8303, 11264, 59056, 33471, 47488, 6877, 43058, 60673,
                    14159, 38931, 38666, 36410, 53034, 49928, 52787, 12503, 48536, 5895, 55432,
                    4480, 42357, 45502, 35134, 37520, 19559, 59133, 1023, 55241, 44724, 26824,
                    3385, 30900, 18842, 17578, 52511, 38653, 6906, 63976, 14209, 53834, 32370,
                    17716, 13374, 21095, 49994, 54675, 35870, 42539, 54384, 12138, 53021, 46602, 1,
                    5133, 50403, 412, 12154, 17541, 38607, 341, 33913, 28398, 32186, 10000, 48729,
                    50986, 14824, 33354, 5512, 13704, 17464, 14168, 49688, 19036, 39784, 10984,
                    3390, 17755, 45136, 10565, 7036, 29831, 3803, 45891, 23142, 34018, 27199,
                    29205, 39783, 17480, 37397, 58204, 29437, 36829, 65298, 35092, 31723, 50398,
                    25135, 52662, 39463, 56711, 35973, 3023, 11468, 50633, 50127, 12563, 48429,
                    10344, 19542, 12905, 24735, 44694, 22610, 27151, 26892, 649, 11073, 42242,
                    32799, 3151, 11247, 1350, 38240, 42810, 9997, 26390, 19005, 16239, 61613, 8311,
                    57052, 31803, 62682, 22934, 47437, 15946, 4528, 43942, 48112, 57600, 5295,
                    60127, 58509, 40988, 60621, 28946, 30502, 18518, 30979, 28644, 19407, 26695,
                    64959, 54444, 50180, 18151, 46954, 61334, 20975, 26503, 15480, 38723, 7547,
                    3740, 14934, 60475, 58524, 5550, 45485, 11687, 37699, 58226, 59526, 18637,
                    44219, 61344, 7957, 40789, 39752, 59866, 61104, 2863, 16485, 44283, 46956,
                    16303, 8444, 16062, 62172, 59008, 58733, 64430, 9034, 54842, 63916, 13483,
                    27230, 15673, 61058, 42998, 26989, 59683, 33701, 31745, 48425, 59152, 17575,
                    28594, 21589, 52698, 36153, 7662, 35181, 35193, 58578, 5820, 42514, 55993,
                    42655, 62551, 4400, 51247, 45219, 50509, 7442, 60260, 33192, 13301, 24429,
                    24433, 2516, 30913, 43443, 36748, 2321, 38565, 11564, 6723, 6346, 21438, 59831,
                    60343, 50328, 34800, 37905, 16405, 58939, 12502, 29516, 63606, 49664, 57368,
                    27349,
                ]))
                .unwrap(),
                c: 183,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3ad83cce6644031d6c4b7a69eea5a1cd13e8912a746e706a02ef08843dc043ee");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_5() {
    let value = ComplexTestStruct {
        a: 18122,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            20954, 38379, 3749, 18564, 6778, 35025, 27343, 44320, 35889, 56845, 60482, 53328,
            13613, 22024, 35294, 53676, 17314, 49387, 36986, 14621, 56955, 48966, 19587, 53438,
            47259, 47759, 14965, 26456, 61884, 42965, 22920, 44171, 21648, 55205, 54184, 2459,
            33505, 39496, 44476, 56356, 22553, 15658, 28347, 12372, 62593, 46755, 18275, 27713,
            63530, 47368, 10546, 49287, 4595, 37330, 9757, 28522, 23401, 9962, 56283, 61819, 51218,
            35033, 31972, 23477, 36304, 31688, 7005, 9047, 61536, 9881, 7809, 4882, 35193, 12615,
            63228, 58086, 30354, 34407, 24027, 51499, 3520, 54486, 14357, 1881, 61909, 48588,
            12868, 52957, 15032, 31568, 65091, 49901, 45070, 25047, 7701, 5088, 43416, 41928,
            26450, 54347, 13134, 48258, 20517, 64257, 21750, 17545, 25598, 22326, 8447, 19233,
            64354, 58062, 50970, 43709, 15839, 14933, 29205, 19312, 49660, 52321, 1372, 65086,
            50745, 23459, 37318, 49503, 55513, 52953,
        ]))
        .unwrap(),
        c: 153,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            215, 251, 210, 169, 243, 6, 122, 10, 251, 24, 81, 218, 143, 138, 158, 196, 171, 73, 69,
            213, 52, 1, 182, 164, 5, 26, 169, 151, 201, 11, 93, 244, 89, 34, 229, 35, 90, 154, 107,
            152, 203, 242, 46, 206, 6, 179, 50, 213, 146, 128, 240, 33, 164, 17, 88, 200, 190, 43,
            72, 177, 226, 107, 60, 28, 143, 0, 56, 250, 177, 85, 181, 199, 118, 8, 148, 108, 124,
            11, 251, 212, 19, 57, 210, 14, 129, 206, 30, 39, 185, 181, 177, 85, 140, 26, 166, 11,
            134, 243, 54, 93, 133, 58, 90, 47, 115, 228, 115, 79, 23, 232, 66, 112, 8, 195, 7, 187,
            214, 150, 77, 102, 138, 20, 72, 224, 211, 16, 86, 207, 215, 224, 204, 129, 84, 78, 80,
            3, 148, 208, 103, 76, 122, 117, 199, 111, 206, 70, 112, 3, 230, 165, 156, 203, 29, 230,
            170, 138, 200, 60, 244, 229, 165, 104, 183, 242, 247, 69, 36, 72, 112, 120, 158, 202,
            47, 170, 60, 51, 83, 91, 135, 225, 220, 170, 238, 107, 241, 31, 56, 49, 112, 148, 136,
            3, 141, 202, 173, 56, 9, 34, 131, 73, 125, 169, 61, 225, 226, 197, 253, 197, 200, 217,
            50, 1, 138, 6, 26, 11, 74, 144, 170, 142, 1, 166, 234, 116, 55, 32, 211, 249, 218, 96,
            238, 140, 236, 73, 203, 37, 193, 174, 107, 107, 123, 57, 104, 129, 224, 204, 210, 63,
            211, 179, 165, 47, 5, 45, 186, 44,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 50360,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                52576, 7793, 62522, 51398, 23350, 5449, 48736, 4304, 25395, 18259, 46847, 7118,
                15281, 20000, 64016, 55742, 55074, 51517, 13134, 25324, 38853, 23542, 27350, 44251,
                9890, 56810, 35749, 64005, 40399, 40286, 29961, 12474, 16053, 18668, 1258, 30064,
                47178, 18551, 46829, 15305, 12577, 20715, 55254, 8916, 4399, 16033, 25028, 48998,
                55054, 5674, 55891, 55390, 46309, 23495, 8052, 23874, 6781, 13614, 63727, 40787,
                21847, 45782, 7617, 21877, 41743, 36198, 27796, 38605, 224, 43474, 41620, 45361,
                37489, 3532, 51773, 2218, 50996, 545, 15156, 41290, 35920, 27136, 21524, 13670,
                7577, 5577, 64428, 32541, 33345, 11355, 30999, 55854, 53059, 1112, 6316, 5643,
                18682, 52807, 7631, 17961, 46859, 62269, 18424, 2025, 30140, 59273, 50931, 49840,
                36994, 7604, 3471, 505, 579, 1489, 26727, 35443, 19732, 57182, 23441, 4952, 30513,
                53821, 55294, 40382, 49774, 51549, 48784, 25061, 35464, 10659, 3844, 53572, 56192,
                23262, 64149, 55179, 21504, 42524, 25611, 17474, 22278, 32029, 8166, 11902, 43996,
                8414, 22504, 49361, 488, 20114, 10156, 24421, 2460, 61634, 64833, 23978, 29865,
                34215, 23173, 36662, 36975, 14860, 19217, 11587, 53249, 25455, 65349, 17177, 41747,
                7346, 45447, 10284, 53409, 48275, 64384, 44517, 18658, 45821, 63023, 6293, 60266,
                22906, 43466, 23939, 62464, 34941, 35080, 34995, 52342, 23471, 21285, 37026, 55097,
                33244, 49665, 43707, 18119, 20545, 51009, 53484, 64286, 27703, 54041, 54332, 11327,
                20075, 17480, 46241, 22095, 38116, 53087, 7284, 54053, 56970, 56896, 29327, 32850,
                41641, 53445, 13474, 37272, 52574, 1106, 33472, 35564, 9298, 54073, 44964, 18809,
                39606, 43917, 46210, 51123, 17391, 45386, 62766, 49955, 13969, 52371, 57023, 56363,
                37364, 12819, 12539, 65242, 38770, 30307, 13600, 12517, 9177, 38863, 3181, 62918,
                42226, 39747, 2447, 23622, 65273, 10932, 7596, 49634, 57372, 64731, 42866, 45502,
                28520, 51933, 60844, 10228, 2146, 32564, 46206, 3023, 20742, 29300, 36302, 28005,
                52449, 53119, 17958, 50949, 1955, 40790, 31607, 27347, 53118, 36877, 32273, 26889,
                7916, 50628, 33321, 21497, 55995, 22509, 38415, 928, 42604, 61659, 59449, 34652,
                7367, 41335, 43213, 58395, 31950, 12409, 58897, 47534, 59913, 20128, 3561, 53774,
                59592, 34227, 36621, 2876, 17784, 54419, 5011, 49889, 4096, 50257, 62897, 22761,
                28587, 62898, 44876, 39585, 25235, 11499, 54517, 39323, 65105, 61190, 21234, 61597,
                19100, 17896, 64079, 24049, 30480, 23692, 3221, 8244, 25672, 61841, 52216, 14459,
                48667, 43433, 52826, 12408, 8828, 21758, 54517, 24496, 38413, 36798, 42430, 46004,
                27819, 35648, 39885, 28773, 14372, 29730, 27356, 65166, 56297, 19005, 3578, 995,
                6527, 25006, 63996, 51576, 26657, 28757, 29147, 32667, 35904, 58185, 32990, 10904,
                9084, 43170, 32723, 49751, 4102, 45776, 54450, 18453, 45112, 12251, 20678, 15896,
                44058, 38753, 20076, 8698, 1041, 8433, 40353, 60787, 10860, 38459, 61864, 65110,
                14033, 32588, 39948, 51366, 2564, 28228, 54692, 1938, 11012, 22022, 59584, 9580,
                22791, 13352, 54635, 11354, 1386, 8747, 32305, 30653, 55350, 36395, 33973, 33843,
                55327, 64151, 32081, 47138, 62380, 3008, 14504, 50353, 39347, 21645, 29043, 4908,
                62710, 29377, 54403, 11487, 38390, 44674, 32416, 4224, 28858, 12133, 8412, 9242,
                28572, 47927, 25859, 3836, 37349, 23010, 43383, 29576, 13860, 36619, 53678, 35293,
                32656, 8290, 64493, 49120, 61953, 43044, 51458, 43631, 62381, 9473, 1640, 29484,
                47055, 13679, 26438, 25161, 8427, 52498, 48642, 61899, 24690, 65433, 62689, 32548,
                9926, 46387, 57541, 57037, 48244, 8692, 4083, 63932, 12179, 18757, 65392, 45794,
                55409, 33757, 21564, 58130, 63328, 748, 17335, 48348, 21900, 15396, 8393, 19452,
                43935, 57570, 2605, 45858, 22007, 349, 49932, 35691, 65155, 48598, 25503, 35623,
                56580, 64912, 49438, 62377, 23249, 37908, 30287, 15252, 34319, 62035, 23272, 14634,
                45727, 49355, 14538, 59584, 49774, 35029, 22223, 37798, 44698, 30818, 34131, 44710,
                52556, 9650, 40239, 10745, 41323, 15795, 17651, 13082, 49777, 26240, 15650, 22708,
                49437, 26862, 26565, 60931, 45494, 42391, 37336, 2709, 7040, 62838, 61765, 8486,
                12967, 50311, 15779, 36830, 44476, 55015, 35096, 15791, 53608, 37360, 64820, 871,
                57959, 41181, 49988, 34248, 29775, 52804, 38220, 24445, 50753, 8964, 42752, 36982,
                28157, 19002, 390, 22533, 7067, 49851, 46494, 20147, 46164, 20620, 28973, 34197,
                47752, 23729, 65233, 5666, 24781, 58603, 22661, 34219, 56273, 12999, 39151, 60561,
                49040, 42641, 53095, 24235, 438, 59936, 34725, 28058, 44561, 59446, 22165, 46676,
                45141, 61966, 42509, 20163, 51815, 16735, 18920, 34668, 39016, 55041, 53452, 17892,
                34972, 14752, 21136, 14616, 26009, 25626, 40967, 64785, 2561, 52519, 2702, 36184,
                63040, 3400, 24182, 29297, 19187, 7897, 31881, 9640, 38744, 33304, 223, 57599,
                37242, 57930, 25424, 20622, 39901, 11662, 28236, 33278, 52530, 3435, 6731, 40374,
                350, 23247, 29539, 14090, 51737, 917, 40081, 25898, 31791, 29929, 3805, 46866,
                47561, 24695, 15893, 36540, 32547, 61835, 4263, 50084, 22797, 11772, 8458, 53834,
                61070, 23388, 58145, 50376, 27767, 29302, 37511, 9880, 54096, 36276, 40337, 6354,
                31289, 42475, 30817, 12100, 3084, 14379, 45857, 10927, 8501, 37877, 54586, 38188,
                35042, 48665, 27234, 44012, 8002, 35643, 1029, 47189, 44649, 19164, 49984, 29760,
                32166, 3138, 17975, 41568, 3015, 44831, 14574, 50910, 46541, 60992, 47633, 32844,
                30375, 5484, 64494, 40666, 37123, 61146, 4214, 23861, 32337, 41399, 13655, 4766,
                56842, 61728, 65255, 52101, 36758, 5978, 57811, 63813, 25222, 24186, 43595, 45423,
                50740, 10117, 30584, 56336, 62328, 23341, 15388, 52342, 34570, 39789, 601, 58175,
                9549, 44509, 57169, 45831, 56479, 12247, 1174, 3906, 26655, 47211, 29094, 32472,
                34210, 64186, 29847, 16614, 15654, 54188, 3808, 57082, 2144, 21794, 28710, 35177,
                45655, 27325, 9206, 40313, 24372, 14569, 2342, 24985, 37127, 41138, 10757, 20930,
                64798, 14802, 38215, 52136, 58409, 7981, 3083, 46313, 63546, 49882, 5283, 4211,
                43398, 30679, 26286, 31346, 59061, 32624, 32033, 27427, 37289, 59622, 40757, 60179,
                35008, 51854, 20101, 26819, 11244, 56137, 103, 5258, 27867, 23782, 29993, 36517,
                51568, 52813, 50317, 23139, 15068, 5856, 41785, 64655, 36864, 56094, 57827, 48517,
                57245, 41546, 41288, 11108, 44095, 21139, 55303, 40738, 16977, 26466, 59390, 6680,
                46967, 16945, 18079, 29764, 52222, 60526, 43989, 23358, 3261, 55336, 61285, 63807,
                14216, 53742, 20057, 61842, 44969, 44898, 55619, 16794, 23326, 63674, 4377, 51393,
                56078, 60382, 27849, 55205, 30530, 11738, 28160, 31642, 27002, 8109, 28703, 34053,
                26619, 55573, 32206, 10190, 56738, 22816, 56377, 54176, 3335, 10402, 45877, 17795,
                18744, 35850, 39074, 57437, 4467, 54125, 24870, 57982, 48073, 61969, 56220, 16764,
                61029, 53908, 4171, 48292, 57848, 19744, 44911, 16369, 30855, 43045, 36092, 15541,
                64339, 34220, 62543, 52322, 22537, 62115, 28036, 64374, 46470, 5823, 6283, 21021,
                65046, 28323, 15890, 58361, 22467, 48484, 51121, 59507, 48025, 16772, 61778, 16038,
                18992, 40814, 12561, 17572, 18653, 10124, 25118, 54031, 14005, 64314, 23795, 19262,
                33366, 14304, 43996, 20581, 50746, 41733, 50379, 35278, 40967, 3533, 14677, 12327,
                35054, 25182, 54332, 29567, 12957, 24670, 38500, 20807, 16212, 61808, 53449, 36544,
                8640, 26031, 63314,
            ]))
            .unwrap(),
            c: 253,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 182, b: 6181565150696095585, c: 1325942889 },
            FixedTestStruct { a: 226, b: 11287600466940657504, c: 2658221609 },
            FixedTestStruct { a: 208, b: 1999477990347895451, c: 2692846754 },
            FixedTestStruct { a: 23, b: 9214070344110107398, c: 2414685752 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 48796,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    42459, 35826, 28400, 29960, 60235, 35624, 59644, 7928, 4668, 50703, 15818,
                    9321, 14022, 39033, 57298, 3476, 21995, 27887, 53794, 42419, 9039, 46941,
                    33191, 8162, 10543, 53824, 30057, 24981, 8300, 45967, 56049, 41394, 45688,
                    7501, 46141, 61417, 30116, 55427, 42557, 33512, 57221, 49776, 26615, 46698,
                    53467, 35159, 63396, 46664, 7691, 56046, 26376, 28595, 41843, 31709, 20150,
                    21730, 7764, 9737, 52683, 44552, 43381, 22309, 34225, 7910, 57987, 22397,
                    20380, 4402, 2487, 44660, 41165, 34429, 57158, 56848, 50043, 60077, 29477,
                    24477, 63398, 57196, 3603, 64880, 35204, 55713, 16754, 20410, 47776, 21355,
                    44367, 1974, 53357, 12850, 25663, 60407, 31888, 8135, 59149, 40230, 31476,
                    38187, 9511, 13132, 55252, 34173, 61049, 44628, 47296, 64671, 51587, 10925,
                    11324, 25648, 38775, 18907, 27014, 52358, 11530, 43202, 7059, 57954, 5834,
                    53334, 45267, 18176, 36520, 19503, 40557, 10190, 8438, 61987, 26675, 7267,
                    60505, 52157, 59300, 48315, 42391, 24648, 21217, 8242, 32474, 7436, 61617,
                    53129, 12935, 24362, 43515, 11188, 53898, 29064, 32591, 51275, 50877, 54298,
                    18115, 24871, 33100, 18468, 4849, 62852, 64348, 45717, 27443, 61684, 61382,
                    22714, 13004, 37450, 56817, 63302, 57496, 44685, 34108, 13497, 41058, 43441,
                    32701, 24973, 9828, 8693, 32166, 14806, 29159, 48554, 23133, 64031, 24538,
                    16580, 29503, 45700, 62171, 27785, 34222, 22335, 15042, 19666, 31124, 19498,
                    18957, 18394, 56898, 47185, 36737, 1310, 53870, 40154, 59221, 28137, 21902,
                    23053, 3700, 25382, 46473, 16880, 64809, 19954, 56997, 31594, 49821, 50242,
                    2301, 43271, 15963, 38890, 22498, 1004, 36227, 49894, 19956, 26450, 10118,
                    7293, 31505, 10580, 49607, 18757, 20607, 56539, 41598, 53198, 27509, 23105,
                    62140, 59853, 60710, 12927, 7197, 19075, 3831, 42476, 42572, 64486, 64636,
                    46121, 11239, 61870, 40971, 9029, 48530, 37996, 20426, 63755, 11158, 13091,
                    4202, 13833, 62622, 7451, 2879, 14762, 50920, 49194, 42381, 10738, 42662,
                    12773, 52690, 2807, 57517, 53641, 17924, 48937, 54961, 28359, 34008, 57531,
                    30299, 34267, 28167, 1435, 53408, 64173, 28366, 14738, 37795, 50718, 58524,
                    56932, 46924, 25755, 39214, 65205, 61766, 7502, 60020, 49195, 20301, 44595,
                    15317, 44153, 52511, 19066, 23012, 42483, 40683, 64214, 4756, 35039, 42537,
                    19122, 61312, 11648, 13238, 58901, 44062, 9460, 56481, 25200, 19839, 46045,
                    53269, 43371, 39415, 28462, 55064, 44231, 61797, 34952, 5009, 30887, 7113,
                    24218, 8139, 2288, 65237, 33351, 55667, 46060, 21777, 46101, 41750, 34847,
                    6844, 36119, 52786, 44254, 22399, 27344, 7668, 57283, 53951, 52472, 41514,
                    1193, 49647, 51739, 27184, 9498, 33665, 34552, 34364, 3076, 50515, 39852,
                    29436, 48636, 19512, 43908, 41997, 26345, 8063, 35803, 48167, 32496, 62709,
                    41830, 39263, 402, 45321, 31722, 10221, 36106, 17594, 55219, 3266, 63535, 9658,
                    42466, 60028, 562, 50648, 20077, 29306, 53123, 47138, 28888, 13909, 48543,
                    29286, 30313, 57081, 33685, 42599, 7714, 46939, 47499, 49228, 38066, 10097,
                    5550, 18268, 13709, 2995, 61880, 56981, 41677, 41924, 1962, 21187, 7909, 14306,
                    63977, 291, 21887, 62276, 49403, 58287, 3396, 14450, 28881, 32642, 40907,
                    58307, 9928, 28517, 41321, 47960, 9341, 45438, 11266, 19520, 44335, 41907,
                    59981, 1399, 64749, 43280, 60965, 31455, 21502, 64737, 42683, 18010, 24259,
                    57568, 36459, 29584, 15903, 6395, 42004, 29762, 28617, 23363, 10708, 31981,
                    57694, 24500, 63508, 61554, 62143, 40767, 48811, 39897, 62092, 1626, 11872,
                    35958, 42, 37017, 32612, 10248, 18149, 12939, 21340, 46684, 1950, 5188, 14665,
                    30309, 12035, 133, 43655, 20279, 29541, 9947, 41850, 42736, 28391, 19433,
                    28906, 26055, 47505, 45377, 30026, 54815, 46580, 38658, 4907, 20827, 50569,
                    51695, 51698, 31744, 1861, 59612, 62203, 20893, 58352, 16801, 37117, 50397,
                    50183, 60374, 17422, 7893, 53689, 3543, 36797, 48565, 55857, 33025, 49186,
                    4358, 53700, 17264, 19124, 32633, 424, 7641, 42340, 39335, 36660, 29784, 4165,
                    19837, 33090, 28066, 63311, 19327, 9560, 35618, 31501, 14560, 38111, 61334,
                    9821, 49481, 39090, 61105, 899, 42498, 810, 31750, 42823, 10618, 22060, 12082,
                    11538, 43441, 44294, 43264, 51448, 60817, 25887, 24320, 1684, 40668, 43573,
                    49243, 27209, 56657, 8072, 14082, 47738, 33810, 28937, 47990, 19368, 61480,
                    65408, 56756, 7726, 27043, 29349, 63374, 44677, 13317, 45479, 38941, 53284,
                    10330, 51596, 23350, 34391, 2314, 7622, 48282, 23284, 845, 47659, 30248, 39220,
                    62174, 27728, 65138, 38396, 54100, 27057, 54433, 58615, 54537, 20625, 62032,
                    44456, 30565, 32258, 65325, 58099, 48875, 14197, 23663, 15349, 7806, 13315,
                    11527, 5141, 56989, 51452, 43187, 14742, 36960, 34456, 50739, 17764, 27310,
                    43513, 37379, 4285, 11548, 1027, 8864, 48403, 1500, 58594, 59354, 64335, 56835,
                    63646, 23883, 65345, 60792, 8274, 14157, 13044, 45434, 3117, 40886, 1544,
                    23261, 17936, 19588, 44849, 18005, 22828, 62170, 26648, 31978, 35955, 25816,
                    34132, 29597, 53821, 43620, 39424, 928, 35068, 24491, 16649, 17473, 38777,
                    57975, 29309, 2722, 8850, 31743, 17987, 19760, 58160, 49530, 58126, 35182,
                    20718, 20291, 33969, 5443, 24662, 15771, 48386, 9371, 57866, 35136, 53279,
                    12940, 57113, 15756, 61324, 48960, 22134, 34875, 23951, 59628, 28741, 6120,
                    17560, 17999, 43459, 56959, 39013, 5309, 16919, 10806, 47092, 27120, 7246,
                    37439, 21340, 63817, 63024, 33936, 60284, 32089, 40369, 47373, 14267, 7951,
                    61869, 7556, 44264, 10196, 19020, 27314, 39307, 36919, 28025, 38071, 39333,
                    22742, 54002, 38478, 12210, 63970, 21515, 34105, 21218, 55860, 55785, 42433,
                    14846, 16394, 46664, 44933, 43033, 5919, 42349, 44221, 24369, 27825, 22022,
                    31456, 36188, 37311, 2879, 29975, 12626, 60411, 44856, 51735, 43156, 28458,
                    52557, 64554, 47683, 9553, 22057, 40718, 38376, 56923, 40435, 46547, 61703,
                    12615, 45320, 32323, 39217, 12315, 39981, 14717, 38930, 15738, 10887, 56733,
                    44085, 55731, 23589, 62858, 22529, 53715, 9788, 39476, 54653, 28294, 11246,
                    10097, 7082, 56151, 10259, 53315, 64112, 48360, 22307, 19433, 47369, 31140,
                    45651, 16197, 32976, 22538, 9061, 21258, 18026, 13190, 2749, 56676, 8934,
                    17509, 28935, 41484, 44507, 20537, 1112, 45150, 46614, 33493, 4565, 65504,
                    22735, 59739, 22162, 58555, 7857, 23918, 36341, 32903, 9389, 54811, 32461,
                    33911, 9626, 61919, 48237, 29736, 35767, 17640, 27133, 28960, 23845, 1060,
                    44328, 24141, 58984, 53739, 56594, 5650, 43428, 18843, 1308, 8564, 24567,
                    60174, 32064, 60779, 64622, 4336, 54894, 26264, 6810, 58324, 6280, 39556,
                    17984, 11079, 6086, 20413, 37143, 5448, 7542, 24097, 21994, 22942, 24119,
                    36840, 31335, 30807, 35529, 38433, 41686, 64674, 40504, 34991, 45379, 61431,
                    34173, 19625, 53513, 17973, 6605, 62745, 64348, 47177, 14268, 53519, 50867,
                    55848, 2805, 26851, 38999, 27130, 56810, 57618, 49673, 4326, 44532, 39652,
                    62765, 1728, 36716, 30079, 59494, 53876, 12611, 12720, 5299, 14657, 27477,
                    8365, 36710, 47595, 6486, 27305, 44463, 34547, 13248, 25025, 41228, 36163,
                    21710, 9660, 55819, 16535, 62009, 19870, 21678, 58625, 440, 37527, 35910,
                    43977, 5892, 18181, 20357, 37402, 48498, 59607, 7414, 45451, 40963, 54498,
                    3211, 4842, 59365, 48502, 7653, 42413, 51682, 13535, 30496, 13797, 46662,
                    41185, 45244, 48640, 16727, 16745, 29387, 52772, 46323, 7321, 47800, 22427,
                    58727, 60853, 28316, 64629, 3113,
                ]))
                .unwrap(),
                c: 26,
            },
            VarTestStruct {
                a: 36783,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    16077, 1091, 63253, 62379, 7845, 44699, 32470, 27865, 44546, 51124, 2691,
                    57710, 59502, 44508, 65088, 21262, 64674, 5087, 32543, 2810, 3519, 7654, 47267,
                    41175, 50579, 61574, 58685, 33350, 21994, 38936, 51352, 9516, 29823, 7061,
                    19049, 45076, 47746, 10342, 4915, 22945, 4520, 60502, 57503, 9902, 62996,
                    22261, 40845, 9303, 33692, 60030, 20828, 61400, 8845, 29211, 62489, 12891,
                    62064, 37897, 5982, 7901, 20502, 41461, 25398, 16055, 54733, 973, 53000, 6549,
                    50908, 24710, 52348, 23955, 57539, 14374, 47920, 4337, 46002, 40333, 46293,
                    47733, 26840, 62528, 60131, 28525, 42216, 35805, 65322, 44187, 2820, 39461,
                    32554, 58279, 34209, 25871, 27593, 10700, 36635, 10818, 37072, 36456, 27508,
                    29837, 21292, 37671, 63234, 62824, 59358, 63001, 30561, 30023, 60837, 8823,
                    37267, 46417, 25875, 38818, 11916, 1500, 26313, 32778, 58170, 38683, 15311,
                    10103, 12194, 10833, 12205, 29272, 26370, 9842, 9318, 62072, 4807, 7065, 17685,
                    40090, 49734, 56733, 30485, 12141, 1155, 20587, 31904, 44162, 16919, 56338,
                    18678, 2444, 19097, 7109, 20891, 55578, 31872, 2530, 34183, 60786, 53058, 4976,
                    25584, 54517, 15975, 14130, 33400, 14982, 41650, 40559, 53192, 27979, 20534,
                    6626, 40305, 51734, 38102, 37792, 39604, 38847, 56571, 56336, 18206, 10660,
                    11044, 44937, 35148, 37998, 30430, 38604, 27817, 15790, 5513, 35606, 54328,
                    52820, 19603, 2816, 62048, 63374, 40456, 63013, 46783, 11176, 5386, 47974,
                    39704, 35384, 3947, 53942, 48871, 28904, 28493, 63515, 49064, 4183, 22467,
                    48876, 23394, 28680, 49621, 46704, 49943, 25303, 5111, 33132, 4258, 43903,
                    49550, 9821, 61764, 20040, 64080, 58917, 15098, 39699, 26280, 45373, 30889,
                    1626, 46177, 31943, 57010, 1658, 32733, 55076, 55340, 24503, 51269, 15282,
                    53917, 35773, 7717, 49742, 22270, 50815, 40779, 5907, 27961, 49384, 48047,
                    55979, 11987, 20904, 30156, 48316, 51561, 2286, 63249, 688, 15503, 19761,
                    61251, 18539, 8598, 56359, 3478, 20201, 31226, 63, 49734, 31364, 15243, 51482,
                    65443, 62357, 44226, 54457, 1370, 39818, 40918, 35286, 45051, 10717, 41320,
                    60154, 5577, 48894, 26, 48156, 41640, 40396, 53462, 5438, 44669, 61119, 35929,
                    38243, 7742, 56119, 55718, 50144, 50781, 5429, 49505, 46670, 1208, 33889,
                    18919, 12428, 55990, 20992, 31637, 17776, 20415, 4634, 11974, 48649, 39582,
                    6187, 48452, 41700, 49836, 53742, 65075, 52949, 31077, 62006, 34602, 21895,
                    5339, 40431, 38023, 11528, 19971, 14341, 4182, 62293, 26192, 49475, 47963,
                    37299, 18409, 31111, 6107, 41742, 61666, 37421, 58128, 43788, 22637, 37424,
                    55313, 58521, 46806, 14062, 10365, 18366, 13969, 3642, 37991, 8846, 61846,
                    20296, 52475, 2149, 30329, 7291, 45207, 45651, 35379, 31981, 45532, 3319,
                    11268, 61350, 63506, 11274, 10416, 19318, 49664, 9651, 19873, 63213, 34368,
                    57833, 33932, 11646, 5921, 44779, 32574, 59864, 18411, 46639, 54355, 43841,
                    64773, 20107, 61743, 47120, 20924, 14912, 26474, 20433, 32271, 30022, 49430,
                    64014, 44990, 18631, 19035, 48014, 15812, 9033, 16924, 358, 15518, 16426,
                    59394, 50378, 41216, 30575, 20718, 37411, 62779, 49985, 50806, 12939, 30848,
                    6605, 6972, 17286, 40712, 49358, 14227, 56004, 24008, 63520, 26320, 60901,
                    10593, 2074, 60707, 25791, 44049, 49751, 23807, 2305, 4530, 49709, 15144,
                    39167, 9877, 19341, 44190, 39535, 37374, 48751, 44573, 5258, 3382, 41476,
                    47642, 14730, 45473, 45785, 40226, 59460, 8379, 47966, 54322, 36596, 30040,
                    46601, 33533, 63039, 30127, 26226, 42365, 14537, 24936, 63718, 8989, 24672,
                    37321, 14567, 35065, 47544, 57194, 581, 53553, 19039, 19169, 45679, 64610,
                    19961, 28863, 64730, 27330, 52937, 52769, 49977, 63252, 35807, 42681, 20912,
                    48960, 51425, 7360, 20685, 56683, 54778, 18614, 53729, 39190, 39831, 6462,
                    21831, 29624, 63917, 40784, 38076, 40516, 64786, 56476, 34590, 52500, 1721,
                    60305, 27066, 45646, 48495, 26208, 8609, 40484, 35962, 42553, 60751, 48796,
                    43814, 14841, 63765, 13317, 31148, 58189, 22710, 17833, 41318, 55798, 54318,
                    27368, 26786, 17517, 22242, 22059, 814, 10578, 55101, 59703, 17451, 47897,
                    42579, 32351, 51566, 64244, 31116, 14916, 12805, 7387, 45833, 61844, 40890,
                    30823, 25573, 42520, 38449, 3140, 5518, 42393, 24364, 29445, 9380, 2428, 6896,
                    14247, 38494, 30038, 59205, 32976, 8811, 40584, 36118, 51944, 38626, 44265,
                    16495, 61007, 27860, 62079, 17771, 49848, 43071, 20575, 59899, 40961, 2496,
                    16864, 6651, 35809, 37677, 56892, 59349, 28476, 39505, 29794, 51238, 62314,
                    33122, 46185, 10453, 61977, 44439, 49025, 32227, 27794, 58566, 59374, 53307,
                    54053, 31454, 18464, 55808, 1843, 14235, 57137, 44529, 28198, 3245, 13394,
                    12058, 50283, 4411, 47610, 45070, 22895, 43806, 14615, 26304, 59025, 7948,
                    63591, 40490, 24348, 4290, 42143, 28631, 48551, 25662, 41664, 3149, 31910,
                    48612, 26417, 44510, 4549, 17486, 63903, 48260, 17105, 64493, 10693, 2142,
                    43627, 27756, 17072, 65503, 41312, 28313, 8449, 50050, 38265, 4265, 59511,
                    30857, 10374, 21825, 19345, 39605, 59458, 52054, 36101, 8175, 11458, 59176,
                    60809, 31257, 53721, 39641, 963, 3070, 27839, 53693, 23092, 24333, 30985,
                    21261, 21757, 1986, 26092, 50058, 46472, 30248, 31699, 23753, 28386, 4875,
                    56201, 20347, 27750, 54006, 4066, 48363, 37417, 43505, 20326, 34586, 47331,
                    61277, 30115, 55430, 7543, 28518, 19365, 6120, 16129, 56499, 46612, 53344,
                    14531, 42409, 51354, 51130, 54286, 11678, 23399, 35863, 33425, 38393, 8670,
                    27764, 40971, 35654, 39289, 4312, 61102, 2474, 56533, 41256, 50454, 19988,
                    32721, 60194, 15016, 13832, 50702, 19211, 46636, 1084, 22815, 49493, 32570,
                    62262, 57160, 64025, 26223, 43298, 218, 54980, 58663, 47724, 64093, 50412,
                    56137, 3917, 16313, 56431, 43753, 55027, 11180, 36906, 48413, 50928, 26056,
                    50810, 46914, 3850, 21733, 38018, 1911, 34340, 31557, 10099, 50979, 20595,
                    57316, 27524, 8762, 35136, 4980, 48559, 16832, 1851, 40929, 3218, 398, 40057,
                    17007, 58948, 52543, 24967, 59087, 63275, 4702, 12877, 7821, 33501, 45641,
                    30425, 53317, 14614, 56023, 62653, 41309, 6793, 11816, 53203, 57515, 6152,
                    44166, 34750, 17298, 30850, 1617, 19424, 53834, 54896, 47465, 25330, 39452,
                    35395, 18020, 36413, 36576, 28322, 45800, 24651, 5973, 22620, 59710, 32390,
                    28639, 19104, 61782, 20926, 58858, 23826, 62299, 44784, 52138, 55147, 42159,
                    40012, 30749, 3404, 40882, 42089, 16094, 27881, 58923, 4558, 26658, 26336,
                    13036, 38517, 60789, 48194, 1098, 20378, 61093, 63164, 58344, 8895, 725, 42496,
                    42062, 21835, 7040, 59550, 10741, 59429, 60510, 27521, 17547, 65129, 55506,
                    24113, 61079, 54930, 49522, 49834, 50389, 53409, 28714, 44323, 780, 26241,
                    37170, 11707, 49590, 1161, 6932, 30035, 19955, 36591, 4546, 5238, 10036, 56559,
                    47945, 56206, 64116, 42689, 8919, 18023, 36796, 59677, 40473, 49237, 15104,
                    63831, 3077, 31727, 2053, 46476, 11504, 55451, 44261, 3262, 10659, 59267, 1904,
                    22274, 19427, 23383, 59826, 44031, 31081, 11545, 39460, 31157, 37002, 43135,
                    64749, 53615, 10813, 44457, 31290, 23286, 53551, 13923, 11142, 27721, 57534,
                    4675, 60089, 20534, 13800, 16633, 34245, 60821, 17465, 57773, 22164, 20137,
                    44285, 43024, 60111, 60844, 17113, 10646, 9533, 25621, 105, 12796, 21133,
                    56770, 35049, 30807, 60308, 54200, 54987, 44508, 7929, 14094, 7917, 25789,
                    22051, 57686, 27726, 65012, 1796, 61172, 47961, 42882, 8783, 60144, 53772,
                    15854,
                ]))
                .unwrap(),
                c: 205,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0b01c7ef4ea7cfde110e2926c6bcde2dc49be76c35702768fc6328265296577d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_6() {
    let value = ComplexTestStruct {
        a: 61904,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            48367, 44269, 5739, 44814, 9723, 33067, 30071, 58706, 9435, 23016, 21381, 43658, 53430,
            36329, 4450, 63812, 25031, 49815, 42658, 20655, 17318, 8697, 46147, 8686, 6200, 45950,
            16357, 15464, 64681, 19322, 40399, 46237, 63171, 63223, 3619, 17312, 56625, 25208,
            9676, 16548, 12076, 28529, 23165, 49626, 45559, 53129, 30839, 29732, 53469, 1931,
            24990, 5186, 64977, 7677, 8765, 43558, 9249, 27809, 25987, 60055, 38345, 6724, 56210,
            51579, 2216, 24836, 4194, 10120, 17528, 49434, 13797, 57443, 56603, 15455, 20004, 8006,
            64311, 2871, 14728, 20947, 33157, 12294, 17573, 64839, 21728, 11300, 38982, 47023,
            10379, 2411, 23191, 21095, 6528, 24799, 17010, 34476, 58240, 18382, 59078, 64131, 5270,
            28762, 48245, 47949, 24345, 49496, 46368, 31401, 44262, 51750, 6171, 62751, 14717,
            10895, 10841, 15812, 20038, 55288, 59421, 17962, 12711, 185, 53833, 45818, 33786, 3996,
            7464, 45267,
        ]))
        .unwrap(),
        c: 193,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            211, 164, 111, 153, 104, 111, 66, 132, 27, 214, 122, 80, 98, 161, 102, 61, 96, 29, 200,
            39, 18, 25, 197, 177, 62, 181, 205, 15, 26, 204, 136, 90, 80, 190, 199, 84, 205, 22,
            160, 44, 99, 84, 30, 232, 124, 217, 124, 229, 8, 241, 141, 18, 29, 123, 246, 109, 102,
            160, 57, 166, 110, 79, 22, 50, 193, 168, 172, 191, 209, 6, 160, 235, 219, 4, 253, 138,
            136, 136, 39, 42, 59, 237, 178, 36, 215, 88, 106, 77, 223, 50, 233, 174, 113, 0, 127,
            212, 37, 24, 196, 112, 96, 5, 51, 5, 126, 61, 44, 194, 89, 223, 27, 149, 226, 231, 219,
            184, 180, 202, 194, 179, 162, 19, 52, 7, 222, 112, 49, 88, 54, 82, 179, 245, 38, 218,
            138, 87, 56, 100, 103, 108, 159, 190, 161, 6, 24, 25, 230, 227, 143, 218, 130, 58, 109,
            228, 159, 229, 91, 99, 64, 62, 235, 155, 53, 171, 161, 35, 14, 215, 59, 49, 190, 247,
            183, 228, 139, 170, 93, 166, 76, 4, 5, 48, 139, 75, 195, 199, 88, 199, 155, 202, 41,
            155, 218, 42, 196, 78, 168, 208, 245, 20, 131, 20, 15, 90, 167, 28, 254, 248, 159, 19,
            142, 198, 135, 123, 71, 223, 113, 75, 135, 228, 99, 204, 14, 122, 39, 168, 199, 56, 95,
            71, 76, 18, 52, 213, 30, 13, 174, 211, 50, 208, 67, 19, 69, 232, 215, 149, 103, 47,
            201, 236, 102, 227, 94, 54, 48, 189,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 60723,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                39480, 32839, 15814, 35018, 26784, 38606, 2576, 3619, 21851, 30928, 34151, 52057,
                64105, 24930, 18086, 37076, 6862, 19679, 32100, 30275, 58410, 36429, 16198, 56396,
                10639, 48318, 26485, 27508, 45052, 50842, 41484, 63007, 4006, 2877, 25873, 9703,
                45971, 46503, 15003, 50384, 60283, 57649, 52470, 54531, 46291, 19864, 57160, 55235,
                60741, 49831, 4486, 52347, 8780, 13462, 47457, 38688, 45014, 61772, 53702, 19888,
                63499, 54716, 21578, 14882, 16374, 17663, 47253, 35607, 53452, 14042, 4946, 42699,
                18521, 59550, 27060, 53608, 30663, 17656, 15570, 13412, 9898, 9563, 51033, 17390,
                44513, 6269, 37726, 9981, 29369, 2058, 15590, 54310, 20483, 1301, 63517, 45120,
                8779, 1630, 4349, 45896, 34061, 32639, 60256, 37934, 49361, 23866, 37143, 5593,
                50782, 20143, 49014, 40905, 44267, 17144, 31111, 24338, 14619, 32591, 60563, 44657,
                1698, 25983, 6849, 41150, 16761, 18776, 57718, 12294, 59833, 18011, 63003, 13067,
                43227, 18099, 21358, 63610, 24913, 4341, 2788, 61934, 55930, 65326, 3155, 17225,
                28835, 7217, 4111, 19046, 48907, 64107, 57331, 52751, 34827, 28648, 32110, 5176,
                7659, 47258, 1255, 52367, 6878, 65279, 7576, 1405, 19627, 59709, 44692, 21762,
                26667, 44612, 34596, 56330, 21187, 57968, 30363, 725, 50988, 63314, 19637, 33111,
                29816, 12885, 14346, 58437, 60441, 20656, 30669, 34602, 28945, 17518, 56530, 2302,
                53724, 3770, 23287, 63087, 51300, 16960, 37297, 17175, 39124, 45894, 48158, 38893,
                30995, 59219, 13591, 52357, 48819, 10970, 56587, 43392, 12041, 46727, 56270, 46127,
                63821, 9732, 30885, 43343, 51895, 21429, 6002, 44706, 36884, 42508, 37045, 20898,
                17906, 10479, 6549, 44717, 60368, 60472, 14715, 14, 55017, 43114, 52347, 48833,
                45691, 19215, 13037, 47060, 64227, 52858, 45206, 20104, 396, 57145, 58444, 40992,
                30117, 50253, 36043, 12536, 26523, 44429, 106, 8579, 6559, 43601, 44152, 14443,
                55492, 58601, 2646, 63164, 42755, 25246, 54017, 61078, 48302, 28801, 32041, 52148,
                59014, 55891, 48754, 10216, 20748, 53674, 48141, 29119, 25088, 29507, 63486, 63421,
                19771, 8041, 45212, 37254, 11729, 58191, 63140, 31847, 25808, 53572, 23449, 58850,
                7809, 42130, 21369, 22192, 10751, 39582, 4499, 45623, 55645, 46662, 62621, 63139,
                52219, 29575, 49764, 46377, 7311, 63909, 55775, 8264, 21718, 32375, 314, 23272,
                14490, 59028, 63312, 52652, 10131, 14472, 53689, 25350, 11805, 41794, 36163, 2821,
                652, 11838, 27166, 24173, 60966, 31531, 27355, 13442, 61895, 27759, 29355, 21026,
                59104, 1542, 31814, 21885, 29443, 43585, 6375, 13705, 4740, 301, 56975, 35759,
                35185, 15784, 42979, 15805, 2917, 6924, 26630, 61239, 47775, 59468, 35638, 3254,
                25008, 21755, 37104, 10004, 49044, 31870, 23254, 41015, 39732, 62579, 36109, 34763,
                64661, 4394, 25275, 30894, 24893, 33268, 35113, 40011, 1620, 7557, 31599, 25860,
                54843, 44601, 4500, 27332, 23748, 33242, 29131, 36985, 28097, 63359, 1538, 3585,
                22637, 12185, 53423, 53745, 15416, 45280, 30337, 13535, 2922, 60559, 7560, 8123,
                12336, 20730, 41467, 55576, 58173, 47672, 7848, 15552, 28442, 8774, 29369, 5807,
                37741, 35333, 24878, 31432, 40764, 13847, 20457, 6803, 59184, 39127, 46894, 29399,
                9304, 45842, 579, 17895, 59923, 23755, 12, 6679, 64592, 13876, 27058, 16981, 6110,
                457, 28356, 4988, 40989, 36937, 36540, 36981, 3696, 16592, 63190, 50263, 26386,
                14705, 38472, 38649, 52406, 12351, 58822, 15588, 4044, 44224, 3863, 44192, 20482,
                38238, 54766, 10722, 41295, 55270, 35523, 26065, 3820, 51917, 10426, 32810, 52996,
                64014, 34075, 63222, 6092, 9513, 51307, 43585, 8714, 31957, 11643, 29446, 57878,
                44153, 48012, 29019, 179, 44451, 63551, 55142, 59776, 15988, 46090, 62119, 17910,
                2905, 18315, 44044, 63603, 48892, 52028, 2258, 20054, 3831, 59217, 4946, 18919,
                59541, 19294, 8215, 15182, 2547, 23954, 25345, 50131, 25207, 34497, 27187, 29226,
                13435, 19229, 19447, 36242, 18682, 22536, 16740, 29544, 31852, 56637, 50605, 62885,
                6018, 39360, 45112, 52790, 46149, 64132, 45492, 23071, 24676, 10618, 52985, 48112,
                32723, 42169, 27091, 20037, 47503, 20905, 38563, 60956, 57593, 633, 4959, 457,
                54562, 50669, 60524, 48388, 52698, 22790, 11245, 21177, 4531, 14528, 28471, 62365,
                57217, 50201, 44037, 22502, 44720, 10157, 21585, 58331, 38191, 40750, 26602, 20745,
                25794, 29281, 65429, 12549, 5959, 17728, 2029, 12702, 21441, 5640, 20777, 60924,
                7501, 59277, 23434, 54759, 53699, 11546, 26602, 23418, 25056, 54457, 20479, 22860,
                65378, 9560, 48890, 9653, 42294, 30047, 56500, 60573, 39892, 36712, 6363, 39782,
                60055, 62841, 42638, 8407, 27923, 8566, 49592, 61636, 29935, 29398, 40866, 22321,
                44115, 16567, 43958, 16982, 49497, 10600, 29162, 44382, 2548, 56722, 37847, 33009,
                36739, 64263, 16608, 14531, 38936, 3466, 7677, 62560, 44213, 26045, 53222, 36564,
                8658, 28826, 12278, 37314, 59688, 2311, 44760, 51664, 60551, 23168, 54847, 36523,
                29633, 29109, 42346, 40841, 78, 60553, 12830, 26349, 27828, 45563, 38614, 48370,
                45440, 55183, 64707, 9662, 26113, 12272, 16652, 63229, 15285, 8414, 24785, 6215,
                27038, 37597, 1044, 57332, 53832, 54402, 6282, 61700, 32167, 57500, 54450, 32767,
                53307, 50149, 42147, 6641, 56030, 9172, 42057, 6093, 46877, 1749, 39173, 22742,
                3071, 45491, 61708, 5555, 7940, 39132, 20962, 25705, 24247, 23647, 31350, 22368,
                20521, 32811, 39662, 15786, 5602, 1804, 13491, 41858, 11639, 19028, 56810, 4218,
                3401, 53199, 22530, 27123, 51404, 48137, 32756, 38732, 1336, 29673, 65374, 47548,
                57910, 19915, 61035, 30360, 3981, 41944, 44015, 10661, 52987, 38146, 62462, 7029,
                58293, 3848, 7722, 64863, 12415, 33575, 20976, 57777, 49442, 29395, 48279, 9825,
                51573, 40851, 64782, 27194, 2467, 33062, 15251, 39166, 30224, 49434, 21166, 63060,
                38213, 13595, 40026, 64433, 4339, 29263, 59168, 20315, 55504, 36295, 8990, 32571,
                29017, 24379, 49342, 61032, 30564, 56420, 10058, 11955, 64762, 15850, 23430, 65128,
                359, 38979, 54739, 61794, 6349, 12793, 12623, 25678, 55447, 51161, 53665, 13156,
                47432, 36761, 52100, 26440, 24682, 60091, 15007, 58287, 58198, 46860, 65097, 49546,
                42095, 57288, 22747, 11800, 22204, 64971, 28251, 1613, 51184, 21372, 48593, 25375,
                10139, 39833, 47569, 54432, 47080, 25852, 44733, 38972, 40830, 43820, 57772, 4577,
                60602, 32773, 38291, 25894, 19270, 18587, 24254, 42040, 44837, 5212, 50424, 18098,
                41847, 31239, 57701, 1300, 28525, 33814, 43255, 48665, 31202, 43238, 50438, 64549,
                53208, 16792, 33450, 6219, 45976, 56082, 1994, 24684, 5864, 50751, 2952, 56933,
                23401, 31742, 25785, 36090, 16080, 43465, 45098, 36514, 3346, 31703, 39053, 32099,
                14999, 43988, 21024, 39804, 54927, 23127, 13488, 30226, 60007, 53753, 11958, 29352,
                48305, 19604, 35593, 41199, 40101, 43473, 31951, 22604, 13208, 3089, 13680, 36188,
                58082, 15560, 10338, 41385, 37245, 36720, 43361, 27230, 49639, 26179, 21460, 7070,
                10285, 20328, 62065, 49602, 55333, 33900, 38247, 60143, 58928, 54564, 15352, 48546,
                17721, 7075, 46441, 19002, 28263, 17137, 33021, 63435, 60713, 24169, 50194, 50156,
                57101, 1595, 174, 53618, 49087, 62470, 62599, 45463, 3868, 47802, 32564, 47363,
                53714, 15844, 47236, 64260, 8447, 21224, 16426, 56190, 12135, 59751, 27082, 15308,
                6087, 710, 42020, 31024, 30020, 8132, 48023, 41282, 15152, 59713, 9225, 7711,
                26813, 64968, 55005,
            ]))
            .unwrap(),
            c: 89,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 114, b: 14950343605712017316, c: 2680609915 },
            FixedTestStruct { a: 91, b: 2140103802714772022, c: 3901213664 },
            FixedTestStruct { a: 142, b: 14328130832926386164, c: 1992494886 },
            FixedTestStruct { a: 190, b: 13566572091063415431, c: 3023344176 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 20766,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    57652, 13690, 44185, 59264, 50578, 17437, 47185, 12484, 12684, 56816, 2036,
                    38490, 13208, 35452, 14673, 20185, 46859, 24653, 39548, 18381, 13082, 1544,
                    15386, 9463, 5518, 46250, 35337, 57456, 28369, 17488, 48221, 4131, 53744, 4946,
                    58603, 648, 4037, 55909, 32290, 2776, 9380, 18101, 63436, 44136, 20790, 41265,
                    5201, 9122, 64845, 19801, 24973, 50094, 6029, 37658, 51947, 38572, 34709, 5787,
                    1243, 9923, 10421, 52122, 61457, 37188, 55510, 24877, 4027, 37924, 60092,
                    50797, 26825, 38868, 53806, 2873, 16672, 54748, 21266, 38465, 49966, 42846,
                    36778, 50690, 41324, 37955, 42760, 52632, 31183, 10246, 34793, 3377, 22388,
                    39332, 26935, 38439, 43584, 48853, 36092, 40069, 24200, 22464, 11234, 62625,
                    109, 26580, 56452, 53022, 53810, 16753, 25803, 22043, 55808, 40385, 37357,
                    29074, 31394, 52501, 56246, 5853, 25071, 52637, 32980, 29486, 37745, 1971,
                    46834, 48581, 14812, 40481, 56656, 48447, 24053, 40832, 38789, 55553, 21773,
                    14664, 12421, 34143, 40722, 2811, 45330, 55756, 41669, 38385, 12216, 59213,
                    10444, 61371, 6603, 59867, 12537, 36392, 35250, 45473, 51607, 47928, 63152,
                    24257, 11051, 41536, 30327, 11938, 46619, 4488, 6516, 7657, 45066, 24601,
                    35242, 2577, 57330, 48339, 19685, 2068, 34883, 29673, 38924, 58922, 8080, 3881,
                    16947, 29850, 1089, 48545, 10267, 9487, 58918, 57801, 38174, 31115, 28451,
                    47807, 36552, 3472, 55772, 36659, 43219, 54882, 39488, 9848, 60367, 2395,
                    64000, 48102, 27227, 37379, 26615, 27956, 19425, 1989, 19971, 5738, 63702,
                    52459, 41582, 15087, 38394, 56559, 551, 61589, 64205, 64111, 57821, 24707,
                    28418, 6178, 2976, 29310, 63215, 22740, 28049, 56835, 43462, 50877, 18649,
                    24026, 56769, 20507, 32392, 25303, 38338, 22945, 64083, 23413, 34258, 52473,
                    248, 46448, 16915, 1755, 13236, 29258, 41476, 61532, 18006, 52229, 22158,
                    15356, 63802, 64492, 33269, 8273, 15155, 29536, 48502, 56368, 16149, 34217,
                    5874, 51981, 43867, 22428, 43351, 21024, 13858, 19862, 34824, 53688, 53313,
                    16409, 27901, 17915, 62864, 64142, 55621, 60983, 6855, 18331, 17491, 13869,
                    44201, 47282, 58710, 6564, 22324, 41626, 48016, 57893, 16734, 21143, 16280,
                    11555, 44814, 42967, 4225, 55560, 38564, 11046, 9584, 6250, 8819, 46550, 32074,
                    27683, 26299, 62765, 59976, 11058, 28899, 7953, 31816, 784, 38227, 56396, 7942,
                    29937, 44941, 35056, 39273, 29362, 37252, 3171, 34367, 49144, 5749, 52778,
                    6967, 9957, 53285, 63942, 1000, 40085, 47414, 54082, 29344, 22722, 43874,
                    40571, 30090, 63203, 22549, 29382, 15999, 60578, 25933, 33474, 37531, 47446,
                    33747, 18341, 14052, 4954, 52481, 6069, 45803, 27839, 32003, 45244, 26095,
                    38513, 6596, 8119, 14074, 23957, 2827, 11158, 64032, 42914, 9885, 54111, 35204,
                    39152, 27418, 39211, 5683, 61982, 63040, 44287, 6204, 17722, 8294, 6496, 25158,
                    9929, 24561, 10332, 26155, 11617, 51691, 21862, 14485, 32401, 52343, 54736,
                    46137, 56452, 1545, 34101, 12605, 32689, 12927, 27964, 17817, 14954, 2685,
                    52189, 33689, 26652, 45266, 40329, 22288, 24851, 30974, 7778, 60053, 36913,
                    4153, 45478, 52161, 31224, 31, 36214, 27749, 54603, 45103, 5876, 39392, 6720,
                    29811, 8237, 3721, 61299, 55649, 3436, 5808, 57107, 14136, 64525, 59701, 38440,
                    11622, 18593, 7199, 36659, 6070, 16103, 49901, 50418, 63637, 4828, 65415, 7652,
                    46789, 43149, 21998, 50383, 7075, 39300, 40350, 22552, 12116, 12890, 64308,
                    29913, 28288, 21759, 26255, 38031, 41323, 31118, 10089, 63401, 60214, 36785,
                    11470, 43952, 14120, 19748, 42389, 46174, 13752, 32825, 14327, 12301, 33810,
                    40040, 25384, 45171, 52460, 47894, 49128, 41230, 55222, 59189, 30514, 34362,
                    9194, 59228, 61628, 33472, 38013, 36737, 32242, 47956, 23354, 6326, 8841,
                    62160, 18504, 17423, 64289, 50338, 13895, 54586, 63638, 21214, 51181, 4562,
                    64049, 6027, 43186, 7158, 10170, 3712, 27843, 12546, 50262, 61252, 50223,
                    25167, 22037, 3831, 55481, 38946, 60233, 10955, 21781, 40284, 2120, 45607,
                    21003, 18422, 48704, 42047, 59813, 41029, 30446, 43233, 37015, 55481, 6494,
                    13197, 32991, 14928, 52422, 44691, 50606, 49107, 32231, 24504, 50002, 4554,
                    45080, 30524, 21308, 36905, 16916, 58388, 40124, 59930, 50677, 2651, 42283,
                    11189, 46219, 54462, 55313, 782, 18413, 19588, 41284, 30421, 36955, 52870,
                    41350, 44209, 46091, 37518, 53392, 7788, 56168, 35866, 49430, 34257, 43979,
                    5732, 32306, 42634, 21163, 31805, 13401, 9795, 36319, 27113, 10935, 59962,
                    52926, 32003, 14615, 33085, 21427, 58047, 49083, 10847, 62532, 19299, 18006,
                    17809, 10436, 15737, 7656, 41062, 45928, 15355, 61862, 20986, 45427, 43014,
                    8428, 56623, 15307, 26755, 26077, 53620, 28142, 44155, 64743, 40010, 41586,
                    22958, 52800, 47610, 35848, 23574, 7828, 14799, 23938, 11884, 23470, 23070,
                    19422, 64850, 27838, 16146, 64487, 31323, 4812, 45126, 35914, 35704, 30501,
                    6238, 958, 47272, 58786, 34593, 10828, 17026, 1852, 13850, 13966, 25982, 36348,
                    47648, 4747, 41653, 358, 250, 30286, 28717, 37635, 3979, 37097, 9964, 41535,
                    60002, 5117, 38741, 15365, 64707, 10287, 6330, 50443, 33483, 18472, 28768,
                    46800, 14297, 33421, 14682, 24598, 7951, 49664, 13082, 29203, 5618, 37300,
                    23000, 20240, 3697, 20924, 24186, 13323, 4181, 63758, 21716, 27485, 37256,
                    21881, 23115, 34565, 36926, 58746, 64393, 41292, 14001, 47894, 42139, 56890,
                    39150, 18337, 53762, 22764, 8086, 60635, 19839, 16537, 42244, 41167, 4452,
                    22509, 9470, 62796, 44730, 9488, 31399, 63682, 19127, 133, 3271, 16655, 27663,
                    60750, 58468, 48951, 23303, 17805, 54079, 21058, 32564, 64982, 15517, 31271,
                    26879, 26002, 8239, 41140, 61207, 13058, 2179, 7672, 29080, 7600, 16603, 45143,
                    61469, 3824, 42841, 43756, 7129, 35953, 4873, 50058, 25654, 41213, 16300,
                    23431, 4147, 31267, 20662, 38621, 15358, 55095, 60191, 29677, 12601, 32289,
                    39886, 32177, 17073, 55939, 58090, 54108, 49589, 34714, 48876, 10376, 33406,
                    64795, 11226, 15702, 57920, 25047, 13667, 16457, 4002, 16800, 1520, 64155,
                    2051, 35451, 18481, 22549, 33430, 33378, 28357, 55405, 24269, 54098, 14798,
                    52136, 56892, 50848, 14184, 45582, 31791, 49289, 57085, 12168, 17894, 21824,
                    50265, 22684, 16751, 44202, 65140, 24003, 54174, 33462, 38322, 10421, 63271,
                    31402, 21416, 8921, 46642, 21197, 65288, 24435, 52306, 61991, 21044, 4032,
                    58472, 42671, 64928, 28651, 54109, 48542, 42074, 21827, 38979, 7671, 64184,
                    17868, 64313, 35760, 53629, 38334, 63549, 23878, 13560, 13962, 48652, 22584,
                    15634, 17386, 34903, 12843, 63972, 59214, 33430, 61348, 40540, 60032, 62485,
                    28435, 53841, 44605, 31346, 21871, 898, 41176, 51494, 47722, 23707, 58047,
                    18696, 13081, 56011, 45855, 22521, 37906, 47988, 12644, 14815, 39174, 370,
                    29988, 49868, 29088, 41746, 16072, 6301, 10898, 47993, 59117, 37750, 26214,
                    48039, 38705, 17350, 63942, 5970, 65120, 14941, 3176, 7877, 15748, 32359,
                    46937, 30012, 47799, 55050, 21320, 43980, 15879, 12899, 30807, 22019, 54798,
                    32770, 44426, 35805, 2707, 48432, 43309, 63552, 45360, 61914, 17994, 63123,
                    56693, 41385, 4392, 44318, 40553, 37526, 37687, 24310, 31615, 59900, 64383,
                    31068, 46098, 21080, 21375, 22372, 16570, 9966, 11287, 46548, 1319, 23769,
                    49274, 36673, 34876, 45374, 18959, 21831, 5543, 20301, 41641, 21582, 5947,
                    26923, 47165, 16067, 33666, 35886, 32232, 29784, 62160, 60287, 40529, 9997,
                    11085, 19364, 19008, 40084, 16561, 52779, 2406, 58982,
                ]))
                .unwrap(),
                c: 254,
            },
            VarTestStruct {
                a: 20545,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    35657, 52299, 47604, 60077, 53718, 6302, 16265, 18801, 6785, 35854, 2838,
                    29365, 20787, 41063, 29857, 63361, 6055, 32138, 46988, 28109, 48762, 28413,
                    59777, 18740, 37317, 15152, 55986, 47026, 38408, 35703, 50909, 1156, 6393,
                    18539, 52140, 59266, 24051, 44121, 33199, 16918, 52940, 23367, 14173, 61874,
                    62412, 36474, 25691, 20233, 7930, 1996, 15579, 41028, 25869, 52137, 36494,
                    16753, 13427, 44479, 42596, 40301, 46349, 53077, 37098, 12359, 62894, 1839,
                    12889, 43110, 9167, 33231, 54350, 33895, 44735, 42764, 30472, 59346, 38899,
                    26227, 18855, 37166, 44205, 42167, 5450, 17059, 40227, 14797, 17051, 59495,
                    29831, 4920, 13822, 2231, 22617, 62785, 49637, 18714, 34877, 25800, 48215,
                    36568, 4536, 59873, 31179, 26292, 7318, 17106, 1112, 53277, 6889, 33327, 21935,
                    34679, 44115, 40383, 48654, 20546, 38051, 23723, 35774, 35484, 28113, 54155,
                    3908, 5337, 48404, 19979, 22990, 50622, 48472, 41319, 12645, 25489, 57118,
                    24505, 11542, 18568, 2670, 31326, 54836, 51936, 8725, 5672, 34518, 10053, 8134,
                    12512, 30120, 32607, 43724, 51497, 62505, 27214, 14609, 45102, 58049, 13481,
                    41231, 20003, 63554, 58520, 15281, 41864, 41537, 52492, 38969, 9348, 12509,
                    11513, 16037, 39031, 24823, 31647, 65204, 14157, 36862, 24038, 20471, 56662,
                    28192, 65032, 10531, 26606, 4008, 55897, 1772, 35446, 12708, 53562, 18263,
                    26736, 32765, 30825, 11941, 30586, 19882, 28528, 11883, 11609, 57347, 65281,
                    20234, 34077, 264, 11318, 41081, 28371, 18015, 26856, 22381, 51967, 43014,
                    34169, 30812, 58731, 46802, 52244, 50973, 54256, 41875, 64539, 3629, 52809,
                    10597, 64840, 893, 63924, 236, 40536, 56182, 61021, 13561, 65264, 36717, 5254,
                    52471, 43911, 29237, 3862, 26814, 55716, 46874, 22157, 57591, 54317, 40300,
                    61761, 14242, 27037, 727, 49646, 49866, 59427, 41076, 1799, 43943, 65037,
                    23109, 17038, 15602, 4881, 15999, 61927, 18490, 21633, 35465, 12257, 61534,
                    29498, 55258, 45161, 31214, 24472, 41575, 35092, 37803, 14122, 36642, 14501,
                    11411, 7117, 1852, 56002, 17847, 63806, 32953, 33205, 16489, 1791, 11761, 5663,
                    4712, 15901, 55003, 15324, 46423, 12516, 5563, 62647, 47957, 53570, 44152,
                    4638, 45744, 62118, 17121, 17437, 5574, 39137, 6312, 50763, 6329, 32274, 56291,
                    21599, 21145, 17519, 21815, 7232, 51821, 47126, 56976, 4476, 44153, 64199,
                    23802, 53072, 64342, 30160, 27762, 2822, 30340, 55301, 2916, 58380, 9437, 1026,
                    64366, 30763, 62162, 4640, 662, 992, 56910, 55441, 20519, 55968, 11152, 59979,
                    56892, 41576, 55333, 10982, 20437, 17578, 24520, 7910, 30032, 5645, 52436,
                    20730, 20977, 47546, 1967, 32406, 8255, 22258, 15929, 56964, 65502, 39370,
                    60465, 11961, 38325, 29154, 48124, 48439, 18172, 54861, 53093, 5095, 41131,
                    22032, 51606, 39121, 4907, 8600, 30015, 37846, 37597, 10711, 10111, 61108,
                    34204, 21577, 26320, 40376, 31335, 42624, 13868, 7625, 24655, 58775, 59874,
                    54454, 26018, 50731, 21199, 1046, 26792, 57758, 58925, 64589, 7530, 10993,
                    57966, 3789, 42005, 49433, 54789, 15353, 62202, 8393, 37848, 46174, 10956,
                    64729, 54891, 13535, 48945, 58632, 62301, 29841, 8306, 44181, 54887, 16208,
                    359, 17678, 44901, 34337, 52314, 41902, 46158, 61841, 41310, 62409, 37560,
                    62783, 62169, 46298, 22372, 11463, 24601, 20176, 41456, 28211, 13138, 10581,
                    28171, 62006, 55883, 38060, 10127, 40009, 65485, 29075, 11009, 28774, 45411,
                    43564, 4001, 14617, 33579, 64353, 16830, 5721, 37884, 39829, 54736, 35738,
                    27176, 25773, 41012, 37080, 27932, 4712, 46650, 61528, 18329, 25857, 39268,
                    34129, 44776, 37974, 40682, 1655, 48129, 1701, 22486, 20194, 60906, 51698,
                    1760, 31608, 65022, 45828, 51, 54624, 5312, 63119, 3992, 361, 48065, 3459,
                    22396, 59689, 46062, 40677, 36937, 4055, 50757, 41150, 42206, 32268, 11449,
                    25680, 16226, 24752, 5215, 6675, 53478, 36926, 20989, 61384, 36377, 10587,
                    17061, 32499, 60150, 25702, 51608, 21690, 25608, 5, 32305, 12321, 63937, 14126,
                    43170, 30369, 723, 20795, 50018, 54929, 59601, 16166, 20028, 36122, 45544,
                    8193, 24701, 56336, 61550, 9462, 34974, 7634, 31805, 21619, 16197, 28797, 8245,
                    33379, 32965, 24061, 42292, 54157, 27374, 8410, 18011, 49965, 35268, 59104,
                    8316, 54714, 51466, 39269, 57510, 45001, 48413, 18517, 18493, 29842, 64993,
                    41061, 29837, 50097, 62410, 60216, 32890, 140, 61863, 51155, 2041, 42318,
                    10471, 47810, 24826, 31350, 18450, 15818, 36511, 62071, 24559, 46926, 36293,
                    55030, 43345, 22153, 40582, 18069, 36531, 47668, 49084, 14715, 40717, 56407,
                    59747, 57204, 47926, 10983, 56239, 45707, 15696, 40782, 5729, 48715, 3885,
                    11970, 37819, 13655, 37590, 26508, 28700, 29771, 59029, 22818, 24054, 26945,
                    22100, 303, 661, 47176, 62106, 7632, 19866, 16665, 61773, 11088, 9741, 24172,
                    13704, 42400, 46443, 43447, 12682, 18948, 24819, 44787, 27624, 59987, 42004,
                    546, 21097, 53633, 60878, 13669, 1422, 63158, 1779, 16652, 46951, 333, 36649,
                    711, 5482, 23224, 54733, 47187, 61387, 48313, 51453, 63383, 10594, 44114, 1250,
                    24037, 24832, 31667, 33495, 2704, 26193, 31019, 51771, 14925, 27808, 14187,
                    44685, 50585, 32027, 19350, 7240, 13210, 38462, 45924, 4801, 27228, 11405,
                    52565, 19355, 5415, 4818, 61828, 22887, 35845, 61162, 2742, 52747, 1308, 25523,
                    24018, 19657, 31989, 48442, 29835, 16744, 27576, 23262, 46969, 16503, 32474,
                    34015, 43158, 34695, 23322, 30907, 5713, 58292, 59692, 25988, 65079, 55490,
                    3500, 37341, 60152, 52215, 3245, 18067, 17066, 28988, 56727, 49110, 19010,
                    54646, 60978, 24613, 30958, 12659, 6821, 16744, 36084, 42345, 23171, 54176,
                    38826, 28889, 47970, 17179, 16253, 60604, 44203, 23149, 39194, 46790, 38585,
                    43, 24903, 15038, 5182, 25521, 48499, 45522, 5561, 54952, 2366, 50339, 57394,
                    50714, 65510, 51622, 63589, 4167, 61804, 13713, 44801, 65252, 36820, 26731,
                    36481, 4825, 11559, 46793, 38912, 17748, 15248, 65505, 305, 15008, 24256,
                    31166, 16656, 26991, 15370, 6735, 21394, 882, 49487, 18470, 18348, 47954,
                    61559, 24302, 22231, 11071, 42460, 21809, 38904, 43475, 21982, 524, 29377,
                    21366, 28734, 36029, 20730, 50909, 2367, 56830, 61161, 3362, 39132, 32802,
                    17790, 40324, 899, 15896, 55582, 59194, 16315, 23243, 39697, 4142, 12346,
                    39370, 64229, 35213, 7799, 10798, 61461, 48126, 55642, 1454, 56594, 34588,
                    2306, 29186, 8869, 30721, 3670, 56272, 9006, 34675, 37755, 52788, 59523, 18053,
                    21612, 21730, 17837, 14796, 64787, 13770, 57341, 46643, 17658, 54344, 11730,
                    33590, 20863, 36904, 52658, 34490, 40778, 24740, 39212, 26219, 10426, 52524,
                    61051, 17313, 11546, 55546, 56631, 56336, 11344, 48307, 64344, 58219, 54953,
                    52010, 8923, 54132, 16221, 28282, 8546, 65013, 18558, 2640, 10435, 32991,
                    34433, 23542, 44291, 5162, 12358, 31281, 34148, 42399, 50737, 40226, 2502,
                    28767, 17385, 44393, 10127, 20948, 4275, 14903, 26074, 62083, 11065, 49418,
                    14235, 38943, 36369, 43892, 5397, 56689, 23989, 54838, 43603, 56897, 6501,
                    42314, 60320, 21259, 55154, 6179, 26459, 65158, 27240, 5487, 61303, 13804,
                    1993, 46086, 25561, 35750, 54094, 11557, 8465, 1927, 61385, 61795, 47131,
                    61690, 35622, 20522, 26457, 55408, 39162, 51177, 46312, 50916, 60073, 40541,
                    53702, 2529, 60777, 42815, 21262, 25007, 36650, 43771, 22523, 64439, 39671,
                    4564, 22965, 33625, 29003, 28402, 64850, 12777, 15813, 19132, 41006, 35455,
                    45732, 38467, 9210, 49852, 27813, 42974, 63723,
                ]))
                .unwrap(),
                c: 202,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x87a78833e8bbf97b366cec1dfdea6afe7db2f45ddbebe89e530a61ee30916317");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_7() {
    let value = ComplexTestStruct {
        a: 7107,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            28503, 63450, 61337, 26522, 10224, 44515, 40100, 46378, 44123, 49466, 14003, 27129,
            63042, 15023, 45638, 11908, 42069, 43541, 29472, 20459, 42183, 33024, 54689, 39365,
            7158, 5019, 47064, 1649, 54062, 40831, 38263, 36150, 60162, 21254, 32949, 484, 49524,
            56459, 51410, 730, 64219, 49577, 49838, 8980, 50425, 50586, 55310, 6052, 3961, 28423,
            16730, 36165, 6970, 59360, 14661, 14961, 57760, 22234, 5361, 20732, 16199, 53463,
            21248, 25423, 60367, 17357, 3475, 53772, 8024, 24086, 2807, 28360, 27339, 57377, 49181,
            17695, 62695, 53373, 4699, 55233, 36546, 46814, 62156, 29580, 56818, 25735, 56968, 308,
            22303, 5016, 1312, 51381, 15336, 28032, 58854, 27486, 14975, 54770, 36749, 7429, 19819,
            20185, 33189, 52520, 54382, 2009, 27628, 33634, 33596, 13961, 42428, 53455, 22796,
            42770, 48141, 55940, 2113, 60496, 9418, 10446, 22503, 21685, 65314, 53378, 2430, 20330,
            49493, 61716,
        ]))
        .unwrap(),
        c: 254,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            112, 252, 241, 145, 149, 76, 255, 108, 92, 66, 246, 14, 247, 154, 103, 205, 15, 203,
            188, 153, 94, 185, 102, 23, 225, 205, 150, 110, 190, 90, 198, 146, 121, 80, 126, 157,
            183, 58, 250, 121, 215, 71, 251, 45, 26, 191, 190, 140, 25, 229, 28, 1, 168, 122, 232,
            239, 139, 244, 77, 0, 67, 11, 123, 31, 157, 1, 155, 132, 126, 233, 138, 118, 157, 177,
            254, 169, 234, 59, 232, 239, 1, 221, 0, 131, 164, 47, 159, 72, 203, 80, 31, 152, 191,
            172, 21, 232, 220, 22, 44, 160, 208, 81, 120, 111, 132, 21, 232, 207, 233, 77, 85, 246,
            208, 125, 102, 215, 97, 213, 181, 123, 198, 102, 97, 198, 114, 168, 107, 70, 70, 68,
            253, 120, 45, 178, 229, 228, 232, 112, 122, 116, 236, 106, 249, 179, 220, 77, 108, 72,
            112, 53, 32, 39, 194, 145, 102, 168, 80, 234, 89, 155, 157, 46, 132, 71, 184, 52, 149,
            32, 111, 170, 200, 217, 77, 185, 97, 62, 36, 10, 235, 94, 176, 185, 28, 116, 240, 13,
            114, 221, 207, 67, 177, 232, 56, 109, 222, 152, 169, 30, 45, 56, 46, 189, 176, 190, 68,
            134, 239, 177, 118, 177, 112, 224, 60, 171, 151, 120, 44, 245, 131, 74, 190, 14, 16,
            135, 17, 205, 180, 52, 238, 32, 189, 150, 124, 46, 164, 13, 22, 187, 5, 238, 245, 231,
            145, 85, 12, 39, 155, 139, 11, 159, 144, 14, 107, 35, 240, 64,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 25568,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                3159, 63745, 10161, 51898, 58731, 4007, 60075, 23199, 44591, 63017, 45554, 12544,
                55945, 61999, 63838, 4334, 37131, 38925, 5341, 25281, 34807, 3531, 46246, 20318,
                48180, 30050, 62120, 55928, 36969, 39504, 27300, 43600, 10053, 46106, 3764, 12249,
                42492, 34327, 41631, 5413, 32912, 41798, 40707, 22520, 30596, 60880, 31297, 50991,
                20095, 19656, 16281, 8359, 51110, 57419, 57725, 40434, 56627, 58608, 28014, 26382,
                33308, 2385, 31575, 13778, 15392, 44821, 12444, 40538, 18455, 52585, 36701, 44674,
                52395, 27749, 24948, 59870, 56150, 62635, 7434, 51677, 13791, 49894, 32199, 21467,
                18218, 39136, 23968, 20764, 30192, 5824, 9429, 45561, 43633, 50598, 3997, 21334,
                18259, 14349, 6008, 51278, 54637, 31518, 6833, 39462, 19228, 33033, 4022, 26347,
                9180, 23232, 62976, 38715, 54492, 6957, 32412, 65003, 9167, 47552, 44816, 60422,
                41716, 65330, 47449, 26956, 7287, 54738, 23107, 5449, 49010, 62202, 42831, 26020,
                52415, 44895, 32757, 48787, 34856, 60601, 47169, 23054, 28140, 47993, 32116, 19803,
                15364, 53357, 8767, 17450, 5795, 14848, 50862, 33224, 1590, 23063, 45232, 8548,
                16406, 21008, 31180, 23318, 19795, 21886, 32819, 24515, 19524, 37432, 34588, 51419,
                57022, 43367, 20231, 61186, 27350, 41854, 10306, 40294, 56446, 59288, 23601, 22256,
                5118, 24786, 3720, 13996, 1562, 54792, 28176, 58051, 64466, 29915, 28552, 21272,
                23633, 53846, 64260, 65253, 15175, 41497, 42484, 35363, 51660, 43473, 21630, 6625,
                42504, 30034, 8589, 43739, 44727, 54912, 61935, 28987, 31165, 32357, 7563, 54013,
                45460, 26025, 18626, 56619, 46928, 27909, 23553, 28892, 44404, 29248, 55366, 16884,
                40612, 48351, 1765, 64759, 1179, 24339, 61106, 36016, 22999, 13436, 35757, 29526,
                48427, 47359, 38637, 60235, 18249, 1250, 42326, 5890, 1102, 44020, 11933, 33700,
                40060, 38825, 32514, 18066, 10874, 5185, 28301, 7387, 1926, 54664, 18237, 60810,
                24183, 40251, 36953, 6231, 45055, 60376, 48208, 37085, 47410, 41570, 32800, 45625,
                291, 46623, 1197, 15786, 50652, 27563, 233, 20273, 3902, 38411, 25539, 12232,
                55362, 45984, 49202, 13366, 7525, 23147, 51986, 59814, 38828, 49001, 6270, 59480,
                12246, 37939, 20523, 53410, 55386, 57294, 15926, 4964, 11005, 38931, 28383, 14888,
                5925, 44958, 58652, 9860, 18718, 10869, 23431, 43050, 19288, 24049, 22950, 45726,
                40364, 22817, 13288, 27422, 11704, 9840, 11663, 43294, 12957, 20543, 7548, 58658,
                8764, 2756, 48922, 51181, 48330, 8595, 35568, 26025, 24094, 19433, 27178, 64214,
                51654, 34165, 35060, 36391, 21260, 20961, 33881, 57222, 16684, 58257, 39239, 6266,
                31989, 42202, 22551, 12939, 42683, 39370, 52939, 38445, 58162, 20725, 48943, 21005,
                38112, 27957, 55631, 5357, 5695, 64138, 23939, 34477, 39701, 40306, 7290, 55311,
                24487, 56668, 32680, 57092, 16315, 61067, 61526, 40989, 35937, 61068, 9953, 38909,
                26417, 45761, 47366, 63887, 55747, 6048, 49589, 2731, 31183, 48469, 48320, 9330,
                5987, 1537, 33136, 53045, 57740, 47976, 64829, 940, 5439, 22342, 53065, 49030,
                62419, 63103, 3285, 20353, 19216, 51527, 30187, 6807, 1335, 56504, 18433, 30284,
                53099, 30910, 49600, 56970, 51138, 5406, 56740, 52033, 28812, 50824, 44710, 65492,
                27073, 44926, 6578, 65446, 13779, 15217, 49465, 14161, 58211, 5840, 22106, 27368,
                52558, 46538, 53156, 5710, 27494, 59287, 3336, 17668, 6167, 39241, 41530, 42827,
                59468, 45220, 17133, 34007, 59927, 49838, 13268, 53443, 36123, 28770, 39749, 53745,
                2127, 8224, 38485, 4175, 65121, 28328, 22189, 15054, 46742, 37397, 30351, 4949,
                37871, 48650, 36935, 15440, 23807, 59766, 25355, 19625, 52328, 64819, 57202, 6200,
                61401, 39003, 3564, 50523, 10875, 18653, 452, 13350, 64046, 52069, 9472, 14934,
                40040, 60746, 54234, 37854, 25421, 28623, 59557, 2940, 18998, 43104, 10024, 996,
                47536, 63035, 26166, 8148, 22901, 54166, 22978, 33247, 29473, 45913, 33435, 49142,
                33998, 27767, 7761, 59054, 26018, 27007, 4980, 39032, 8107, 13465, 7733, 53618,
                45951, 7345, 1062, 6106, 20124, 47860, 12737, 25737, 37881, 32613, 17092, 17625,
                10838, 48585, 11851, 2415, 45887, 60030, 42111, 5472, 30310, 35881, 48525, 60236,
                1758, 13417, 41506, 19160, 39759, 54791, 1895, 25267, 16964, 10322, 38203, 48459,
                37389, 38480, 59438, 45940, 8878, 28535, 29446, 16440, 30735, 5109, 29660, 22128,
                24289, 38937, 3595, 57733, 20167, 52406, 39581, 13966, 20708, 37577, 9497, 55996,
                17906, 36341, 10032, 49568, 43206, 20138, 50037, 10444, 55866, 33304, 53721, 8496,
                23678, 807, 63961, 61821, 51216, 15420, 54032, 37124, 11195, 52940, 29568, 48867,
                7894, 34158, 23873, 784, 12188, 9671, 27497, 42222, 51263, 11758, 33139, 44359,
                36329, 55200, 21883, 16119, 33774, 20256, 16876, 38635, 33619, 25082, 15658, 56061,
                10501, 26895, 61663, 28675, 1689, 56029, 12156, 16878, 31086, 12299, 8245, 61246,
                55234, 8680, 51021, 58832, 35256, 35895, 6187, 6234, 50534, 63044, 50998, 49109,
                29163, 30782, 62573, 33090, 38557, 25971, 49333, 41563, 32672, 24631, 36209, 42832,
                5139, 50127, 15632, 58948, 53844, 60553, 14212, 1891, 41544, 16100, 17498, 40582,
                12336, 5529, 9543, 22893, 16110, 63735, 18720, 26368, 42742, 9780, 17094, 65004,
                43938, 47646, 13589, 57758, 58502, 65290, 19358, 6271, 49421, 46418, 63885, 15468,
                33646, 34691, 59814, 53842, 18684, 2851, 62577, 45224, 27741, 56271, 22149, 41796,
                41375, 7353, 12322, 37159, 44457, 28870, 60919, 44999, 33676, 1987, 31286, 33264,
                5938, 40539, 12674, 14522, 61538, 60311, 50797, 31007, 2277, 49276, 12033, 50145,
                50490, 9730, 64239, 54905, 45475, 9877, 57586, 4206, 27580, 1079, 36210, 20798,
                60058, 21373, 2038, 22924, 58077, 3752, 65410, 22977, 39163, 43658, 51693, 37650,
                15006, 36631, 47352, 33315, 54959, 62386, 16032, 39840, 58745, 21252, 54724, 58534,
                49498, 1985, 17780, 44053, 21749, 50071, 6542, 33964, 1258, 28038, 37845, 4207,
                45320, 1288, 58100, 62724, 33477, 19517, 6173, 29456, 44988, 16128, 47049, 36552,
                53589, 54324, 57797, 42274, 7931, 59302, 51831, 2552, 63988, 39872, 46155, 19485,
                29078, 56506, 33168, 8064, 12236, 12439, 1481, 58908, 4823, 11761, 29079, 42514,
                16323, 60167, 55525, 40512, 57925, 6484, 3862, 36353, 58216, 18618, 40768, 511,
                38992, 39832, 3814, 11328, 24960, 15298, 39025, 36460, 16208, 64631, 16849, 61044,
                52481, 28943, 4111, 40420, 47908, 4204, 52738, 4365, 5702, 10538, 9012, 59659,
                31600, 12908, 41907, 35957, 2406, 10914, 38840, 26418, 38847, 52779, 16583, 22222,
                47811, 19938, 33507, 22193, 19558, 56700, 15396, 21783, 61172, 1954, 58690, 3457,
                51312, 4396, 40250, 46453, 29102, 46037, 63715, 55245, 40874, 20105, 30324, 20596,
                24562, 52300, 29658, 57539, 49336, 47549, 13591, 21582, 23071, 2122, 39325, 12160,
                34657, 16626, 58770, 15560, 32672, 28173, 5507, 23128, 1584, 44496, 2053, 46958,
                44355, 21211, 37912, 64057, 34616, 49371, 37472, 7679, 32863, 4266, 47204, 58025,
                47410, 2624, 59309, 61463, 10482, 26898, 60175, 38144, 51557, 2550, 8547, 30960,
                5625, 32851, 59310, 20138, 35085, 25855, 22448, 34089, 56488, 43700, 2937, 27249,
                50324, 40203, 7469, 23701, 20246, 7372, 32671, 30916, 65071, 35204, 17366, 37375,
                45060, 46316, 61722, 27212, 58424, 5334, 1302, 52646, 4217, 26288, 56870, 16582,
                10979, 48125, 30976, 63798, 2802, 22638, 28351, 17595, 4938, 43437, 25934, 19584,
                50753, 12251, 32222, 46679,
            ]))
            .unwrap(),
            c: 201,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 99, b: 1628215471036396265, c: 1413903763 },
            FixedTestStruct { a: 231, b: 5698738874226375962, c: 3188253076 },
            FixedTestStruct { a: 59, b: 14328765771751950469, c: 2271288986 },
            FixedTestStruct { a: 4, b: 5090515859118947014, c: 2380632816 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 58300,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    3048, 42613, 32381, 56692, 8702, 52441, 40314, 769, 30947, 7232, 5656, 43734,
                    14258, 38723, 40145, 4170, 63951, 35536, 36036, 38882, 15545, 42006, 10566,
                    6211, 41336, 26279, 34746, 42808, 64475, 50592, 20508, 41600, 36424, 64738,
                    15553, 23977, 656, 51676, 41346, 11207, 61140, 45161, 51989, 3337, 37727,
                    64455, 62571, 23678, 55671, 9884, 15411, 15547, 48922, 32043, 32872, 6255,
                    12008, 17074, 41909, 63584, 4385, 35831, 46598, 4384, 10805, 49886, 5946,
                    61931, 49958, 35124, 58885, 26930, 42207, 54570, 37680, 27902, 61589, 35506,
                    40832, 50411, 48974, 21716, 61158, 34835, 20436, 1498, 39650, 57613, 55869,
                    27743, 33110, 14626, 21058, 17019, 46728, 18215, 17056, 16953, 42159, 26017,
                    6469, 8270, 42163, 7831, 13579, 4229, 18951, 22801, 56404, 5774, 51393, 733,
                    46919, 61057, 8292, 6681, 46712, 33067, 229, 19427, 13658, 62755, 42683, 45544,
                    1825, 20427, 58541, 338, 10956, 14540, 29555, 42543, 57102, 18486, 54133,
                    23293, 50392, 39702, 31556, 24954, 49620, 60764, 64394, 31018, 17722, 48827,
                    15448, 17583, 12569, 47874, 16510, 42184, 64201, 18935, 30462, 64304, 57622,
                    11032, 11505, 52773, 17243, 16689, 5963, 17146, 283, 39687, 27550, 16929,
                    31178, 7199, 26876, 64713, 51903, 35618, 53634, 50913, 34001, 4650, 12771,
                    9968, 16730, 46035, 46826, 36627, 36555, 17799, 15211, 46852, 25023, 34608,
                    40573, 253, 58961, 19219, 4774, 60887, 63062, 9597, 15719, 6439, 47024, 45239,
                    13884, 3515, 47990, 43303, 62935, 59104, 26575, 22207, 30815, 27627, 49894,
                    43631, 33856, 39731, 8957, 6143, 56309, 43226, 47087, 740, 2751, 49592, 20220,
                    13132, 14828, 21544, 9094, 64207, 21772, 21477, 34926, 39957, 62308, 22803,
                    28874, 17151, 10374, 37704, 8741, 27697, 54758, 63003, 60173, 30860, 50644,
                    10105, 4392, 52429, 57928, 54815, 44223, 35868, 36497, 63723, 50010, 55560,
                    42819, 31409, 60348, 33084, 42741, 36211, 11147, 48621, 11420, 57794, 1083,
                    13237, 5885, 56972, 8214, 38561, 34781, 19462, 64123, 63014, 1778, 39475,
                    26574, 62318, 36807, 55772, 52517, 16365, 18873, 58054, 37469, 20032, 16109,
                    40780, 365, 48768, 35462, 59730, 9644, 5391, 56980, 7558, 12415, 34967, 42572,
                    11405, 34973, 35126, 62604, 60077, 59737, 31654, 30318, 57807, 5818, 63881,
                    39332, 7089, 60217, 39857, 29822, 28905, 8899, 24482, 46273, 41144, 63384,
                    34740, 15862, 27948, 38797, 23517, 40157, 24127, 23568, 29716, 38388, 51911,
                    33432, 2685, 60620, 35527, 13416, 28823, 1816, 37954, 54727, 51800, 18817,
                    2113, 41793, 48997, 32631, 23679, 48604, 32817, 30627, 23231, 623, 28859,
                    58034, 11796, 50478, 2446, 59408, 6121, 54152, 37155, 41101, 22876, 1197,
                    29516, 21384, 825, 27421, 20484, 4332, 57246, 17183, 21826, 60018, 30180,
                    45654, 25018, 51777, 33125, 55757, 35745, 23990, 18339, 3449, 53494, 39271,
                    17546, 14387, 52475, 34982, 52718, 57312, 51958, 52456, 28368, 25897, 4745,
                    40085, 55692, 26570, 18109, 16578, 29711, 8449, 41043, 19379, 1218, 62854,
                    10889, 28891, 50199, 50548, 10538, 13079, 30952, 21321, 3173, 43172, 2721,
                    26379, 39113, 11192, 28809, 6820, 20240, 45853, 54170, 21500, 15380, 51674,
                    21142, 46311, 39500, 32408, 6893, 62556, 8056, 31173, 41399, 24689, 45256,
                    16746, 59937, 28693, 61722, 37466, 43158, 7895, 3542, 4891, 6668, 33811, 7072,
                    30750, 8683, 33610, 20429, 59926, 12456, 30518, 2468, 7615, 47374, 15903,
                    41061, 54377, 1440, 43475, 37487, 40192, 7269, 37211, 46230, 60503, 34308,
                    41331, 14920, 18406, 21065, 12375, 21302, 34452, 37721, 27012, 56537, 52587,
                    30375, 30064, 39426, 18730, 588, 59020, 26221, 11879, 10903, 13431, 16391,
                    45298, 31011, 33294, 58822, 30506, 52006, 9572, 62745, 54508, 37643, 42265,
                    21675, 30186, 65500, 46174, 32296, 55203, 15369, 195, 63888, 48596, 13328,
                    3534, 4308, 4734, 26206, 23047, 205, 3122, 42589, 6384, 11862, 58579, 32372,
                    31201, 20589, 9552, 47148, 34488, 36151, 28756, 42770, 28953, 36187, 44837,
                    2784, 59741, 65457, 22591, 51232, 15111, 27008, 58176, 32506, 25875, 48843,
                    33580, 8528, 24242, 5599, 36267, 59455, 31934, 59358, 57568, 15571, 53884,
                    31566, 35161, 44440, 61882, 41939, 24334, 30351, 44441, 42774, 9720, 9639,
                    57001, 21458, 39785, 58272, 64680, 50338, 3576, 37669, 33991, 20706, 18491,
                    61275, 25034, 806, 24152, 9419, 6185, 25059, 50375, 30129, 36729, 38417, 47687,
                    45925, 64755, 16128, 6572, 42725, 8097, 33985, 62547, 63812, 57567, 47317,
                    65091, 59966, 26389, 46684, 32933, 1231, 20969, 54516, 44025, 13756, 4395,
                    2033, 34171, 58691, 4730, 1257, 38279, 32370, 56536, 9519, 13739, 31889, 32855,
                    18790, 1250, 27128, 7879, 4166, 1539, 53930, 3951, 18718, 25398, 16623, 17178,
                    24369, 3682, 23934, 52752, 8576, 22286, 49354, 41477, 17781, 13946, 56018,
                    35238, 6811, 63389, 10115, 63722, 27290, 14471, 44204, 48337, 63138, 14667,
                    45896, 64734, 63729, 35426, 55834, 47002, 50165, 40783, 58388, 3885, 23280,
                    2182, 21228, 22754, 22810, 32635, 46, 17036, 65207, 35303, 4123, 26658, 41191,
                    32479, 36511, 6895, 10888, 44074, 39606, 37415, 64253, 27760, 25763, 34013,
                    23827, 57591, 41125, 64408, 30336, 51737, 19568, 23045, 8309, 15659, 10727,
                    21088, 58798, 12617, 8356, 40868, 10024, 19226, 12034, 19349, 51996, 41153,
                    17631, 54443, 15774, 63885, 46644, 61842, 9138, 45068, 19492, 20232, 37603,
                    47455, 24164, 42652, 19096, 28365, 55731, 29729, 58533, 39694, 49080, 19244,
                    5222, 24338, 14216, 60969, 37781, 51508, 33201, 9471, 42847, 4094, 38334,
                    43916, 46117, 60310, 13630, 53027, 13681, 28520, 32202, 34605, 52362, 54952,
                    23828, 97, 598, 16034, 26032, 54441, 58605, 44721, 40498, 60314, 25325, 53730,
                    36514, 53845, 54006, 61849, 24388, 50389, 33244, 12144, 10366, 37303, 55118,
                    61885, 47216, 36445, 55293, 19755, 17357, 1212, 44849, 6547, 57640, 26108,
                    60047, 61645, 12905, 41576, 54066, 16453, 11429, 20539, 28005, 20976, 57760,
                    65143, 34626, 44722, 10087, 29069, 2485, 45432, 46925, 41964, 54450, 40329,
                    40568, 639, 17882, 16020, 55477, 56819, 42338, 42700, 65307, 48254, 35658,
                    26874, 50170, 49482, 41682, 62824, 59295, 64924, 18451, 37312, 63771, 4473,
                    25995, 44902, 3812, 12594, 51596, 52265, 51690, 53656, 45900, 41673, 5933,
                    51688, 26290, 40899, 38946, 34531, 7568, 32596, 14676, 56389, 64879, 53605,
                    52022, 23007, 964, 31605, 28026, 60257, 52305, 23708, 49189, 53198, 11521,
                    53015, 59730, 61924, 11846, 32356, 13023, 53823, 48747, 41927, 59183, 37887,
                    20753, 48328, 61846, 19932, 58260, 14681, 40811, 15532, 1817, 41861, 41179,
                    3440, 54382, 12348, 8743, 14733, 28301, 16170, 8142, 18348, 28597, 44078,
                    63775, 18927, 57423, 28654, 56133, 33185, 36423, 62918, 40961, 21147, 12003,
                    62423, 16867, 42571, 38290, 11800, 20316, 6798, 60353, 19314, 62794, 26509,
                    13131, 57616, 30156, 40104, 56447, 610, 31743, 18651, 24779, 23152, 18609,
                    54870, 49060, 17218, 6860, 44286, 14466, 3051, 41548, 8256, 51831, 50019,
                    54451, 5860, 33625, 41328, 54215, 54472, 12830, 22766, 20516, 29035, 45546,
                    11338, 12086, 7833, 47011, 20384, 12959, 7188, 50943, 12845, 18395, 36494,
                    60007, 55656, 15210, 57074, 45855, 23650, 38263, 11597, 28965, 12309, 42468,
                    61292, 35858, 51545, 59778, 49269, 21194, 50158, 44612, 55787, 14035, 31458,
                    10900, 22512, 7412, 39073, 35924, 47269, 59360, 26315, 33989, 29747, 28118,
                    31110, 53183, 44289, 12383, 31047, 43045, 26911, 53397, 43864, 11019,
                ]))
                .unwrap(),
                c: 206,
            },
            VarTestStruct {
                a: 64861,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    53821, 21287, 61784, 10863, 57016, 13182, 12062, 55627, 41906, 35130, 33801,
                    61274, 61124, 40508, 60113, 1117, 58611, 49359, 26636, 33017, 2062, 29488,
                    50408, 14583, 34576, 20339, 54694, 62917, 20972, 38506, 47348, 23833, 55317,
                    32905, 46311, 41195, 31670, 47587, 65016, 7309, 62110, 25019, 28161, 30065,
                    53009, 724, 56100, 12610, 22175, 36818, 1755, 57403, 3619, 14205, 54266, 7092,
                    43184, 39780, 52261, 59158, 930, 22839, 55998, 63444, 43770, 37061, 42422,
                    3430, 3093, 55258, 38309, 7617, 20617, 10791, 43578, 18109, 32142, 20727,
                    19448, 20425, 29789, 43945, 22800, 2770, 34212, 2077, 58799, 33886, 11689,
                    18433, 52033, 19479, 48575, 65177, 11573, 17371, 32301, 42133, 33152, 34659,
                    18241, 42444, 60559, 15784, 40246, 65380, 38190, 18982, 27522, 58857, 23081,
                    9869, 56184, 56992, 148, 30473, 19119, 62588, 61500, 41015, 27919, 37601,
                    46394, 33617, 11547, 15692, 42031, 40371, 60942, 52831, 42219, 45307, 9023,
                    37221, 46866, 53577, 63449, 35773, 20138, 26770, 55967, 48694, 15210, 24900,
                    35513, 58063, 17667, 51235, 13970, 59859, 9225, 35538, 36862, 6545, 37949,
                    17957, 54118, 51939, 46171, 8247, 53586, 43599, 18417, 51013, 25226, 58535,
                    18749, 34992, 731, 14538, 8611, 35564, 59699, 10893, 30709, 53489, 63453,
                    64569, 5790, 15961, 1283, 2774, 42108, 15122, 45063, 43123, 29790, 60959, 6928,
                    7728, 37112, 22465, 45136, 61817, 43339, 30452, 42917, 35256, 21031, 50639,
                    55459, 28088, 22760, 53148, 36422, 45815, 29554, 63013, 56428, 33390, 62345,
                    27069, 18033, 22193, 62559, 65416, 38282, 39894, 8073, 35564, 15967, 42365,
                    29602, 26153, 40721, 15132, 23696, 58930, 26254, 51607, 5622, 837, 59089,
                    13578, 15007, 11669, 27876, 49122, 30670, 33772, 3278, 50460, 61264, 13160,
                    57203, 61155, 29754, 21658, 35901, 8896, 52627, 52660, 57557, 38570, 1261,
                    59325, 49549, 63145, 24680, 48951, 28851, 8605, 40228, 62985, 48214, 23831,
                    62666, 54393, 60501, 9599, 825, 45108, 33840, 52103, 38424, 10588, 58473,
                    56643, 31898, 47175, 22567, 49721, 55866, 51387, 10732, 44848, 46139, 34338,
                    59833, 9393, 20521, 23792, 710, 39212, 28131, 45566, 43541, 62533, 18237,
                    11839, 47913, 49271, 30408, 37431, 27089, 63767, 48740, 28492, 12244, 39862,
                    49419, 53691, 8842, 64466, 48580, 32102, 56888, 61259, 32, 39449, 15543, 60485,
                    6490, 13458, 59374, 15140, 35699, 12651, 26948, 21170, 37854, 43953, 47887,
                    26416, 53538, 51614, 13928, 1704, 52993, 620, 41390, 59888, 42255, 57332,
                    55527, 52484, 7259, 35269, 28488, 56829, 51189, 57780, 24859, 49509, 46038,
                    20573, 58533, 62098, 11566, 2043, 55235, 7494, 26807, 52612, 31197, 42374,
                    64370, 64103, 24445, 38722, 29828, 35879, 22221, 29230, 9860, 42550, 47477,
                    10064, 14022, 54688, 39913, 35588, 52918, 7250, 23129, 51078, 10829, 40354,
                    47518, 23231, 46445, 2679, 60194, 47722, 17123, 7894, 20911, 1379, 10382, 178,
                    45228, 42190, 22685, 61675, 22319, 13971, 25534, 1912, 17456, 8042, 61497,
                    15519, 53033, 45973, 512, 15525, 41666, 41472, 30202, 18938, 58566, 59547,
                    18878, 62027, 64544, 8847, 58506, 6062, 56758, 39271, 50723, 60124, 35093,
                    2602, 58148, 62752, 47297, 23944, 25135, 18446, 31967, 48013, 16956, 57159,
                    22932, 16155, 27823, 950, 33607, 38625, 51811, 50598, 29756, 8725, 63009,
                    49154, 8901, 682, 29165, 27339, 38005, 81, 62273, 62786, 3026, 45807, 24489,
                    29826, 35563, 42013, 30369, 34570, 14631, 58272, 42378, 55580, 1331, 53309,
                    52149, 39064, 39442, 56936, 4050, 27960, 28415, 28468, 43850, 35410, 15861,
                    7565, 40868, 43688, 50382, 64833, 6081, 6613, 12503, 5707, 17555, 43108, 20708,
                    49843, 57062, 35119, 54331, 45963, 19749, 37364, 65360, 658, 29490, 41716,
                    41295, 5343, 39463, 33911, 54482, 27767, 16704, 16847, 56022, 41257, 64810,
                    9214, 12241, 45116, 49039, 21133, 34921, 50639, 31187, 41383, 3323, 6410,
                    18005, 14687, 17418, 8694, 125, 37525, 58478, 17951, 52007, 1654, 25316, 13874,
                    4900, 50407, 44026, 24813, 28321, 30896, 27431, 6915, 27388, 6829, 51412,
                    19443, 29171, 10275, 21333, 15104, 44273, 49233, 43422, 25275, 5038, 49047,
                    7056, 5953, 33334, 38721, 21763, 55424, 23479, 16655, 35874, 45496, 45262,
                    42749, 18652, 46476, 30892, 65358, 1664, 62039, 3273, 9609, 57923, 35588,
                    16843, 54270, 52019, 6933, 26705, 31664, 35121, 30891, 12393, 26213, 24681,
                    19355, 26194, 28402, 37403, 46172, 42813, 11681, 4137, 40447, 8792, 32349,
                    45783, 38061, 58541, 2737, 4976, 63959, 64152, 27986, 41034, 56163, 1089, 7238,
                    15127, 20380, 46894, 20990, 30542, 37736, 9444, 41751, 51840, 24008, 6533,
                    29993, 5528, 36577, 60455, 11890, 59404, 49796, 56064, 45140, 57913, 45675,
                    11428, 39286, 10108, 35190, 43384, 10537, 52874, 1541, 24770, 26648, 33446,
                    41258, 7538, 42323, 64671, 6131, 54770, 40066, 8356, 5989, 63191, 10801, 27667,
                    33506, 11195, 46848, 31796, 61936, 13652, 33428, 21960, 18397, 23835, 23758,
                    14609, 59220, 12227, 13928, 15341, 3873, 48662, 47525, 50771, 16455, 1080,
                    63792, 37190, 15721, 3142, 26763, 13127, 4589, 53791, 25240, 37231, 62850,
                    28757, 39921, 3124, 60378, 40516, 26884, 19237, 41793, 21718, 49320, 12272,
                    12326, 8502, 37000, 15658, 41546, 7850, 28951, 24389, 38332, 7112, 57312,
                    22099, 57536, 5999, 48334, 11649, 57573, 37975, 50976, 65020, 14313, 60601,
                    4342, 39244, 25932, 63704, 52255, 19254, 44666, 12244, 3901, 9495, 47684,
                    38948, 39084, 18134, 30243, 34241, 58448, 46028, 36053, 42256, 1697, 27169,
                    61651, 39304, 51846, 26383, 23993, 41230, 11224, 2327, 6369, 63969, 45243,
                    38801, 9658, 29957, 65235, 61762, 52154, 49714, 39224, 23216, 31769, 1374,
                    59031, 25313, 6344, 3259, 1345, 59045, 43712, 30018, 59676, 55732, 38676,
                    22856, 17694, 519, 11989, 18768, 42426, 22907, 35908, 6462, 63528, 59295,
                    35314, 7101, 41547, 19410, 38605, 61334, 17848, 20853, 63552, 2271, 29965,
                    60986, 30376, 61045, 9360, 34212, 46628, 47513, 30349, 57698, 13888, 63863,
                    57076, 23704, 56993, 891, 54323, 42471, 1980, 14629, 21807, 4016, 31511, 25097,
                    52239, 4692, 49135, 17913, 19637, 36245, 43277, 22799, 55685, 27240, 36793,
                    1538, 13176, 15169, 24909, 22794, 20038, 11507, 26498, 51923, 60473, 16482,
                    53541, 2044, 16451, 17204, 21734, 21300, 41717, 46957, 24638, 2136, 4834,
                    50590, 19328, 40332, 8279, 41632, 9273, 29693, 56189, 23227, 3795, 15623,
                    13642, 29886, 9379, 26420, 26422, 59036, 35798, 62220, 21329, 57893, 26104,
                    37887, 19204, 53440, 38118, 32637, 17542, 5591, 14765, 23609, 12333, 28150,
                    30662, 63943, 58130, 24222, 51813, 57776, 39186, 10977, 36846, 64497, 39539,
                    1614, 14549, 46499, 32013, 22907, 31963, 35780, 8839, 63478, 19284, 47655,
                    52229, 18060, 31169, 42784, 34787, 30285, 31981, 11499, 39141, 34386, 55739,
                    17684, 3753, 15131, 11828, 45827, 15433, 43549, 36810, 17557, 50354, 17964,
                    43772, 31112, 458, 60991, 45080, 50393, 11082, 47601, 18684, 14044, 31047,
                    47948, 8621, 63782, 33861, 9587, 21167, 59473, 62391, 52564, 5483, 20774, 5110,
                    62818, 61681, 10890, 64626, 23828, 64344, 15371, 37513, 30346, 12289, 26933,
                    61878, 11245, 25700, 31333, 45396, 52, 57578, 33653, 50766, 39788, 29614,
                    30167, 42494, 57639, 15559, 41946, 15097, 41266, 36997, 7839, 54471, 33651,
                    43703, 42980, 17516, 27180, 36167, 18900, 29540, 62379, 29070, 17284, 22796,
                    18172, 21709, 25939, 8259, 65487, 48319, 56348, 61355, 39927, 43031, 11152,
                    25360,
                ]))
                .unwrap(),
                c: 111,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x1e7461b40d33feff5e512edc9beed8bf33a7a5594423c131897f12e0e5ec37d2");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_8() {
    let value = ComplexTestStruct {
        a: 22011,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            7085, 55600, 36311, 62044, 16166, 44872, 42545, 27688, 20688, 59144, 7216, 58148,
            62161, 41429, 37065, 21902, 42212, 24419, 28216, 1201, 19207, 53797, 8862, 54338,
            17163, 18703, 56112, 25945, 62146, 51620, 61087, 64269, 56024, 23664, 16568, 40191,
            14377, 59343, 7803, 25792, 44274, 52276, 33611, 41744, 46160, 1084, 59159, 8257, 6796,
            4073, 32649, 13737, 47956, 48296, 34275, 4868, 52537, 63782, 21735, 5932, 22660, 33648,
            28893, 417, 11083, 9876, 49750, 26210, 10577, 10486, 23681, 30285, 4426, 52173, 24704,
            21516, 1699, 10434, 47586, 30215, 19823, 37691, 25442, 3684, 5155, 40845, 14007, 11294,
            25378, 37501, 32935, 42212, 54849, 59719, 15564, 186, 41421, 58013, 49647, 43158,
            21285, 28145, 32455, 28103, 27046, 63076, 54224, 16520, 55078, 38541, 35495, 64119,
            1325, 38732, 4425, 30045, 8029, 40013, 9548, 55423, 45581, 42362, 17634, 29686, 11387,
            35308, 64640, 36941,
        ]))
        .unwrap(),
        c: 130,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            195, 159, 229, 39, 239, 17, 11, 125, 170, 254, 208, 104, 128, 140, 244, 39, 205, 255,
            123, 192, 178, 109, 10, 85, 119, 217, 117, 199, 100, 199, 48, 45, 4, 5, 53, 139, 26,
            127, 34, 30, 224, 31, 241, 254, 9, 228, 239, 19, 233, 224, 121, 65, 33, 213, 129, 205,
            8, 35, 91, 253, 174, 36, 229, 253, 13, 167, 122, 192, 147, 242, 199, 138, 238, 93, 143,
            18, 218, 80, 92, 175, 38, 42, 130, 24, 213, 217, 74, 83, 104, 68, 36, 197, 44, 141,
            233, 121, 81, 242, 111, 51, 242, 43, 12, 34, 170, 11, 162, 216, 91, 36, 171, 45, 208,
            229, 30, 247, 131, 235, 75, 216, 15, 44, 233, 235, 64, 25, 201, 162, 224, 186, 209,
            173, 126, 72, 251, 103, 227, 23, 167, 133, 45, 62, 125, 237, 129, 217, 162, 107, 131,
            53, 186, 208, 123, 249, 97, 195, 66, 221, 180, 98, 118, 100, 209, 81, 204, 172, 2, 128,
            134, 54, 232, 136, 214, 236, 13, 26, 220, 221, 25, 218, 8, 199, 211, 165, 58, 19, 43,
            100, 241, 104, 19, 141, 44, 129, 87, 101, 27, 7, 82, 136, 26, 189, 63, 158, 222, 220,
            60, 141, 102, 99, 138, 40, 106, 9, 8, 225, 85, 163, 142, 160, 21, 71, 232, 250, 23,
            180, 137, 136, 209, 130, 167, 153, 204, 48, 94, 187, 241, 111, 169, 7, 68, 168, 4, 93,
            232, 53, 228, 35, 192, 84, 159, 8, 127, 112, 137, 162,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 7836,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                49736, 48943, 7124, 49000, 48516, 45740, 16646, 41270, 28881, 33139, 26885, 1078,
                37364, 45582, 59250, 3714, 65312, 3782, 50091, 44050, 49446, 50377, 6951, 50835,
                39780, 35439, 62719, 23572, 63505, 54153, 32982, 805, 46189, 53637, 15784, 54574,
                53267, 10042, 16277, 48643, 8438, 32561, 5813, 49240, 31367, 50501, 6218, 22417,
                65225, 34792, 50167, 28424, 8188, 36289, 37694, 6662, 48744, 29566, 29185, 52468,
                62700, 12828, 45524, 61318, 44933, 44545, 20650, 23589, 35811, 36593, 21732, 1739,
                31277, 17136, 54282, 45063, 44669, 64807, 37588, 27546, 6653, 60117, 44131, 65389,
                15501, 28872, 39453, 1033, 3899, 50958, 42027, 14617, 20851, 15369, 39301, 58635,
                19313, 1888, 37013, 37007, 38664, 47862, 13102, 37423, 19359, 62905, 42735, 60486,
                29972, 40290, 8540, 29567, 18936, 21486, 34309, 28186, 25037, 33578, 7616, 12426,
                32433, 53884, 43133, 20356, 47154, 30694, 30396, 57149, 63304, 27742, 58576, 39506,
                32901, 63691, 62142, 24335, 722, 26631, 8422, 29887, 1667, 46670, 9072, 17572,
                40387, 21034, 10, 12481, 1433, 21694, 53708, 56222, 57566, 37642, 51921, 60997,
                656, 52641, 55706, 55900, 18127, 63895, 2910, 37087, 17285, 16986, 26041, 55036,
                6495, 52343, 7505, 43796, 5877, 35379, 11364, 19217, 56855, 51629, 14654, 33052,
                47303, 19497, 25022, 2237, 33011, 36434, 18586, 49994, 63979, 60061, 25658, 21040,
                26345, 33487, 53977, 55997, 4245, 1795, 38509, 33875, 41213, 31057, 29935, 39552,
                40015, 39102, 23836, 53621, 33942, 60231, 8060, 48650, 28825, 28747, 18634, 53717,
                22712, 49339, 41738, 36806, 27464, 8586, 18926, 38331, 7902, 59769, 449, 54921,
                26432, 32709, 27936, 61146, 992, 55603, 54633, 60482, 1012, 21710, 62064, 47451,
                59124, 26435, 44623, 2695, 63024, 51468, 26257, 8072, 6409, 38703, 13736, 48876,
                22136, 3876, 3820, 46413, 35638, 65108, 45067, 48495, 58527, 48857, 49258, 42889,
                14453, 15512, 37281, 30737, 61109, 45596, 88, 60838, 65189, 51181, 56757, 6731,
                10852, 64704, 5544, 36925, 63441, 43663, 57806, 27641, 32071, 16299, 21537, 46234,
                34363, 49691, 15758, 51279, 48990, 52064, 42413, 42246, 13153, 34846, 21674, 12660,
                41219, 10534, 23615, 48513, 51869, 26733, 40053, 24402, 11306, 65396, 62472, 42161,
                12893, 4017, 25608, 2914, 54555, 36394, 6601, 7316, 35072, 6289, 12235, 14192,
                47738, 64029, 44431, 3193, 59190, 36878, 63540, 40956, 46781, 37120, 45232, 20452,
                59882, 30400, 11273, 5346, 54666, 29412, 2084, 10393, 23909, 62384, 50003, 41848,
                56373, 51066, 41555, 47113, 24582, 39067, 47840, 50931, 64915, 56963, 61483, 22718,
                28954, 22412, 25728, 34809, 13562, 45145, 36193, 40610, 45713, 25289, 27205, 54937,
                60330, 10240, 51405, 1629, 25686, 55601, 25004, 12394, 34736, 18539, 30169, 59203,
                27860, 30031, 9786, 3829, 50961, 5131, 7598, 51756, 56225, 9540, 53836, 40900,
                57544, 11876, 16453, 13289, 3811, 13772, 3856, 22311, 50552, 25618, 54134, 3480,
                47247, 13761, 24626, 38548, 12845, 9214, 35229, 62303, 32567, 36664, 29381, 3474,
                36116, 5832, 26011, 35688, 12787, 55582, 33149, 24229, 28380, 40938, 53213, 12125,
                25256, 4912, 17233, 60449, 47956, 7773, 58383, 49222, 40296, 45862, 29600, 26153,
                26264, 53284, 23122, 45687, 10328, 46461, 248, 19935, 32495, 18795, 47975, 1228,
                9937, 57707, 9930, 4679, 33798, 26237, 20785, 44662, 48646, 17638, 46113, 27774,
                23655, 44569, 7923, 57179, 23724, 38611, 27516, 39433, 63130, 51152, 11001, 45674,
                58572, 64507, 9164, 8387, 59590, 28910, 26501, 39287, 920, 48614, 15235, 59830,
                10942, 64594, 61841, 11306, 64566, 65304, 37384, 17507, 35472, 62320, 3676, 39043,
                65102, 41810, 31694, 47560, 59561, 25198, 5301, 18273, 55040, 7234, 26962, 51998,
                2867, 8265, 60258, 59708, 8682, 37136, 59370, 55722, 30197, 29807, 22748, 52090,
                15467, 35308, 138, 57419, 54412, 15468, 19699, 40001, 33570, 46462, 43803, 48268,
                38879, 17923, 9714, 25546, 31233, 2419, 62313, 9092, 29932, 27287, 27223, 44186,
                11858, 14873, 33699, 4336, 26869, 19856, 11381, 61109, 53750, 39699, 28696, 47898,
                37513, 12976, 7573, 67, 63009, 19027, 21599, 36944, 46350, 27657, 40541, 62797,
                60899, 16628, 51599, 12281, 56371, 60974, 53411, 36263, 7323, 55517, 62946, 18418,
                13678, 480, 14935, 62212, 21653, 6214, 5317, 13977, 45066, 43906, 18753, 11432,
                56910, 18111, 40049, 30251, 10770, 30245, 58850, 20711, 35358, 19187, 61934, 26029,
                39706, 33482, 31580, 12760, 52480, 6703, 40369, 27339, 46749, 59376, 37938, 15091,
                20495, 13630, 7376, 9318, 34087, 46183, 40722, 36325, 14940, 6993, 4789, 43103,
                18367, 20512, 64142, 4248, 38680, 5791, 5224, 64561, 29959, 11316, 6761, 12814,
                34594, 36397, 42480, 32460, 32140, 759, 44880, 65372, 51988, 64125, 63207, 50272,
                62261, 7151, 46615, 2123, 28209, 57153, 16206, 34063, 43806, 61824, 13206, 49303,
                29754, 4103, 18297, 52709, 34764, 43540, 47148, 54386, 50411, 11654, 31728, 60624,
                8092, 63699, 6296, 39615, 46803, 45994, 61858, 26515, 57791, 18286, 35210, 50040,
                2147, 31, 26213, 44097, 40734, 8849, 48574, 15785, 58619, 20643, 9780, 59492,
                37254, 48918, 23351, 45815, 53779, 36880, 20018, 17092, 4366, 44652, 17297, 5103,
                7757, 37376, 41613, 38678, 52419, 57637, 34754, 14383, 35563, 54935, 39118, 14953,
                25379, 32670, 54538, 6995, 62617, 34438, 10129, 31794, 57156, 59196, 20567, 4519,
                10988, 11662, 1966, 42150, 20154, 53070, 21581, 18373, 11409, 58700, 332, 5486,
                58970, 19758, 41910, 23088, 58468, 9579, 32439, 2949, 15144, 635, 10286, 31875,
                59231, 55859, 47822, 22632, 32437, 21033, 64256, 28572, 36045, 41120, 25008, 50445,
                3823, 9786, 19888, 31723, 27358, 43814, 23287, 14119, 31437, 46616, 29057, 25583,
                26029, 20871, 64333, 27695, 51372, 10917, 13612, 54572, 49476, 46659, 45948, 13226,
                20078, 15429, 56090, 17133, 64417, 18963, 8843, 24835, 56525, 10134, 48048, 56435,
                2501, 30856, 53690, 36696, 56557, 9808, 60916, 53013, 48402, 59487, 60511, 45418,
                33119, 50554, 4599, 49101, 40693, 52061, 13557, 38298, 35535, 36534, 24418, 59546,
                33049, 39730, 60450, 50101, 43874, 16329, 54467, 58370, 50582, 64527, 33768, 43693,
                28157, 16910, 6953, 33349, 851, 59035, 13105, 51039, 54805, 20922, 44078, 41120,
                1124, 19325, 48607, 443, 53587, 18766, 4037, 10430, 48833, 1272, 11155, 46808,
                41359, 36986, 37674, 34321, 14349, 13027, 8797, 50909, 31604, 24003, 17064, 8857,
                54249, 58458, 1760, 61258, 20594, 29995, 26408, 35931, 19114, 63783, 6564, 51704,
                55133, 7531, 36298, 48016, 23622, 61178, 14167, 20863, 11598, 35325, 40981, 57574,
                45346, 14604, 629, 43127, 55802, 15296, 21112, 45918, 61588, 24442, 60311, 7817,
                51938, 16872, 64968, 1107, 47715, 47480, 17412, 46811, 36008, 24716, 1174, 55717,
                52980, 41191, 35459, 19339, 49091, 854, 11154, 4253, 7224, 58507, 35863, 59933,
                36385, 52624, 7426, 63147, 58177, 17432, 19837, 1781, 32546, 31744, 4374, 16284,
                29058, 32153, 26297, 58437, 26368, 18351, 51995, 60647, 16997, 36038, 11651, 61636,
                14975, 2115, 1532, 3710, 12828, 52039, 39570, 5694, 58906, 54282, 38298, 973,
                51891, 11964, 23155, 34175, 44921, 62597, 3862, 53176, 10735, 21527, 36473, 54555,
                63494, 32357, 7179, 54197, 46194, 49844, 31877, 1378, 47854, 12128, 16868, 45442,
                57180, 15516, 12359, 51150, 35994, 20057, 1649, 33566, 3697, 44503, 14233, 32010,
                9335, 52063, 56133, 49844,
            ]))
            .unwrap(),
            c: 233,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 69, b: 15609617436236794032, c: 3809259975 },
            FixedTestStruct { a: 69, b: 7971798406092734939, c: 3668485261 },
            FixedTestStruct { a: 8, b: 17928155374184830895, c: 1371835030 },
            FixedTestStruct { a: 235, b: 2595862440641554746, c: 1373084820 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 1409,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    25664, 4325, 3422, 49716, 45399, 4410, 4719, 30050, 53424, 16974, 32114, 34528,
                    32669, 22829, 38284, 2148, 42100, 38988, 3706, 35721, 63028, 12863, 48293,
                    61507, 11622, 30288, 50433, 37615, 65290, 27273, 41290, 13071, 9986, 5847,
                    60302, 10813, 37049, 60733, 21956, 52730, 52592, 64130, 20125, 29314, 36721,
                    43060, 12789, 49900, 12152, 44301, 9518, 60831, 32893, 33127, 16758, 16288,
                    21480, 22524, 36653, 13668, 46783, 24063, 3070, 37020, 53938, 46686, 59343,
                    8965, 22838, 50034, 41133, 14512, 50825, 3917, 30770, 8772, 57789, 56265,
                    10302, 23609, 3736, 53952, 59847, 56114, 58688, 48299, 37002, 2539, 38095,
                    36634, 56602, 10569, 65395, 15108, 49126, 53266, 10950, 57660, 805, 49931,
                    63543, 711, 44764, 23071, 11344, 14313, 29542, 38181, 41378, 13290, 54115,
                    19875, 6842, 44357, 53898, 7500, 42756, 2272, 20224, 34230, 57134, 12499,
                    60451, 18160, 21406, 25367, 16373, 27092, 31101, 58422, 27997, 25789, 2483,
                    25774, 3830, 46520, 45524, 26167, 16918, 12148, 37533, 34659, 38834, 59005,
                    33173, 150, 25288, 13242, 7362, 52420, 55674, 51300, 16423, 36022, 13090,
                    60014, 52999, 34347, 34593, 23062, 21126, 65264, 8707, 19774, 17374, 2818,
                    54860, 54122, 7211, 14788, 26832, 27577, 31250, 24174, 45353, 47147, 554, 1770,
                    15096, 58318, 56237, 37821, 58081, 53615, 1426, 54866, 29277, 16683, 18715,
                    54738, 4390, 44132, 3232, 38483, 50787, 44412, 53308, 31221, 46459, 63772,
                    39363, 9436, 31315, 13779, 56453, 51217, 61078, 46975, 34575, 59471, 48641,
                    19115, 51966, 51871, 15709, 43405, 14459, 32244, 57513, 28931, 4483, 50757,
                    32930, 16070, 17379, 25579, 2785, 20175, 20671, 19956, 48578, 7756, 34102,
                    54078, 8310, 60188, 56919, 39106, 11611, 2819, 43812, 25915, 19098, 18022,
                    15558, 24710, 8094, 6181, 34683, 39723, 20743, 45582, 37996, 25115, 49153,
                    63299, 18342, 6949, 25379, 23238, 28439, 58607, 47081, 40710, 32497, 4361,
                    42996, 60546, 2022, 57096, 38685, 62136, 34615, 7535, 17997, 29209, 56838,
                    13469, 32225, 30791, 65315, 27386, 6016, 63260, 27358, 49837, 27013, 39078,
                    19323, 41660, 24039, 39973, 5359, 4884, 25660, 16710, 58309, 49737, 50887,
                    27419, 48271, 12493, 49526, 60661, 37819, 52928, 45244, 50737, 48093, 50573,
                    10627, 9220, 10650, 36962, 45505, 20201, 51984, 53749, 33662, 49724, 64657,
                    17878, 13345, 36884, 56261, 54991, 20665, 11559, 49348, 51248, 30954, 24851,
                    10298, 33856, 49131, 45776, 1296, 23937, 38562, 26546, 13728, 52365, 2937,
                    6579, 9542, 12273, 61471, 28679, 64775, 18922, 8814, 5349, 3052, 41920, 23719,
                    36585, 39030, 63413, 29323, 19972, 47487, 18921, 8038, 31564, 60795, 61667,
                    58329, 57142, 52865, 2122, 16247, 58317, 64231, 3165, 15232, 31523, 1522,
                    57035, 61084, 34586, 31786, 14950, 56351, 51846, 46952, 14079, 26056, 9953,
                    29124, 26812, 17850, 57845, 61861, 58836, 53787, 41108, 64597, 20493, 1887,
                    57879, 50284, 14294, 28123, 60975, 22793, 27841, 21640, 39556, 52598, 45191,
                    52032, 21609, 34720, 20374, 15154, 16651, 51031, 51949, 11864, 28866, 20234,
                    46830, 15115, 28766, 12607, 63807, 45162, 31247, 20338, 46899, 40074, 9498,
                    23327, 41827, 55153, 13465, 6955, 46914, 12354, 29906, 47873, 61519, 63900,
                    49585, 41345, 35282, 61175, 54115, 37338, 6897, 65252, 24243, 6592, 25405,
                    30930, 47940, 62122, 29016, 27798, 4821, 26326, 58638, 35940, 12640, 64524,
                    50055, 32698, 15864, 4787, 7898, 33376, 54892, 8158, 48377, 63431, 39033,
                    45362, 45837, 52807, 27013, 56187, 58100, 35975, 28123, 30891, 57036, 64881,
                    59026, 21370, 15910, 65215, 20061, 4719, 41357, 18810, 15671, 16038, 22292,
                    52695, 56507, 46273, 49437, 24513, 25660, 29208, 6752, 26913, 28952, 61831,
                    62959, 29364, 16095, 32861, 8311, 3154, 46616, 33876, 39524, 31815, 22779,
                    32797, 39195, 15714, 16359, 33933, 62039, 7999, 52322, 5403, 28022, 58848,
                    27066, 38306, 3905, 25395, 3481, 54924, 29877, 46968, 7755, 58032, 34554,
                    47599, 5322, 28617, 54862, 28816, 26113, 26814, 16396, 55185, 30053, 46156,
                    30800, 45060, 38400, 38872, 13199, 65501, 43895, 364, 54150, 53180, 53548,
                    59966, 59089, 41197, 57312, 55354, 57805, 50172, 38999, 4659, 239, 22614, 913,
                    21868, 6516, 21053, 54885, 58806, 52169, 55468, 8028, 22680, 19188, 46378,
                    40361, 38325, 57, 14773, 30319, 62087, 61826, 43778, 57276, 25578, 24837,
                    56521, 17690, 6757, 9884, 48052, 60389, 3538, 30232, 51687, 40832, 46497,
                    27335, 40433, 2583, 43045, 21452, 7972, 55223, 6831, 725, 36820, 49512, 13947,
                    57118, 11592, 4009, 15643, 55686, 2268, 54599, 35882, 62932, 39602, 17137,
                    56774, 61448, 19815, 10751, 44657, 19211, 26699, 8407, 29262, 49839, 34163,
                    33530, 42892, 32070, 56007, 31797, 34866, 18986, 65229, 63441, 44513, 32584,
                    34256, 23346, 26428, 31399, 18405, 57362, 15405, 48061, 8559, 43354, 32208,
                    7740, 23306, 36452, 21438, 29318, 20378, 21693, 2843, 25409, 51743, 50889,
                    38214, 60393, 18775, 26406, 63512, 30165, 8676, 20025, 58718, 20352, 62814,
                    47414, 395, 17736, 57242, 40502, 31708, 18543, 9978, 32954, 32234, 35184,
                    13915, 61111, 52169, 15851, 47805, 25829, 33449, 37394, 32645, 31572, 58979,
                    35259, 51829, 37551, 30453, 2293, 31493, 57286, 55437, 16400, 11784, 52732,
                    59377, 20183, 6877, 34610, 24179, 40179, 52669, 53705, 55490, 30991, 61159,
                    48653, 62240, 30130, 45105, 45290, 20783, 39674, 2085, 62283, 32245, 48880,
                    49139, 31964, 64598, 23148, 6853, 58255, 4146, 37349, 27964, 32823, 49188,
                    41499, 43237, 63221, 37074, 27350, 48081, 54777, 8604, 62663, 62585, 40763,
                    37228, 11050, 33898, 8617, 40056, 39959, 59229, 37150, 26127, 59723, 61868,
                    40226, 63876, 46294, 17255, 7425, 23529, 64779, 39533, 40388, 11343, 53089,
                    11848, 19298, 45657, 811, 8528, 3015, 1432, 13023, 64109, 13459, 49341, 57266,
                    3766, 59551, 33722, 34950, 56196, 28867, 61475, 30579, 21881, 56397, 26300,
                    32197, 20176, 45120, 19310, 27531, 31475, 44961, 37139, 55102, 33707, 34518,
                    560, 20550, 30572, 51413, 40944, 43955, 3179, 37044, 36674, 48681, 2690, 32355,
                    12729, 61190, 2485, 33636, 23237, 54741, 56863, 43214, 25054, 12721, 53535,
                    41397, 53085, 33375, 53793, 22812, 4982, 63171, 62221, 17262, 49581, 38300,
                    27936, 27988, 54246, 30479, 54327, 19059, 55395, 39278, 8858, 10210, 7978,
                    4318, 15876, 11733, 54902, 6911, 39858, 37247, 51981, 21117, 48631, 35960,
                    46442, 17821, 52531, 12749, 52493, 52189, 51041, 61626, 18368, 62587, 11770,
                    54432, 28694, 2910, 51707, 31962, 16306, 45801, 41320, 63134, 39606, 10171,
                    3078, 1513, 17505, 61844, 17218, 6542, 60269, 42215, 28367, 25574, 49805,
                    33937, 26520, 42495, 20709, 49396, 48249, 47415, 43615, 1469, 23657, 7536,
                    19072, 6453, 31826, 39540, 47967, 54694, 37257, 54287, 3757, 2973, 23220,
                    42182, 35080, 14979, 14573, 27919, 13119, 37500, 14333, 43840, 571, 26798,
                    48175, 12338, 33792, 34100, 591, 24011, 26431, 51038, 39528, 26697, 52463,
                    37621, 724, 58900, 16909, 31217, 17461, 10473, 29658, 29197, 43486, 28940,
                    43045, 1813, 58826, 44655, 16525, 9034, 44758, 39199, 40816, 31659, 60950,
                    7841, 2258, 50313, 21235, 32025, 25527, 32630, 7364, 64525, 40963, 41820, 532,
                    15177, 27262, 28133, 38365, 62329, 30291, 40533, 42256, 15595, 11904, 45322,
                    8236, 20080, 62234, 23481, 14474, 24297, 40473, 31914, 41151, 10935, 1490,
                    27270, 19735, 14742, 52338, 65456, 4253, 21330, 42558, 64515, 2860, 48080,
                    33345, 26434, 27483, 26575,
                ]))
                .unwrap(),
                c: 232,
            },
            VarTestStruct {
                a: 24000,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    50202, 52181, 47746, 24038, 20067, 38864, 51159, 365, 3004, 41134, 62931,
                    40446, 5288, 38371, 2805, 60112, 1543, 24288, 12307, 56175, 6727, 46612, 38283,
                    6462, 39244, 43599, 46706, 48826, 16780, 62707, 47506, 28377, 21128, 56600,
                    19431, 60216, 45452, 22436, 47644, 32407, 50700, 54127, 13084, 39780, 59131,
                    42784, 39591, 22436, 7790, 36118, 11974, 19731, 37137, 64201, 63649, 15370,
                    1890, 2070, 24948, 50752, 29143, 27112, 7041, 5597, 30714, 35738, 36114, 11691,
                    24879, 8803, 42454, 23938, 9650, 19868, 36800, 30123, 9734, 46685, 23895,
                    43808, 40401, 57998, 34901, 53316, 6124, 55439, 51122, 44652, 48298, 53821,
                    22137, 62008, 62468, 15800, 25904, 60002, 35640, 30188, 46450, 34701, 25494,
                    54264, 6835, 41106, 49648, 65179, 44420, 6824, 3880, 29297, 49014, 11952,
                    31972, 13561, 45764, 23696, 36484, 16390, 33832, 14059, 57552, 46328, 41557,
                    17132, 58617, 49682, 18526, 39735, 22078, 32813, 46299, 31320, 61849, 12323,
                    55968, 14287, 23460, 42917, 53727, 10075, 8233, 35466, 58294, 53603, 21164,
                    35761, 38688, 15530, 18146, 41622, 37923, 32116, 50956, 44969, 63521, 59976,
                    59362, 8058, 22251, 28059, 37622, 16789, 42820, 12294, 51363, 26782, 40584,
                    225, 52180, 23012, 46205, 12039, 25027, 27380, 12695, 11475, 33109, 6691,
                    61100, 44040, 22951, 48415, 7605, 29965, 43695, 9062, 27792, 21054, 8661,
                    34772, 31208, 46686, 50414, 19542, 8600, 63690, 63930, 32627, 9399, 37580,
                    40002, 14133, 48259, 42824, 3480, 36108, 60767, 10960, 63366, 48462, 7239,
                    46831, 65447, 22845, 7388, 39633, 39524, 13088, 13096, 4339, 40350, 51209,
                    10300, 56365, 19807, 28721, 55561, 62402, 36579, 21537, 26658, 14630, 38411,
                    51202, 62911, 2452, 61441, 5734, 43038, 2651, 27211, 28971, 40448, 39114,
                    39081, 34245, 58590, 15982, 43721, 40682, 51049, 24974, 43900, 20418, 41804,
                    15924, 10885, 5512, 54331, 43417, 16969, 11279, 54193, 59172, 1463, 31885,
                    23152, 59520, 24499, 37882, 14439, 22463, 60936, 41888, 11186, 49637, 28018,
                    32146, 41493, 30984, 32203, 5917, 59544, 43412, 36626, 42472, 62776, 19098,
                    19885, 46957, 43935, 20922, 34288, 59668, 64516, 50633, 36884, 51707, 33900,
                    6775, 30755, 23197, 24054, 65288, 40826, 51566, 64760, 51906, 39329, 4531,
                    38974, 24413, 55645, 28169, 17883, 18368, 28023, 41285, 26862, 20179, 47009,
                    4699, 20952, 41758, 33672, 1002, 4894, 6834, 29096, 20810, 36226, 42753, 31791,
                    63504, 36302, 28310, 65086, 34134, 60165, 64792, 995, 23539, 34424, 26298,
                    54363, 62615, 16585, 32952, 49735, 29254, 46020, 58042, 28228, 28251, 47294,
                    12884, 45179, 38891, 27761, 31305, 31530, 64303, 38355, 4107, 61863, 34909,
                    30211, 26783, 55144, 13022, 18455, 42175, 21149, 58334, 45224, 27016, 63381,
                    62919, 24617, 16246, 22997, 37437, 56614, 24999, 6596, 64818, 51078, 55762,
                    36876, 15159, 30356, 60664, 56206, 5601, 6329, 22442, 35244, 32303, 12090,
                    55082, 53064, 23204, 6213, 54640, 39536, 21323, 45607, 34557, 7958, 6546,
                    49383, 61951, 9459, 36728, 53656, 51215, 6762, 44648, 18133, 40904, 15680,
                    52218, 54054, 2102, 34718, 38954, 38333, 31854, 24481, 51159, 36803, 31559,
                    11285, 65347, 15746, 35564, 53513, 15750, 64387, 14394, 41428, 32544, 33368,
                    18398, 13375, 3728, 3292, 42070, 24978, 60336, 43680, 33255, 45821, 20694,
                    62836, 17294, 18402, 46506, 49989, 49789, 16676, 47026, 34301, 28214, 41569,
                    42855, 59409, 19242, 25158, 51948, 62921, 53204, 20411, 10364, 44035, 13494,
                    3787, 16439, 64307, 45214, 48742, 7065, 65441, 36506, 58512, 59294, 7931, 6644,
                    23225, 22597, 58002, 52715, 25364, 60469, 60462, 10261, 21080, 2595, 64422,
                    54988, 64690, 55297, 252, 20261, 46313, 32701, 16156, 56508, 56438, 29677,
                    11597, 25959, 40280, 54745, 6986, 42952, 49260, 56312, 3708, 51343, 17183,
                    53668, 14858, 16967, 17476, 27019, 25828, 61777, 12253, 22066, 60311, 11193,
                    34030, 46714, 13399, 37790, 52103, 7281, 60185, 63897, 38187, 49471, 2230,
                    41006, 29070, 39907, 57111, 38450, 61138, 29693, 10023, 13351, 51209, 16482,
                    26634, 5395, 15449, 33831, 37849, 64785, 65028, 2321, 47685, 3721, 21693, 2998,
                    27377, 27119, 39127, 62615, 35043, 17550, 57551, 13004, 22017, 6043, 22895,
                    63093, 55343, 36898, 34840, 43837, 23728, 22575, 44884, 44862, 8776, 19287,
                    7761, 32140, 28123, 6411, 10564, 23799, 20347, 37715, 10089, 59063, 17458,
                    59240, 26045, 55284, 6244, 61768, 57625, 57897, 50619, 28347, 36735, 58008,
                    9380, 46673, 23892, 63350, 54804, 4542, 26335, 38452, 61346, 56994, 2268,
                    31555, 39100, 16296, 43107, 44207, 36121, 36683, 19183, 7887, 27832, 39304,
                    49159, 36909, 63530, 9303, 10578, 56371, 30498, 6689, 26272, 44865, 27308,
                    63477, 10190, 19240, 8138, 13413, 17561, 49972, 18897, 8937, 65470, 1803, 4949,
                    19259, 54982, 5373, 55175, 34859, 11988, 14207, 44526, 39315, 10213, 60440,
                    6023, 20219, 3611, 13453, 29755, 12297, 38031, 11487, 23715, 2819, 48582,
                    38282, 796, 18603, 45605, 23917, 9163, 29947, 31581, 2016, 43192, 41164, 42746,
                    58587, 7560, 9388, 34695, 35958, 10555, 29243, 43931, 35056, 34167, 63084,
                    15765, 41837, 18826, 38863, 27614, 7384, 59263, 34470, 54806, 38658, 22157,
                    45643, 54601, 60336, 25481, 26237, 14420, 21874, 23247, 2246, 13908, 15122,
                    27847, 4546, 44099, 41755, 44091, 41926, 39752, 64815, 12003, 16085, 20881,
                    52422, 33460, 47291, 9206, 47332, 7243, 59281, 64418, 29521, 7381, 25506, 832,
                    34320, 54997, 26620, 5016, 14253, 54080, 49972, 51775, 45282, 11242, 45210,
                    51348, 22898, 6690, 53790, 19945, 40018, 7409, 36076, 18568, 9318, 36625,
                    31732, 21399, 7448, 6545, 25738, 22379, 51971, 62743, 53506, 32226, 10051,
                    37475, 51566, 20394, 59899, 15893, 19159, 52121, 30086, 64822, 27051, 26984,
                    50518, 65379, 26349, 12575, 24682, 9889, 38154, 56759, 39885, 16639, 33305,
                    35658, 7108, 38569, 26082, 22874, 18760, 31204, 4103, 11444, 22043, 57552,
                    24599, 33162, 12257, 49983, 36304, 7099, 48862, 63567, 21932, 12334, 50472,
                    9347, 59532, 17539, 23200, 9694, 45805, 3974, 60639, 63904, 14319, 28175,
                    13686, 38805, 46584, 65484, 46504, 48557, 5363, 64085, 48741, 41673, 5981,
                    2729, 19768, 27420, 46903, 41594, 26094, 50956, 12805, 42335, 9652, 22579,
                    12639, 46335, 34113, 32609, 49159, 246, 12995, 28924, 17617, 3068, 28754,
                    14710, 44539, 12938, 6611, 6027, 25186, 33172, 28192, 40977, 140, 43770, 6118,
                    52672, 28118, 55703, 1079, 12783, 61379, 1610, 56956, 24212, 55974, 20947,
                    64901, 60090, 6834, 6703, 45271, 25423, 64343, 13980, 25856, 64383, 51131,
                    35476, 8549, 32075, 37699, 13954, 28037, 4102, 14173, 38687, 32498, 59304,
                    26875, 48769, 12836, 5445, 9919, 13752, 53399, 56210, 35089, 13380, 62017,
                    46343, 7629, 52042, 64440, 19959, 40983, 20196, 53169, 51046, 6862, 1509,
                    14270, 13978, 36961, 19171, 47207, 40503, 46489, 13300, 47065, 60724, 13294,
                    12746, 8744, 4185, 29426, 61424, 34462, 15639, 22863, 57579, 11750, 12291,
                    9179, 47324, 1173, 1438, 904, 24925, 48050, 11861, 23806, 22516, 1378, 23684,
                    39953, 36230, 52149, 14083, 63159, 53010, 12253, 62449, 50992, 60467, 43582,
                    1743, 10057, 54175, 57541, 64675, 27340, 29268, 31440, 62403, 32301, 3090,
                    33180, 51170, 4919, 22247, 45295, 50141, 9307, 31108, 22798, 31916, 54585,
                    40979, 61598, 18125, 60305, 17082, 21979, 41546, 48265, 13630, 7318, 43307,
                    31911, 28355, 52619, 17573, 46253, 58467, 29163, 27035, 21037, 11178, 9287,
                    43688, 24919,
                ]))
                .unwrap(),
                c: 17,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x5a922b2dc965a5c310302bb0706dccd63445e59234cdc203412fcd48517c5567");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_9() {
    let value = ComplexTestStruct {
        a: 56435,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            3952, 290, 251, 58961, 30325, 51905, 50433, 13351, 17042, 42136, 54586, 6638, 17986,
            6461, 39179, 19169, 5032, 37740, 13563, 33961, 27247, 58129, 34797, 51853, 538, 40393,
            28274, 8143, 21428, 58692, 21017, 19930, 60214, 57963, 12074, 65475, 11971, 3300,
            12842, 58362, 38509, 32518, 44987, 38261, 45960, 4113, 60175, 509, 54822, 56434, 34779,
            46168, 17442, 59015, 35952, 28197, 34715, 34853, 45635, 63294, 10891, 40304, 20585,
            10152, 33343, 10802, 46266, 1227, 13947, 3120, 65424, 5999, 54585, 53773, 22243, 30163,
            54642, 12101, 55527, 45282, 6850, 52227, 25452, 59343, 48590, 63442, 54768, 31603,
            23149, 18794, 14357, 40708, 28477, 24557, 62074, 58436, 46569, 5399, 38590, 61458,
            11749, 29188, 55136, 34171, 53449, 61674, 43650, 24515, 23335, 310, 44877, 62630,
            40795, 35713, 54011, 64962, 30770, 24912, 46047, 45057, 30452, 51741, 50972, 5240,
            24596, 7732, 54139, 58250,
        ]))
        .unwrap(),
        c: 232,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            247, 179, 221, 75, 165, 159, 76, 95, 45, 87, 64, 200, 49, 125, 220, 115, 36, 224, 166,
            114, 180, 59, 198, 142, 110, 87, 36, 125, 193, 207, 147, 214, 169, 159, 168, 160, 229,
            245, 155, 117, 247, 49, 255, 28, 157, 66, 40, 68, 41, 231, 111, 59, 73, 124, 182, 42,
            26, 19, 152, 151, 223, 9, 113, 210, 237, 209, 61, 250, 216, 104, 125, 46, 49, 167, 49,
            153, 151, 90, 24, 150, 42, 39, 68, 116, 0, 157, 37, 39, 103, 209, 187, 158, 248, 195,
            24, 251, 210, 153, 9, 141, 149, 228, 197, 18, 239, 6, 203, 97, 100, 121, 172, 21, 110,
            88, 77, 48, 92, 154, 107, 127, 190, 126, 238, 7, 117, 28, 110, 208, 83, 221, 104, 133,
            7, 230, 120, 108, 139, 108, 68, 33, 212, 162, 176, 102, 211, 175, 103, 213, 54, 254,
            61, 30, 11, 32, 242, 21, 114, 106, 88, 214, 31, 220, 87, 139, 36, 90, 38, 127, 103, 10,
            249, 84, 25, 96, 176, 91, 47, 139, 160, 30, 16, 68, 194, 31, 68, 222, 57, 66, 172, 238,
            146, 172, 234, 90, 168, 175, 218, 81, 12, 168, 72, 223, 4, 240, 10, 10, 136, 107, 130,
            190, 28, 250, 175, 79, 74, 34, 232, 179, 103, 144, 204, 138, 207, 26, 254, 186, 214,
            120, 119, 206, 96, 25, 50, 199, 2, 217, 254, 98, 53, 5, 51, 245, 219, 78, 238, 9, 113,
            203, 77, 48, 198, 27, 154, 20, 110, 192,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 4175,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                36507, 47041, 59560, 42683, 12929, 4609, 49474, 19725, 5797, 36688, 10828, 24922,
                6799, 46808, 302, 9293, 56922, 31310, 33661, 31397, 28550, 12536, 12410, 63505,
                25934, 18968, 30363, 50023, 62691, 40692, 43921, 20482, 41986, 1758, 2368, 37289,
                9022, 34232, 59174, 55010, 27355, 510, 29795, 17564, 5116, 18766, 48068, 43970,
                26835, 43381, 8487, 59818, 51031, 13124, 39211, 21633, 16731, 15084, 47150, 49423,
                12751, 60824, 13614, 16189, 40031, 48961, 18623, 65394, 46309, 29545, 11310, 23419,
                60365, 56217, 63172, 16117, 5484, 62181, 33178, 42845, 13803, 65062, 35829, 50086,
                26728, 39419, 50712, 29717, 60435, 43041, 28793, 7710, 31113, 34816, 44171, 30356,
                25320, 56214, 39982, 10706, 60355, 64243, 14451, 9053, 64636, 18539, 33462, 6028,
                48380, 37626, 28455, 29272, 16800, 50768, 19335, 9, 8318, 32349, 38208, 59502,
                19512, 16179, 20732, 18052, 58666, 13746, 20786, 5530, 2317, 35712, 37237, 32151,
                13690, 2312, 2690, 38539, 14811, 5069, 61018, 6033, 1789, 46064, 27747, 55914,
                28305, 20112, 39537, 8602, 22292, 37564, 41623, 3512, 14206, 58785, 60813, 8828,
                61731, 23504, 16586, 44296, 27504, 45644, 60566, 58680, 18672, 32591, 52937, 36652,
                34718, 63698, 11229, 39503, 19334, 36930, 2297, 13253, 53311, 47523, 24097, 36189,
                3120, 4514, 10073, 64294, 35510, 20818, 24154, 13883, 62257, 840, 13999, 41136,
                19216, 42506, 308, 32086, 15265, 54838, 9712, 53385, 18634, 51126, 46460, 48181,
                57554, 2243, 15985, 12443, 31738, 43097, 244, 25574, 23403, 26548, 38697, 34004,
                13756, 47285, 36025, 3318, 29922, 4271, 16709, 53354, 29806, 9726, 21168, 20694,
                17623, 54243, 43395, 64542, 42247, 41094, 15043, 44284, 13370, 36144, 10795, 12053,
                45464, 49462, 28105, 27150, 63653, 4581, 44955, 12862, 46900, 2237, 58035, 25250,
                10033, 41241, 45498, 31512, 37946, 24724, 36224, 12154, 15379, 35722, 42647, 61,
                59310, 24591, 32946, 9213, 44998, 11715, 57196, 29876, 57598, 1283, 21362, 64078,
                14984, 44823, 37842, 30829, 24980, 14967, 34686, 63117, 36964, 17832, 52211, 57571,
                45815, 26027, 59968, 62583, 9565, 29093, 35066, 52956, 42225, 51860, 48719, 33738,
                62003, 29226, 64525, 6610, 32803, 9049, 9575, 13294, 40117, 51633, 5211, 27211,
                51423, 64301, 49507, 38315, 48371, 30368, 48488, 8478, 31754, 39062, 39001, 4169,
                40390, 29882, 63600, 15822, 15148, 58018, 23386, 29446, 58393, 33893, 46382, 17908,
                60361, 56311, 41932, 63616, 65323, 19089, 39738, 62146, 39089, 44682, 33148, 31671,
                46914, 41123, 21075, 61681, 3974, 5967, 47410, 29884, 21283, 45023, 36183, 3849,
                41804, 43261, 22154, 32524, 1991, 47517, 49690, 1146, 36984, 12048, 39768, 41567,
                6009, 31845, 63312, 57713, 14438, 58268, 11425, 57187, 6393, 15699, 27017, 56020,
                5342, 32372, 47825, 38806, 46065, 33418, 54375, 3276, 54370, 61825, 55568, 50722,
                14795, 34450, 15281, 54857, 50246, 43194, 32310, 7228, 4964, 56658, 54930, 39411,
                16278, 34946, 5001, 7788, 62095, 62114, 63947, 21454, 25929, 17532, 59989, 46387,
                16110, 43014, 53645, 7691, 26113, 40609, 27816, 56111, 31806, 37579, 18899, 27414,
                21323, 8184, 7129, 14284, 19278, 27529, 16999, 19274, 42912, 3530, 44513, 9579,
                5548, 57585, 37863, 8513, 27089, 15123, 56527, 13559, 17946, 41803, 55226, 2581,
                32084, 62660, 37687, 23097, 8272, 51495, 57699, 38728, 23544, 57004, 48862, 28477,
                21150, 17348, 6164, 34872, 63166, 27793, 1014, 26273, 47351, 17019, 18895, 24979,
                49701, 21611, 12622, 43109, 1782, 36408, 11783, 22193, 2778, 8353, 15392, 36200,
                9730, 810, 53259, 59729, 48866, 55340, 19497, 25120, 4625, 42853, 61472, 29605,
                22719, 38223, 23975, 35584, 1176, 50373, 40900, 37227, 39891, 15006, 50814, 15752,
                23224, 4547, 4171, 8855, 57977, 64869, 39131, 60428, 34194, 40367, 10756, 36244,
                48266, 53994, 11866, 59305, 10287, 40221, 49351, 543, 47913, 49113, 3898, 51419,
                15894, 14854, 13442, 1022, 64820, 29516, 43516, 17784, 35387, 44706, 2032, 21643,
                31204, 52955, 14504, 56192, 20239, 47696, 35528, 51095, 40725, 19070, 22676, 11855,
                8127, 28990, 40227, 41968, 12795, 20807, 52439, 66, 5893, 20529, 62183, 34322,
                20331, 23799, 24551, 48873, 12829, 40909, 61819, 60291, 47094, 14921, 3727, 37870,
                18605, 44355, 53294, 7031, 55239, 13839, 48307, 3331, 4587, 58030, 25666, 4369,
                43978, 9760, 5268, 47614, 44304, 41124, 24451, 50012, 16278, 30335, 8329, 29522,
                12490, 42059, 5987, 21937, 55421, 24578, 15519, 40212, 19723, 37708, 18422, 12982,
                30020, 28584, 29841, 44901, 28131, 7094, 5025, 64974, 56922, 42764, 27705, 59232,
                48497, 2603, 41158, 22613, 58689, 9931, 47188, 5366, 49980, 49102, 38572, 35786,
                54519, 46593, 7131, 3704, 5473, 35795, 41081, 61758, 43600, 2933, 52419, 39394,
                50124, 41293, 35245, 41601, 19773, 39630, 28147, 57140, 57085, 38273, 8681, 37321,
                48387, 26293, 3699, 21958, 37370, 62427, 30904, 59593, 6160, 26025, 7680, 3419,
                26196, 37507, 20108, 21291, 14520, 46136, 3286, 61517, 14641, 37830, 25453, 42715,
                43180, 20102, 7013, 60055, 39341, 44324, 35138, 51762, 23745, 41314, 15192, 56010,
                4191, 2802, 25472, 57380, 34831, 25227, 54419, 24024, 57710, 36909, 18834, 38567,
                6275, 62582, 5759, 5730, 11219, 7569, 5299, 38276, 50098, 39381, 44360, 8220,
                33669, 3900, 9407, 17167, 48227, 25374, 40862, 46089, 26222, 43821, 54891, 4410,
                4186, 53911, 18919, 30889, 52322, 54176, 8508, 33320, 41156, 18017, 26300, 7909,
                56977, 672, 53915, 36889, 53882, 11514, 36081, 6105, 42163, 58786, 62638, 5896,
                16261, 19938, 17123, 14582, 11822, 61791, 1633, 21071, 31436, 30124, 50046, 35673,
                49879, 53943, 2004, 63456, 5153, 47486, 40202, 34894, 35955, 7037, 50163, 63923,
                35961, 57824, 7164, 55776, 55888, 54713, 14474, 49330, 8318, 17909, 42505, 37420,
                44988, 19785, 4773, 47128, 57982, 43158, 15795, 43884, 35877, 8540, 43142, 11798,
                46603, 62027, 51797, 26984, 17865, 20828, 3582, 10914, 30419, 48429, 48111, 55443,
                38217, 40776, 9718, 37445, 19713, 23959, 52176, 25333, 26044, 33338, 51643, 49234,
                10587, 23659, 25008, 15271, 22400, 48849, 12416, 24444, 61272, 8249, 53827, 49531,
                60338, 4447, 50972, 33695, 38912, 13002, 41361, 26488, 31025, 27764, 52869, 21468,
                55453, 1449, 47254, 39059, 63195, 37774, 19538, 34800, 29036, 47669, 13674, 9475,
                25469, 41589, 5409, 52006, 10321, 52991, 20950, 54234, 46921, 29039, 56279, 11301,
                14493, 54540, 36030, 54987, 58801, 20310, 58630, 3921, 57161, 63914, 10498, 9607,
                14861, 21604, 13259, 62812, 56152, 34364, 40418, 33594, 8911, 40843, 22164, 54260,
                3396, 64812, 31241, 58836, 31233, 37031, 9283, 3452, 32200, 57498, 27199, 35508,
                40170, 17486, 7587, 54980, 22979, 61974, 25197, 2352, 14353, 5822, 65249, 57343,
                47493, 53596, 40159, 1005, 52626, 1120, 41638, 58608, 12487, 13236, 13466, 7011,
                54617, 8618, 25683, 4267, 13486, 16251, 55749, 7313, 56508, 27069, 52948, 30156,
                21187, 27255, 17586, 23416, 39275, 2809, 36009, 10786, 9747, 35137, 46225, 53300,
                30806, 11204, 30382, 65089, 29561, 11690, 31873, 40773, 44939, 43551, 6631, 1113,
                38514, 47990, 16186, 47332, 64554, 43106, 30987, 15183, 7606, 58271, 65164, 37506,
                44915, 57402, 11842, 61834, 4456, 34369, 56454, 59402, 3926, 62418, 26709, 28317,
                54864, 45133, 9349, 9633, 33209, 2379, 56650, 11538, 26209, 10728, 28481, 3841,
                14831, 11767, 21085, 35377,
            ]))
            .unwrap(),
            c: 108,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 95, b: 3025621247109710756, c: 2487446586 },
            FixedTestStruct { a: 228, b: 2138806433742567064, c: 2177183671 },
            FixedTestStruct { a: 236, b: 17742686114798956173, c: 2802381187 },
            FixedTestStruct { a: 115, b: 6796607319124479000, c: 1854347945 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 27346,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    2367, 54365, 56397, 52519, 45165, 49446, 50145, 59500, 52460, 3573, 47746,
                    31303, 32404, 11360, 2599, 11836, 63429, 51649, 50538, 6248, 48566, 4243, 4545,
                    2967, 29195, 44700, 32860, 24030, 28183, 226, 44358, 24688, 4364, 24296, 14395,
                    19952, 45186, 36198, 1492, 63579, 36949, 35161, 19778, 39021, 34603, 55135,
                    29353, 31471, 31986, 43519, 42002, 55323, 59814, 22819, 63826, 7392, 51653,
                    23512, 26742, 55872, 17779, 32933, 56887, 22878, 15343, 24215, 39691, 2613,
                    16432, 34623, 62456, 25769, 50639, 58313, 33875, 30370, 56360, 39437, 28688,
                    28558, 11171, 58834, 47785, 10631, 44378, 64947, 64556, 33857, 61747, 36579,
                    10228, 18310, 51533, 20133, 40330, 32585, 50266, 52967, 3897, 16198, 29082,
                    26290, 25737, 26065, 9545, 50039, 48559, 36968, 9219, 49933, 65487, 53503,
                    31142, 42519, 2167, 38730, 6058, 4606, 8472, 48832, 24283, 63694, 7109, 61007,
                    30463, 24661, 24232, 6059, 56043, 23411, 53188, 32871, 22354, 54458, 48677,
                    19100, 64790, 46518, 43748, 64957, 33495, 51427, 17435, 9807, 17149, 4762,
                    3992, 26609, 32028, 33340, 25021, 31206, 58793, 2621, 33980, 42183, 41728,
                    42392, 54116, 55798, 5804, 53560, 8903, 25886, 27185, 19953, 36579, 8342, 2594,
                    52982, 30548, 55204, 43630, 60157, 23622, 53222, 21312, 2308, 4073, 48058,
                    36319, 2080, 63155, 7988, 42024, 13210, 3953, 1354, 16466, 15734, 33836, 33773,
                    51499, 5896, 21589, 30409, 44500, 17580, 5946, 62541, 16332, 47086, 64013,
                    9695, 31310, 5918, 37423, 23866, 34201, 4839, 8909, 47263, 59032, 13594, 53029,
                    43423, 12172, 61874, 61622, 28448, 2504, 17858, 51295, 22358, 58826, 3353,
                    3550, 24686, 5067, 2320, 61119, 8732, 16548, 36342, 38242, 1903, 13843, 33239,
                    62457, 25605, 59438, 18963, 48304, 29568, 33625, 42562, 48734, 42028, 28595,
                    11692, 11723, 56778, 35338, 58685, 25770, 21711, 18716, 43594, 6172, 43210,
                    30167, 30319, 36508, 569, 21061, 54242, 31735, 27576, 28067, 42449, 30695,
                    48862, 34558, 828, 17576, 63113, 15951, 7043, 57153, 21525, 8711, 24701, 28384,
                    54140, 49803, 27841, 35016, 30334, 44805, 54790, 21727, 58142, 22310, 61131,
                    21682, 14632, 29331, 48907, 23838, 65298, 26600, 6385, 20610, 56376, 45867,
                    56390, 27835, 471, 10923, 45944, 20495, 53615, 61462, 65286, 64352, 22043,
                    14530, 25698, 60169, 45968, 643, 48529, 36985, 4486, 49358, 23790, 50438,
                    33383, 40598, 14038, 16039, 31385, 46809, 45486, 17407, 8225, 40887, 46864,
                    56959, 27554, 18645, 31656, 1446, 43512, 26097, 25446, 5211, 12373, 64703,
                    5981, 25820, 21825, 45888, 24791, 48734, 5710, 52497, 9721, 34393, 59170,
                    20422, 41845, 17867, 54095, 64598, 24508, 13120, 46956, 13152, 38344, 3782,
                    42887, 43773, 40645, 46895, 43285, 20786, 45818, 37251, 54482, 33573, 16098,
                    55323, 3598, 39178, 42062, 48080, 42685, 3123, 62452, 56191, 30328, 47370,
                    2949, 60680, 26604, 35084, 26527, 31804, 10717, 23461, 9445, 31444, 49160,
                    56927, 9468, 52993, 39932, 6257, 55880, 12966, 55476, 61696, 22591, 53181,
                    28302, 29451, 44679, 24244, 7720, 49190, 53214, 12946, 56126, 30838, 61736,
                    14353, 4332, 32622, 1818, 14468, 52147, 23720, 16229, 27492, 22118, 30213,
                    10759, 19601, 43367, 35486, 915, 2919, 48583, 1694, 62446, 56707, 43663, 46374,
                    19824, 10069, 14120, 57836, 49373, 34350, 41306, 40208, 28761, 42379, 59490,
                    32050, 13133, 33992, 10108, 1202, 24129, 26290, 22502, 59224, 37834, 39456,
                    3531, 65373, 34825, 55247, 10993, 450, 48794, 38402, 61497, 23000, 29864, 4430,
                    14084, 6942, 42990, 5207, 60419, 21301, 58704, 15237, 2987, 15866, 28427,
                    20041, 23417, 48692, 39847, 50726, 42086, 1900, 12347, 26814, 63457, 20964,
                    30058, 24740, 36457, 64350, 24778, 27726, 2145, 22675, 7210, 28742, 33871,
                    60509, 31427, 27905, 35948, 39596, 28814, 2806, 14328, 17406, 6096, 40723,
                    9336, 23697, 35275, 39448, 48989, 16277, 48203, 15160, 31244, 21796, 17990,
                    15520, 26014, 62587, 54997, 31672, 47820, 10637, 44375, 23414, 34745, 53721,
                    39715, 54548, 21990, 32940, 55048, 60963, 8017, 6557, 33389, 41155, 59678,
                    46393, 52471, 38957, 51586, 13268, 44799, 61235, 32342, 12157, 55883, 54,
                    31475, 23420, 41135, 10483, 32691, 36064, 65033, 9194, 932, 63723, 1460, 44392,
                    52389, 47206, 1896, 46712, 7038, 61155, 49489, 12278, 58403, 5827, 22453,
                    33429, 32143, 13372, 42102, 48018, 58023, 12188, 48251, 41566, 2657, 4507,
                    46068, 57149, 39778, 57224, 3491, 29893, 48324, 9605, 33430, 41837, 10270,
                    49413, 44305, 55549, 20894, 55596, 26739, 36293, 12401, 29088, 40683, 1697,
                    14450, 34497, 45833, 52765, 43160, 2059, 29505, 29356, 55133, 27310, 41969,
                    60412, 52288, 48135, 42570, 4701, 15541, 22759, 46935, 3310, 5968, 59347, 7327,
                    40133, 28945, 64538, 27568, 8623, 21646, 7627, 2315, 11259, 24643, 82, 45334,
                    58042, 20636, 4192, 11950, 21864, 40759, 38521, 31572, 5055, 25934, 50627,
                    17726, 45601, 63395, 63970, 19145, 19286, 18381, 25437, 28491, 21627, 10387,
                    6078, 37510, 30240, 17922, 31713, 11237, 58166, 58133, 5320, 42627, 28885,
                    60305, 25132, 719, 21926, 49050, 62783, 46491, 57485, 16869, 13172, 11043,
                    37019, 14032, 58923, 4614, 55701, 14409, 21547, 55823, 14636, 55973, 23068,
                    54896, 28916, 7991, 36335, 28781, 63905, 15271, 24103, 37796, 49995, 6804,
                    65533, 10072, 2256, 25162, 47443, 1402, 8050, 32949, 21217, 30695, 967, 28371,
                    63003, 55554, 47164, 42534, 4169, 26057, 42664, 21137, 30499, 16881, 23025,
                    44268, 41744, 47156, 38232, 44992, 35746, 13223, 55724, 54520, 15172, 14,
                    60771, 51463, 56355, 36852, 28657, 10118, 47612, 17003, 41904, 34546, 2702,
                    15859, 13744, 16424, 47583, 63514, 60643, 56134, 22992, 62853, 20197, 56840,
                    29678, 58926, 14362, 5797, 44594, 539, 21142, 3313, 64957, 26394, 52905, 50624,
                    38104, 20356, 64419, 33, 59264, 43216, 14406, 60092, 46444, 39599, 28867, 3873,
                    25578, 21350, 35310, 59852, 55091, 53664, 64915, 28683, 44336, 22963, 63848,
                    16443, 60539, 29380, 7112, 22023, 43059, 31521, 1360, 21718, 36703, 63560,
                    30137, 21093, 24195, 14290, 11325, 27594, 44109, 41433, 26425, 4792, 55687,
                    26728, 48575, 50003, 4024, 18048, 34633, 61530, 29604, 54739, 54282, 26180,
                    47246, 32999, 27692, 28351, 49211, 43495, 3012, 40563, 27692, 21524, 10258,
                    35093, 46874, 10858, 33466, 5079, 33879, 50464, 64783, 32519, 62062, 41154,
                    12752, 55082, 57186, 47132, 47231, 8421, 27392, 4211, 65483, 4014, 4563, 1496,
                    55189, 37985, 2931, 14411, 20240, 32450, 45162, 30386, 33383, 32909, 50717,
                    42460, 7947, 56482, 58603, 35344, 51552, 38480, 28484, 9371, 38906, 8537,
                    17846, 37597, 3235, 20340, 5524, 48552, 9269, 31822, 41725, 46847, 45462,
                    13763, 10335, 63276, 37705, 13502, 43180, 23945, 18149, 160, 8929, 44179,
                    51697, 22320, 21769, 63206, 19963, 32335, 56805, 4931, 60463, 37638, 18904,
                    3039, 45724, 33627, 64603, 59371, 10711, 11107, 50988, 6505, 48166, 25553,
                    55717, 29441, 8799, 3438, 32234, 6933, 43618, 3418, 60333, 35766, 54072, 45009,
                    20405, 12396, 46043, 23279, 20398, 53851, 23265, 21453, 14454, 47436, 58325,
                    38871, 54937, 36520, 29481, 9372, 46268, 34630, 56499, 24466, 8153, 56479,
                    23793, 11016, 38730, 15108, 30250, 50086, 35238, 50858, 8011, 57063, 20854,
                    2350, 40632, 20667, 29127, 65023, 15273, 46499, 16158, 43714, 12222, 6285,
                    20611, 46482, 10062, 24793, 44065, 59278, 11807, 29778, 64770, 15059, 50053,
                    39745, 25109, 25461, 47270, 58508,
                ]))
                .unwrap(),
                c: 204,
            },
            VarTestStruct {
                a: 58061,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    1936, 39151, 30707, 41625, 27662, 22561, 48002, 8986, 35376, 12826, 14271,
                    53157, 8755, 14639, 22378, 4836, 12707, 39070, 38262, 13234, 45686, 33279,
                    30884, 24930, 14103, 7429, 15444, 369, 53610, 53980, 1286, 30691, 31692, 31090,
                    51437, 36111, 23191, 51055, 28519, 61921, 64351, 36978, 62970, 61627, 47942,
                    14756, 9840, 3319, 61051, 47359, 41932, 12729, 51287, 63335, 10578, 39398,
                    43369, 6777, 62782, 5783, 7282, 30980, 6760, 60600, 6469, 30996, 52203, 41901,
                    37719, 42708, 51781, 53273, 3195, 5314, 22529, 44543, 56973, 43485, 46002,
                    16790, 47554, 4422, 18745, 45456, 4862, 56462, 26260, 32296, 42730, 38945,
                    28646, 16527, 23225, 31012, 5150, 57522, 51225, 30628, 27725, 11488, 11964,
                    21880, 55992, 49280, 43183, 6524, 9960, 27093, 48964, 5691, 50408, 46167,
                    12224, 34806, 16067, 43771, 26383, 55662, 49147, 56920, 9599, 33126, 34508,
                    10062, 4978, 59766, 29366, 46931, 10353, 49108, 16534, 2728, 53565, 48065,
                    19752, 39217, 9805, 62330, 44478, 35557, 61426, 58242, 48031, 46498, 7474,
                    45463, 64892, 55519, 43852, 4024, 5154, 50278, 37359, 46472, 36601, 63500,
                    4406, 33827, 20651, 49412, 57535, 24653, 31108, 46967, 31394, 14242, 38910,
                    8362, 19682, 17750, 17900, 1166, 6332, 35135, 56174, 55300, 17782, 5699, 17273,
                    48129, 26999, 5211, 60188, 14529, 36503, 613, 24047, 17519, 648, 38298, 9666,
                    8658, 12943, 49682, 25454, 41443, 10267, 47320, 58352, 9241, 4156, 10525,
                    23616, 52388, 17169, 14778, 62017, 51448, 59542, 35831, 6524, 45330, 15140,
                    48332, 18631, 49939, 42916, 21390, 53218, 26336, 27718, 31866, 27101, 65037,
                    2415, 64368, 51133, 59563, 53760, 31183, 56407, 64946, 662, 20680, 33870,
                    22141, 37570, 25409, 17154, 4624, 3926, 54280, 51366, 53316, 44087, 8802, 9190,
                    23082, 58817, 10653, 39322, 20344, 29026, 12069, 59232, 59745, 39574, 44408,
                    1585, 50988, 56021, 46110, 30476, 5141, 13008, 9352, 5212, 29137, 36898, 28226,
                    21252, 34967, 49824, 12622, 60444, 32187, 45126, 29139, 685, 26360, 32672,
                    28094, 23311, 2414, 55381, 2503, 32354, 37347, 54061, 41193, 17435, 25059,
                    3957, 15473, 47948, 35862, 58684, 3763, 45863, 26967, 4920, 55410, 19573,
                    18341, 35260, 5110, 57729, 53705, 61932, 63002, 56241, 27796, 36277, 16232,
                    7867, 1274, 15487, 18059, 32048, 3837, 37243, 17465, 36872, 41898, 27233, 7910,
                    32769, 27404, 15500, 22995, 34952, 50831, 50327, 23662, 35054, 35918, 49185,
                    2656, 37562, 37924, 39552, 55075, 62953, 47352, 7551, 18034, 49374, 41802,
                    56340, 34661, 42955, 30864, 11090, 53789, 57848, 30337, 34412, 6375, 11187,
                    4182, 55684, 60166, 48215, 34211, 4334, 16084, 19388, 21355, 42931, 62064,
                    35149, 12307, 1651, 45584, 28727, 43942, 22743, 47128, 1002, 35383, 44023,
                    41883, 11415, 45648, 37275, 23404, 14016, 55763, 30583, 32859, 5444, 62491,
                    63544, 43717, 40312, 34900, 59291, 61138, 25948, 35959, 46926, 10721, 63108,
                    18370, 17446, 59755, 29706, 2491, 22272, 54054, 7643, 29927, 2672, 25714,
                    24416, 36356, 39227, 54585, 42159, 46992, 60295, 48625, 12243, 27039, 58914,
                    40490, 51848, 56852, 10269, 61050, 15233, 24049, 32885, 22783, 12899, 41808,
                    36314, 9217, 31078, 31111, 37374, 59581, 33442, 2118, 61382, 20149, 8725, 715,
                    22296, 10678, 35013, 8443, 3137, 31550, 52826, 58030, 59297, 18546, 14226,
                    59219, 26302, 4234, 23495, 3330, 9301, 61947, 15565, 13395, 38891, 916, 42221,
                    14856, 2341, 27533, 43188, 60726, 4357, 28071, 50623, 20839, 33522, 2322, 5169,
                    55556, 28848, 51388, 23850, 27883, 16808, 9760, 45108, 58400, 5291, 42190,
                    29511, 28230, 38786, 21684, 20280, 6619, 29400, 49147, 10064, 31490, 17211,
                    31998, 19611, 26103, 42027, 4414, 48465, 29386, 28436, 60078, 37320, 29803,
                    42207, 54254, 54774, 30013, 62562, 39640, 32701, 64217, 25364, 52833, 6537,
                    21571, 47376, 37881, 40154, 41815, 26983, 46197, 52779, 62636, 28674, 18703,
                    10737, 16230, 25997, 35414, 9108, 54310, 23932, 24226, 18541, 64685, 20986,
                    51125, 14681, 64405, 24057, 8206, 26456, 18137, 42987, 31165, 3970, 64079,
                    7130, 26974, 49305, 19300, 37076, 48329, 45069, 5935, 20575, 54053, 45757,
                    54855, 6873, 18703, 7721, 58659, 38860, 2264, 27955, 64915, 14783, 49469,
                    34283, 7186, 14876, 54966, 57653, 52608, 27283, 63916, 6744, 42448, 20463,
                    13398, 48773, 3323, 18073, 58836, 11354, 11703, 51511, 54861, 60876, 28571,
                    47742, 27523, 27963, 35237, 59138, 21451, 45990, 52735, 13001, 36826, 2255,
                    48487, 64359, 8312, 51374, 19978, 28419, 63485, 19452, 27193, 54263, 54292,
                    19599, 51612, 64460, 16857, 30809, 24591, 9209, 16639, 1802, 30139, 16007,
                    32510, 46857, 50210, 16167, 34052, 15039, 51285, 53556, 16151, 9089, 42527,
                    25860, 8208, 29648, 28159, 1054, 388, 17359, 15010, 2972, 30472, 14873, 40717,
                    37284, 4905, 32127, 64064, 32124, 33070, 22400, 45481, 33693, 14559, 11990,
                    20261, 55710, 27482, 2712, 53506, 2107, 58374, 14361, 23024, 62740, 6305,
                    25867, 26514, 56031, 19240, 58071, 12806, 33124, 4976, 26502, 11121, 16627,
                    64112, 4058, 20496, 11686, 7364, 13434, 27471, 3374, 35858, 24623, 16271,
                    35489, 50931, 23772, 53019, 54090, 40043, 45074, 65211, 40954, 55813, 3444,
                    21038, 2192, 45710, 39347, 24085, 30842, 40179, 64812, 52548, 10413, 59386,
                    177, 26341, 32655, 58581, 12129, 52082, 62653, 42600, 9388, 53987, 34893, 384,
                    24588, 57646, 8061, 40240, 7110, 47610, 24751, 10025, 23385, 28835, 19298,
                    7984, 37833, 29263, 15205, 42889, 64640, 59675, 20861, 10488, 38837, 18072,
                    29632, 1205, 2493, 37525, 32569, 59253, 25457, 44322, 8830, 46720, 21361,
                    65498, 4249, 28338, 15206, 17913, 55899, 12450, 10708, 49230, 51833, 30384,
                    51567, 11676, 1547, 41742, 28083, 38959, 9594, 9307, 47260, 5771, 57390, 28613,
                    6038, 43569, 44339, 47109, 16472, 58187, 45835, 17919, 49487, 43782, 9788,
                    56547, 54682, 59731, 30082, 41266, 19070, 1670, 27975, 30208, 30435, 14649,
                    47895, 40903, 15853, 28165, 1727, 53195, 61171, 22248, 21844, 20452, 1711,
                    25802, 12008, 12194, 28629, 14654, 32547, 40840, 46369, 51242, 53211, 48673,
                    44888, 25447, 9335, 57878, 43867, 21368, 43601, 45438, 54630, 43056, 48195,
                    22031, 8739, 12156, 33225, 62053, 13527, 7214, 28150, 64075, 22902, 1747,
                    36320, 24970, 13861, 62470, 45589, 54593, 61376, 4102, 40283, 11483, 31587,
                    45690, 41770, 26552, 61353, 63953, 63192, 49768, 47999, 6006, 43210, 41331,
                    22998, 31511, 57871, 51010, 30773, 60715, 53057, 15311, 2216, 43226, 28771,
                    12075, 55947, 45617, 49042, 13273, 25457, 5059, 16218, 14434, 6062, 61706,
                    12216, 27742, 24220, 62093, 48579, 26410, 763, 20696, 25358, 63805, 50005,
                    35715, 16477, 449, 21877, 48490, 60814, 16219, 55187, 36984, 20465, 51799,
                    61889, 5423, 52885, 15771, 43888, 35048, 878, 16161, 61298, 45758, 62068,
                    58865, 53867, 41259, 10029, 52304, 1185, 34611, 48045, 53983, 57078, 17841,
                    10192, 8802, 12714, 23573, 10127, 10740, 365, 23370, 19602, 5177, 46609, 32435,
                    37583, 3154, 10581, 34629, 1824, 16466, 41586, 11093, 45221, 41373, 35235,
                    35583, 8350, 36381, 3958, 30652, 63176, 42909, 12547, 43248, 8069, 23011,
                    46466, 7792, 9976, 64015, 8010, 49258, 56791, 47295, 55778, 9408, 34150, 58208,
                    511, 36587, 17384, 18790, 2143, 20399, 40739, 20207, 34810, 32487, 53782,
                    62317, 3861, 63871, 4301, 5744, 52598, 17213, 3562, 12771, 3690, 11833, 45124,
                    38748, 4470, 1868, 25858, 41906, 19635, 7272,
                ]))
                .unwrap(),
                c: 135,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x18714348fd9390ada358e4a2c28b5c5f89e697a7e3d1e72945c8a5d51a63eddb");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_chaos_0() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 22202, 27857, 0, 42502, 17093, 55470, 38783, 0, 20844, 61541, 24724, 65535, 26906,
            20432, 18098, 14495, 62384, 65535, 0, 65535, 6847, 6811, 21813, 29132, 51428, 14060,
            40683, 25684, 65535, 23067, 19913, 18582, 0, 10296, 65535, 0, 51407, 65535, 0, 0,
            25163, 0, 46427, 54636, 50484, 0, 4232, 42313, 43225, 0, 65535, 43785, 0, 53535, 65535,
            34510, 51193, 14350, 0, 65535,
        ]))
        .unwrap(),
        c: 146,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 26689,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                6405, 44608, 56229, 17678, 8681, 2146, 0, 65535, 0, 47526, 30259, 65535, 0, 65535,
                65535, 65535, 54952, 30298, 58994, 64159, 65535, 44774, 60421, 65535, 16534, 0, 0,
                0, 41311, 17500, 0, 0, 63656, 65535, 5466, 65535, 61650, 55345, 37443, 65535,
                65535, 0, 12797, 65535, 65535, 53123, 0, 22287, 65535, 53530, 8688, 65535, 28792,
                65535, 41511, 6189, 0, 0, 41827, 63481, 65535, 10146, 65535, 62666, 38169, 35795,
                14288, 65535, 50525, 65535, 2450, 0, 26815, 58081, 26969, 23445, 29015, 65535,
                1927, 22876, 65535, 63589, 0, 0, 34853, 13505, 41054, 1060, 65535, 49146, 10995, 0,
                2822, 16783, 6379, 12119, 0, 59263, 61154, 0, 3787, 0, 14107, 65535, 43912, 4847,
                0, 65535, 40368, 0, 0, 65535, 65535, 0, 2381, 11115, 6697, 8346, 34814, 0, 17594,
                48393, 54227, 65148, 0, 0, 14865, 65535, 3243, 37322, 0, 22044, 31948, 61016,
                65535, 52522, 54771, 45193, 56846, 56518, 0, 65535, 19377, 37039, 65535, 6826, 0,
                3993, 19160, 65535, 9672, 65535, 65535, 65535, 63225, 13579, 12624, 1016, 65535,
                44988, 65535, 65535, 20622, 54523, 65535, 6050, 3855, 63561, 65535, 27543, 6893,
                50281, 3305, 55454, 47707, 6180, 62939, 0, 0, 27775, 62362, 42961, 28112, 35575,
                65535, 0, 7147, 34805, 13610, 63039, 22940, 10513, 42961, 65535, 0, 0, 7794, 51198,
                4220, 56860, 51635, 65535, 12795, 23651, 41827, 50978, 0, 65535, 34152, 0, 54543,
                45843, 17446, 5273, 62964, 943, 0, 16536, 37392, 65535, 54129, 8141, 65535, 45060,
                10568, 21641, 62216, 65535, 36602, 40736, 58223, 61740, 65535, 65535, 0, 34391,
                65535, 65535, 30043, 60007, 65535, 42463, 0, 0, 0, 43586, 0, 11949, 0, 11485,
                27599, 0, 2616, 0, 16964, 2362, 0, 3100, 0, 0, 12468, 4221, 0, 0, 3741, 13013,
                4989, 0, 26409, 65535, 33368, 17732, 59291, 30355, 41879, 6350, 65535, 65535,
                22182, 0, 11110, 48756, 61628, 65535, 55248, 58917, 0, 64073, 27276, 53883, 11885,
                39839, 0, 6970, 45828, 51776, 0, 65535, 41777, 49047, 65535, 61926, 33918, 65535,
                31140, 0, 13027, 51326, 9010, 62185, 65535, 58140, 0, 8195, 65535, 26980, 32080,
                374, 35421, 29405, 65535, 43033, 0, 0, 65535, 57930, 63642, 42005, 16182, 0, 10351,
                42549, 23767, 13570, 30998, 25111, 15278, 0, 65535, 62293, 50058, 11570, 50078,
                65535, 60619, 35907, 48823, 52447, 0, 30292, 11424, 29069, 0, 31599, 59563, 38602,
                65535, 0, 65535, 53318, 0, 33660, 0, 0, 51525, 18425, 45376, 62833, 59448, 0,
                25058, 1858, 7320, 16982, 65535, 0, 63000, 65535, 49338, 0, 0, 0, 2329, 19097, 0,
                3744, 18635, 2454, 22198, 63981, 18786, 0, 14023, 23809, 19004, 9487, 65535, 42751,
                42954, 16863, 0, 0, 27516, 8097, 988, 55809, 32672, 22992, 0, 0, 65535, 43637,
                50071, 10655, 42606, 65535, 0, 7594, 42231, 41968, 31798, 31522, 49408, 21565,
                60701, 42406, 23031, 0, 40578, 65396, 0, 65535, 14540, 36341, 17906, 17554, 65535,
                5707, 18620, 34506, 58128, 7467, 0, 52337, 0, 14658, 65535, 9555, 50993, 47777,
                52281, 17778, 44735, 65535, 13648, 65535, 65535, 55168, 45538, 46163, 0, 12154, 0,
                34048, 65535, 33519, 60535, 20848, 41682, 65535, 27071, 4498, 63318, 62686, 4798,
                22400, 55005, 38883, 39093, 33404, 65535, 65535, 0, 57677, 0, 608, 12626, 0, 0, 0,
                0, 24098, 43665, 48072, 65535, 65535, 65535, 0, 53896, 0, 0, 65535, 64758, 0,
                65535, 57944, 65535, 0, 2313, 0, 17835, 27822, 65535, 57285, 0, 3915, 65535, 65535,
                65535, 65535, 65535, 5583, 65535, 0, 31415, 60727, 0, 33156, 19121, 2884, 65535,
                65535, 18771, 39983, 0, 65535, 58949, 18760, 65535, 17730, 61498, 15905, 0, 65535,
                54199, 41473, 65535, 8301, 36810, 744, 5072, 0, 38801, 40720, 14182, 3087, 0,
                56423, 0, 35080, 37026, 3435, 18715, 65535, 45373, 62229, 25750, 7882, 29062,
                61460, 57808, 52031, 0, 15468, 36699, 8807, 24601, 44591, 0, 65535, 65535, 64861,
                65535, 57005, 19208, 0, 5727, 0, 0, 11142, 1717, 54973, 32780, 21700, 1413, 26478,
                33541, 65535, 46136, 65535, 0, 0, 40598, 65535, 65535, 15823, 65535, 29129, 9620,
                0, 0, 231, 65535, 12507, 37211, 0, 12124, 63988, 65535, 65535, 12182, 65535, 0,
                47814, 65535, 29220, 33082, 0, 54233, 60102, 0, 65535, 51651, 40985, 65535, 0,
                15126, 15278, 19034, 26985, 9036, 0, 45953, 47106, 46678, 0, 33645, 65535, 63270,
                13769, 8388, 35750, 65535, 0, 17959, 1965, 18176, 57174, 27283, 23660, 65535, 2197,
                65535, 62040, 38634, 65535, 44123, 4357, 33528, 65535, 49754, 38737, 60789, 12791,
                65535, 40742, 65535, 36339, 65535, 65535, 16004, 46500, 56137, 27463, 3525, 36842,
                41431, 12383, 20610, 48117, 20952, 11065, 65449, 65535, 12170, 34695, 6793, 0, 0,
                11316, 13563, 0, 31047, 0, 65535, 65535, 18529, 14878, 56928, 65535, 25223, 6521,
                6929, 40332, 14581, 50656, 38716, 53315, 1274, 28725, 54985, 65535, 0, 0, 29080,
                26460, 65535, 32952, 31627, 65535, 65535, 65535, 61148, 0, 35139, 11790, 53707,
                10972, 0, 57644, 4411, 65535, 35119, 26521, 0, 25078, 9871, 18870, 0, 65535, 35931,
                0, 0, 0, 53172, 53604, 65535, 0, 37881, 65535, 1791, 65535, 65535, 65535, 37327, 0,
                23904, 12282, 32791, 30132, 32289, 4447, 58279, 36146, 59183, 65535, 65535, 57677,
                47288, 56566, 65535, 6873, 0, 37463, 0, 0, 0, 65535, 0, 18024, 10244, 0, 15476,
                50013, 35011, 0, 65535, 15018, 65535, 0, 6024, 16925, 29665, 37245, 5733, 39710,
                43817, 17820, 15059, 0, 20741, 22233, 65535, 0, 27782, 4578, 50625, 41310, 0, 8325,
                0, 53104, 4931, 11551, 57090, 0, 29273, 50602, 65535, 11908, 65535, 1040, 57651,
                62674, 0, 0, 3110, 16291, 33229, 38002, 65535, 9692, 37604, 8212, 18129, 0, 65535,
                19032, 65535, 38120, 16130, 51417, 46411, 52457, 26317, 29316, 15904, 5440, 55591,
                21268, 16201, 65535, 44896, 45701, 4343, 59533, 0, 17771, 18828, 0, 19799, 0, 6552,
                0, 65535, 47563, 2190, 1255, 0, 0, 15000, 0, 65535, 65535, 65535, 462, 65535, 0,
                64347, 60466, 50847, 21911, 0, 58782, 65535, 13140, 50109, 16042, 41516, 40485, 0,
                25479, 65535, 61958, 65535, 48009, 55856, 47019, 5773, 65535, 1280, 65535, 26000,
                65535, 65535, 43344, 64605, 65535, 22946, 17658, 56259, 44084, 65535, 32112, 53073,
                43389, 65535, 6545, 913, 61132, 34292, 43700, 27545, 51337, 0, 46288, 17847, 21005,
                29599, 0, 65535, 0, 37528, 15126, 22203, 0, 19906, 63074, 61210, 31966, 65535,
                18329, 22862, 29472, 65535, 65535, 54081, 0, 65535, 65122, 38202, 39620, 31720,
                49606, 36738, 19201, 59535, 56260, 22503, 65535, 16896, 65535, 9220, 36321, 24169,
                4584, 43586, 65535, 65340, 22869, 4620, 63351, 0, 11208, 0, 24268, 0, 0, 54640, 0,
                0, 22830, 55980, 0, 0, 0, 47972, 0, 65535, 19054, 0, 0, 48089, 31082, 48032, 32366,
                38969, 24833, 30191, 12814, 65535, 29086, 25780, 63418, 63441, 38834, 8611, 22930,
                65535, 65535, 36085, 63145, 65535, 2113,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 10, b: 1438297725251419538, c: 1004466988 },
            FixedTestStruct { a: 136, b: 10463619603103768077, c: 0 },
            FixedTestStruct { a: 255, b: 11228443329916573076, c: 0 },
            FixedTestStruct { a: 255, b: 0, c: 3390450930 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 33389,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    19201, 53343, 23113, 60048, 0, 58694, 62853, 3462, 57380, 60754, 25186, 0,
                    24487, 41654, 11942, 22234, 35643, 65535, 7305, 0, 65535, 63939, 45878, 17315,
                    48933, 2566, 33592, 0, 41470, 41428, 34580, 0, 55410, 65535, 33780, 51597,
                    37168, 10487, 0, 15452, 10902, 58950, 0, 0, 65535, 26506, 65535, 0, 34600,
                    65535, 7868, 0, 0, 2506, 60510, 15170, 65535, 0, 19525, 56892, 38466, 65535, 0,
                    46668, 65535, 65535, 7548, 31332, 46242, 65535, 0, 61908, 46804, 25210, 0,
                    42322, 15136, 45697, 36875, 59559, 28494, 0, 0, 26490, 24323, 47222, 22391,
                    52602, 47939, 0, 15291, 65535, 65535, 15114, 26540, 0, 35214, 0, 5696, 52419,
                    0, 0, 0, 31806, 15134, 41921, 23054, 24556, 20340, 0, 65535, 65535, 65535,
                    57616, 56137, 59677, 0, 7500, 16712, 0, 0, 32407, 0, 65535, 29848, 59300,
                    65535, 9018, 0, 2263, 65535, 40544, 8271, 19231, 0, 0, 64289, 44676, 65535,
                    2529, 0, 55245, 2508, 48092, 28974, 41885, 33244, 5399, 0, 47972, 64743, 0,
                    26442, 57716, 65535, 0, 19586, 10260, 0, 0, 17048, 57318, 20012, 44546, 65535,
                    65535, 27601, 65535, 0, 60355, 0, 11528, 65535, 30031, 49873, 55721, 65535,
                    65535, 40293, 12166, 28847, 20642, 0, 65535, 59090, 65535, 35336, 11185, 0,
                    65535, 58282, 5752, 0, 65535, 16497, 0, 1453, 0, 29451, 40947, 22894, 32504,
                    65535, 15132, 65535, 65535, 8418, 36533, 65535, 55831, 31426, 0, 65389, 61024,
                    0, 45006, 38547, 13237, 44568, 36154, 65535, 65535, 29781, 41379, 61599, 0,
                    57330, 65535, 51947, 65535, 65535, 60963, 34758, 40084, 56934, 0, 1815, 20341,
                    23235, 33588, 0, 65535, 906, 26105, 0, 211, 44591, 65535, 60302, 5567, 15271,
                    61420, 30777, 45636, 62522, 5269, 56245, 24216, 65535, 65535, 47329, 65535,
                    36179, 65535, 58782, 6143, 65535, 0, 5817, 15449, 47425, 42512, 0, 9454, 0,
                    54779, 0, 0, 0, 21544, 0, 63355, 65535, 37990, 46576, 44794, 53243, 1124,
                    64673, 7112, 42386, 15536, 0, 26495, 0, 64151, 64556, 23083, 5976, 65535,
                    21920, 9056, 35150, 25100, 37992, 41595, 65535, 0, 35384, 22397, 31933, 65535,
                    1554, 0, 24736, 0, 35746, 0, 41179, 12635, 34209, 35489, 61733, 4020, 9860,
                    65535, 0, 13797, 20396, 20814, 12443, 42920, 31926, 0, 0, 30403, 8258, 52518,
                    65535, 0, 60854, 34857, 23273, 0, 17813, 4908, 45676, 50054, 60772, 65535,
                    61378, 65535, 8833, 65535, 6714, 62000, 0, 0, 48502, 63410, 65535, 65535,
                    40488, 65535, 65535, 0, 1135, 65535, 22261, 65535, 0, 53088, 25154, 5907,
                    46873, 0, 7942, 0, 61442, 31519, 65535, 15663, 27563, 0, 23475, 0, 0, 0, 41007,
                    0, 25740, 13011, 8181, 34528, 42541, 36396, 0, 11702, 19935, 22575, 31023, 0,
                    61468, 15898, 60110, 13481, 65535, 2890, 51490, 59137, 0, 46925, 40838, 56588,
                    40420, 0, 23782, 23138, 56637, 65535, 23122, 52369, 39696, 63003, 0, 0, 54667,
                    43096, 7727, 0, 63189, 53443, 0, 58425, 64258, 51070, 65212, 65535, 0, 65535,
                    65535, 0, 6993, 39214, 65535, 40676, 22107, 11636, 19203, 60208, 19089, 1070,
                    13884, 44896, 4480, 64322, 0, 0, 15461, 43504, 52423, 0, 65535, 15948, 0,
                    20330, 26426, 15652, 0, 34300, 17137, 65535, 0, 58359, 63364, 0, 65535, 39323,
                    6229, 51673, 48146, 62559, 11577, 2386, 0, 28065, 23691, 0, 10808, 4301, 39489,
                    65155, 42823, 64156, 0, 1743, 29270, 0, 9471, 65535, 65535, 20950, 24268,
                    44945, 65535, 0, 448, 57923, 42363, 0, 0, 43069, 24071, 56590, 14443, 22747, 0,
                    22966, 31002, 2789,
                ]))
                .unwrap(),
                c: 66,
            },
            VarTestStruct {
                a: 1522,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    5870, 65535, 14465, 14373, 9601, 42514, 63304, 65535, 7988, 59877, 324, 0,
                    47268, 5944, 30187, 65535, 31727, 65535, 34482, 17603, 65535, 0, 16738, 48609,
                    0, 65535, 4945, 65535, 43633, 21389, 4876, 8923, 51863, 24960, 0, 6653, 0,
                    51648, 65535, 58017, 47942, 33611, 33161, 22439, 0, 54458, 58408, 35480, 65535,
                    21346, 10818, 65535, 2775, 61263, 0, 12636, 50123, 60475, 65535, 57535, 54396,
                    2196, 18807, 16236, 25099, 12501, 65535, 65535, 10112, 28496, 16381, 63104, 0,
                    22616, 14219, 51074, 15844, 0, 17402, 106, 31618, 51402, 17836, 0, 65535,
                    65535, 0, 0, 62808, 17583, 28230, 34270, 52353, 65535, 25405, 16469, 50368,
                    65535, 2288, 0, 45502, 41562, 41210, 0, 0, 0, 12455, 24196, 6603, 61381, 32094,
                    65535, 38293, 26935, 0, 56485, 23571, 0, 65535, 65535, 3887, 0, 23769, 35498,
                    65359, 45904, 49244, 50016, 18170, 25802, 57805, 6275, 0, 40014, 48221, 0,
                    34096, 19174, 0, 0, 46500, 64157, 11412, 15799, 38925, 13922, 19521, 65535,
                    20869, 13737, 41981, 0, 35285, 25867, 35547, 0, 9233, 55392, 15104, 22359,
                    4984, 19634, 36755, 0, 51291, 58319, 0, 40448, 34394, 51617, 24962, 61537, 0,
                    65535, 0, 31143, 10712, 7806, 19186, 37056, 56531, 32833, 0, 21373, 12174, 0,
                    53641, 24719, 27280, 65535, 8688, 65535, 62789, 27229, 44075, 5195, 16327,
                    9025, 34832, 0, 65535, 22090, 13225, 0, 47555, 6244, 0, 44593, 0, 35484, 0,
                    2325, 40685, 22092, 44924, 46178, 65368, 9266, 29707, 0, 0, 65535, 50833, 0,
                    21400, 62978, 0, 61026, 26749, 13337, 0, 25574, 52313, 0, 0, 64962, 53358,
                    52647, 65535, 49133, 18437, 1622, 11778, 54666, 56220, 0, 1169, 0, 15912,
                    35768, 62873, 23818, 65535, 2818, 33427, 0, 0, 65535, 59160, 0, 53421, 41077,
                    21381, 41874, 6343, 40834, 780, 0, 65535, 31178, 8202, 8508, 62927, 43633,
                    65535, 46092, 34163, 2625, 0, 29143, 51006, 25388, 65535, 185, 12423, 29850,
                    60076, 50120, 65535, 65535, 63649, 32848, 15886, 65444, 48097, 7380, 31562,
                    46947, 39271, 65535, 65535, 53548, 39599, 15808, 53232, 65535, 31948, 20879,
                    49955, 8663, 46829, 57038, 65535, 21028, 100, 62070, 65535, 65535, 65535,
                    14310, 16559, 3505, 35939, 39231, 18137, 61560, 0, 65535, 14160, 65535, 35633,
                    49256, 49060, 65535, 10635, 0, 18089, 53902, 51703, 25072, 17147, 60019, 2659,
                    30111, 22011, 24036, 65535, 27094, 17743, 65535, 21564, 56091, 65535, 38013,
                    65535, 60769, 23520, 18304, 65535, 16022, 0, 34319, 33171, 29047, 55868, 65535,
                    17933, 65535, 2736, 28030, 2749, 22311, 23076, 38977, 65535, 65377, 18725,
                    21146, 65535, 65535, 65535, 65535, 44397, 13518, 56794, 53633, 39264, 60310,
                    4937, 65535, 16202, 65535, 1019, 0, 0, 16339, 13573, 41707, 32032, 65535,
                    60367, 39817, 37439, 61697, 28656, 50899, 37509, 50925, 52721, 28115, 9619,
                    65535, 0, 4611, 38129, 65535, 0, 45675, 57194, 0, 53235, 37414, 34468, 12960,
                    18169, 65535, 65535, 28127, 40208, 65535, 53939, 11195, 6114, 65535, 8356, 0,
                    0, 8478, 17032, 22253, 34196, 56659, 38842, 65535, 60399, 40348, 65535, 65535,
                    65535, 20553, 18569, 47976, 0, 9349, 65535, 64824, 32487, 21898, 0, 0, 33681,
                    42983, 9531, 20899, 22637, 32943, 26184, 46825, 14602, 0, 19651, 3047, 45519,
                    23110, 0, 44428, 65535, 0, 40075, 2017, 29736, 28347, 10813, 0, 65535, 65535,
                    4001, 16040, 54579, 6004, 65535, 35622, 23979, 19375, 45152, 42969, 65535,
                    63081, 0, 65535, 46977, 65535, 38179, 24603, 24347, 0, 1924, 9989, 57580,
                    17878, 0, 54668, 65535, 65535, 0, 3043, 0, 40109, 65535, 65535, 32880, 46327,
                    20891, 0, 64915, 39101, 65535, 65535, 56014, 24983, 14799, 53973, 23, 65535,
                    21766, 56051, 0, 35359, 52329, 55744, 31220, 47594, 18328, 65535, 58049, 65535,
                    21567, 31425, 10777, 65535, 52874, 0, 0, 65535, 39730, 65535, 56513, 33269, 0,
                    8249, 65535, 65535, 54792, 62095, 57965, 55334, 15079, 46798, 65535, 0, 65535,
                    20468, 0, 20490, 26257, 20018, 10499, 56992, 0, 48274, 64667, 34978, 45606,
                    15361, 51266, 26131, 0, 40873, 47133, 21663, 45292, 61093, 15164, 28827, 48067,
                    0, 32565, 0, 44697, 8495, 40868, 28065, 0, 47467, 0, 57805, 15727, 1733, 23818,
                    51710, 54630, 20324, 34759, 65535, 8497, 48869, 65535, 65535, 32842, 31005,
                    4986, 41264, 0, 18234, 2317, 27837, 65535, 65535, 65535, 65535, 17253, 65535,
                    43396, 0, 57730, 56751, 11723, 0, 0, 57828, 0, 31843, 8550, 21509, 35418,
                    25675, 50217, 40864, 27637, 198, 47789, 49560, 17927, 53636, 57412, 65535,
                    26444, 30963, 28222, 0, 35268, 6196, 51675, 27787, 35922, 65535, 0, 65535,
                    23974, 65535, 53708, 11796, 47395, 14355, 0, 65075, 57876, 40671, 0, 56759,
                    15158, 56532, 3111, 65535, 0, 55348, 6524, 25438, 58926, 4399, 40626, 65535,
                    38619, 1213, 65535, 22826, 28313, 34317, 18224, 4124, 0, 0, 56282, 0, 65535,
                    44874, 17490, 28788, 65535, 64121, 41161, 36693, 21622, 65535, 8343, 36507,
                    60145, 61621, 65535, 55777, 14604, 27003, 0, 65535, 23557, 63611, 8999, 18885,
                    0, 41319, 47607, 29810, 0, 14379, 65535, 11638, 52033, 11588, 21268, 471,
                    65535, 4484, 65535, 65535, 53874, 36592, 11884, 61764, 40562, 65535, 0, 65535,
                    29007, 0, 49359, 58808, 54630, 21758, 5796, 65535, 2888, 23723, 52689, 65535,
                    65535, 0, 16629, 33754, 59333, 52121, 15768, 65535, 18733, 12772, 0, 65535,
                    65535, 34887, 43469, 47215, 1104, 14317, 65535, 59894, 65535, 17818, 46477,
                    52159, 25744, 48347, 28203, 0, 10350, 32958, 40100, 37624, 0, 41061, 62495,
                    37326, 9311, 895, 22836, 23241, 26240, 0, 62330, 0, 65535, 65535, 0, 13893,
                    65535, 65535, 41727, 65535, 65535, 38466, 48677, 60076, 65535, 2361, 51752,
                    48383, 65535, 65535, 11857, 31596, 46835, 33672, 38495, 61288, 65535, 37792,
                    4768, 5803, 39715, 0, 65535, 59595, 55872, 18539, 51765, 50441, 57923, 2729,
                    65535, 65535, 65535, 65535, 0, 0, 23986, 11648, 53584, 38608, 46588, 16709,
                    19405, 0, 43249, 0, 7084, 20534, 19869, 13681, 32927, 89, 54050, 62061, 59910,
                    0, 17825, 36474, 0, 65535, 65535, 63177, 20751, 30664, 17310, 0, 37159, 41370,
                    21825, 37469, 39167, 11905, 65535, 9090, 65535, 49203, 27222, 19559, 65535,
                    53533, 27928, 65535, 65535, 56086, 10313, 345, 26472, 18068, 64608, 18909,
                    26265, 0, 13671, 22892, 41003, 43821, 0, 49373, 65535, 0, 65535, 5152, 65535,
                    56741, 8722, 65535, 25584, 65535, 18648, 48891, 21501, 24813, 65535, 47356,
                    22045, 24136, 0, 33576, 11205, 51393, 61021, 65535, 6876, 0, 0, 39946, 3635, 0,
                    20390, 65535, 0, 22679, 42574, 12320, 35666, 0, 24396, 12849, 24558, 30373, 0,
                    53048, 46770, 32315, 0, 23214, 59776, 54117, 49942, 34596, 34613, 40854, 3020,
                    13640, 65535, 13645, 19266, 65535, 3336, 65535, 48254, 42699, 50152, 23059,
                    48501, 0, 49861, 25705, 26543, 65535, 59138, 7178, 20084, 48454, 65535, 55045,
                    0, 0, 61596, 0, 0, 17922, 51103, 28139, 18819, 0, 0, 51714, 65535, 55308,
                    49758, 49590, 1580, 65535, 58089, 12008, 65535, 41623, 65185, 6207, 52119,
                    57846, 61438, 8642, 0, 65535, 51975, 43645,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_chaos_0/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe44dd00cd673ec9a1ac4c4c809b2dc4a709e6c606045d3098bb6b6daff757086");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_chaos_1() {
    let value = ComplexTestStruct {
        a: 23928,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            29889, 65535, 6919, 17783, 48165, 15126, 7391, 38239, 63793, 21029, 0, 12957, 0, 65535,
            37939, 0, 36792, 40312, 18795, 65535, 16161, 33193, 65535, 28805, 0, 0, 65535, 21297,
            25181, 47343, 37152, 37806, 0, 53741, 22927, 0, 65535, 11439, 7165, 46874, 65535,
            39619, 0, 62528, 29239, 17651, 9759, 0, 37245, 51106, 3338, 28851, 65535, 0, 65535,
            65535, 18570, 65063, 34103, 44595, 8237, 18797, 18594, 18347, 65535, 65535, 0, 33137,
            12344, 47830, 55280, 65535, 65535, 38114, 0, 1008, 65535, 31021, 65535, 42517, 0,
            24713, 63922, 27145, 0, 50010, 1599, 61355, 65535, 26108, 18220, 26393, 0, 45990,
            64433, 36336, 17209, 65535, 14119, 65535, 9334, 0, 31089, 62504, 16027, 65535, 0,
            65535, 60568, 0, 32238, 0, 46010, 35044, 34389, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 19026, 0, 17023, 65535, 65535, 43214, 59578, 65535, 0, 54736, 44280, 10631,
                0, 41177, 36866, 0, 43539, 5383, 2108, 61419, 18768, 54613, 30583, 65535, 0, 37617,
                50502, 33184, 42685,
            ]))
            .unwrap(),
            c: 1,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 17793412287676985290, c: 4294967295 },
            FixedTestStruct { a: 255, b: 15220989594761614009, c: 870542969 },
            FixedTestStruct { a: 86, b: 9554779496121898099, c: 2100649645 },
            FixedTestStruct { a: 255, b: 4565818526977346057, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 62073,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 26,
            },
            VarTestStruct {
                a: 800,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    62938, 20269, 17563, 15435, 0, 65535, 90, 52191, 65535, 0, 0, 35688, 25942,
                    65329, 21204, 10371, 57275, 16630, 3937, 29009, 0, 60563, 65535, 65535, 38578,
                    65535, 43551, 53312, 17683, 34624, 29851, 65535, 0, 27852, 65535, 54182, 14437,
                    34143, 40610, 16806, 14449, 42166, 28557, 27795, 20070, 64828, 32834, 0, 65535,
                    48398, 6320, 19659, 5683, 0, 4312, 21067, 54431, 7444, 65535, 60633, 21231,
                    56229, 8769, 65535, 10843, 43329, 52833, 9279, 65535, 10484, 9956, 12516,
                    65535, 10280, 0, 65535, 0, 0, 26113, 65535, 27042, 0, 48768, 65535, 6208,
                    11681, 0, 0, 65535, 43224, 0, 44595, 65535, 0, 65535, 5173, 39880, 43747,
                    31104, 58132, 65535, 65535, 17276, 33984, 43531, 50275, 65535, 65535, 45812,
                    16477, 1405, 22591, 43586, 25804, 50168, 50459, 0, 24936, 12197, 26182, 4527,
                    56362, 30828, 46154, 23242, 8281, 331, 65535, 25470, 26785, 47585, 32255,
                    43276, 13538, 52447, 46594, 65535, 54680, 0, 43938, 18929, 30576, 65535, 3795,
                    5153, 58648, 42637, 35524, 0, 25273, 27459, 6911, 44441, 42821, 36089, 0,
                    14992, 0, 65535, 0, 65535, 47677, 65535, 26754, 39541, 65535, 17340, 65535,
                    20667, 62553, 0, 0, 0, 0, 0, 20674, 9003, 65535, 0, 14930, 60008, 6208, 0,
                    16686, 9958, 0, 65535, 22200, 23851, 65535, 10941, 30261, 0, 57506, 54836, 0,
                    42068, 5741, 65535, 37640, 49352, 46011, 65535, 65535, 11423, 65535, 34526,
                    654, 33223, 3100, 55208, 26197, 23663, 39703, 0, 65535, 47917, 65535, 21233,
                    65535, 0, 64998, 40, 0, 36638, 32929, 65535, 15419, 1170, 30103, 20755, 0,
                    65535, 0, 65535, 61080, 0, 13976, 65535, 0, 65535, 32565, 65535, 65535, 65535,
                    64917, 37253, 59141, 65535, 13465, 43640, 65535, 65535, 65535, 3482, 60354,
                    65535, 2897, 65535, 0, 28379, 650, 1834, 0, 35440, 20988, 32061, 0, 43484,
                    65512, 15787, 49753, 11912, 49125, 31150, 27013, 33230, 0, 0, 58873, 0, 16139,
                    14407, 65535, 59984, 65535, 40876, 0, 580, 55443, 12332, 65535, 4376, 59369, 0,
                    0, 9179, 59707, 37229, 13137, 61658, 65535, 40750, 0, 24707, 0, 37300, 44171,
                    45167, 1699, 61512, 24301, 26347, 0, 33404, 23408, 65535, 0, 50449, 60326,
                    41765, 39225, 0, 25509, 28458, 9356, 0, 28831, 8407, 34956, 51787, 48790,
                    24757, 0, 52233, 61935, 7650, 31345, 62598, 25110, 8387, 22915, 0, 0, 0, 14173,
                    36401, 8292, 0, 17914, 59149, 65535, 43880, 36577, 0, 59745, 0, 65535, 65535,
                    0, 7410, 26037, 38540, 0, 18327, 47964, 65535, 0, 39161, 65535, 0, 18696, 0,
                    43254, 22230, 65535, 42210, 35083, 65535, 65535, 65535, 35571, 8339, 9211,
                    27888, 36088, 33040, 47303, 59394, 0, 21376, 52445, 65131, 7412, 65535, 0, 0,
                    65535, 36885, 40427, 34053, 63568, 21608, 65535, 2389, 40753, 31472, 19881,
                    19502, 65535, 5001, 16431, 65535, 0, 65535, 0, 55123, 0, 0, 24205, 12377, 2226,
                    54967, 40063, 15322, 0, 22226, 11986, 35945, 5778, 65535, 0, 9565, 56057,
                    65535, 60267, 25468, 0, 52666, 0, 17197, 19060, 32580, 63047, 24207, 65535,
                    45706, 33575, 46627, 18858, 15277, 37012, 65535, 8104, 39709, 18440, 21007, 0,
                    41629, 65535, 1904, 35001, 65535, 52188, 14481, 6627, 40027, 65535, 13212,
                    64523, 65535, 42804, 54631, 32644, 0, 0, 34675, 22244, 60815, 40116, 1871,
                    65535, 65535, 11487, 20115, 65535, 0, 40597, 42598, 61981, 0, 496, 18274, 3491,
                    36353, 50677, 0, 48933, 0, 65535, 53297, 65535, 65535, 29240, 42064, 21616,
                    65535, 0, 3468, 65535, 0, 0, 65535, 2423, 19445, 2341, 0, 14495, 65535, 24174,
                    63436, 32779, 0, 62660, 65535, 65535, 57542, 65535, 65535, 51233, 36751, 21822,
                    54724, 50549, 44139, 23246, 0, 6074, 65535, 2323, 58804, 6045, 31108, 9106, 0,
                    0, 36357, 30236, 34660, 36276, 2001, 0, 14200, 60992, 9116, 0, 27313, 65535, 0,
                    0, 25349, 23388, 32057, 63389, 65535, 46388, 65535, 29201, 65535, 0, 23343,
                    33407, 63575, 40290, 0, 65535, 54978, 65535, 65535, 65535, 3848, 2718, 49738,
                    65535, 625, 31066, 0, 0, 30095, 0, 64093, 0, 64096, 18947, 65535, 7722, 0, 0,
                    25395, 49807, 65535, 0, 0, 65535, 0, 6660, 35329, 55462, 63818, 65535, 4514, 0,
                    19541, 49223, 56753, 0, 56969, 62804, 65535, 65535, 65535, 0, 65535, 65535,
                    59636, 27656, 51250, 63221, 18399, 1896, 65535, 13769, 0, 21999, 0, 37953,
                    35537, 65535, 65535, 28120, 45195, 29110, 64446, 58981, 31734, 25965, 59080,
                    46482, 4988, 65535, 13561, 54718, 0, 44476, 63591, 53370, 0, 9374, 8080, 50320,
                    0, 23931, 9764, 22233, 17028, 38984, 0, 65535, 0, 4149, 52630, 0, 65535, 65535,
                    0, 48619, 46004, 41064, 52026, 65535, 7760, 10244, 0, 46339, 4348, 0, 65535,
                    22454, 61616, 0, 64147, 65535, 63801, 7480, 0, 27265, 51261, 5099, 1467, 42065,
                    65535, 3100, 49552, 40801, 61079, 60770, 0, 65535, 22338, 65535, 31147, 39532,
                    21562, 30237, 65535, 9499, 20275, 35286, 1765, 0, 0, 49157, 19748, 61242,
                    54599, 0, 0, 0, 60379, 0, 9637, 63037, 30007, 4393, 42401, 48070, 0, 33054,
                    26852, 59311, 27369, 0, 14316, 28571, 0, 45181, 35133, 65535, 34011, 6172, 0,
                    0, 50253, 37576, 41224, 12831, 0, 35794, 7512, 38732, 65535, 1122, 24768,
                    15106, 65535, 65535, 22040, 61866, 27964, 0, 0, 0, 65535, 39621, 28686, 0,
                    27174, 26445, 48971, 36446, 65535, 42895, 27781, 58277, 65535, 65535, 0, 0,
                    33561, 65468, 26468, 23033, 0, 1446, 37527, 60756, 65535, 65535, 0, 0, 65535,
                    21123, 24860, 10033, 0, 0, 0, 42228, 5297, 48380, 60820, 36798, 36925, 46296,
                    29458, 11317, 32870, 33007, 20184, 45212, 0, 2788, 39630, 42242, 13280, 0,
                    60808, 53506, 65535, 65535, 0, 47996, 17358, 0, 0, 60619, 26783, 65307, 42859,
                    9100, 44458, 65535, 65535, 2604, 41441, 61031, 0, 30556, 0, 65535, 42887,
                    65535, 65535, 0, 39060, 37314, 4300, 0, 6081, 61545, 28986, 48310, 18098,
                    39022, 65535, 20561, 65535, 46789, 0, 40835, 0, 27065, 0, 1584, 35361, 21967,
                    61880, 16035, 47771, 0, 65358, 38282, 30306, 0, 65535, 30244, 29372, 65535,
                    8978, 65535, 65535, 9970, 27327, 65535, 1136, 7355, 33874, 10033, 28267, 0,
                    517, 65535, 61978, 34431, 47119, 65535, 65535, 21415, 23147, 3856, 0, 65535,
                    57178, 65535, 0, 65535, 65324, 32940, 0, 35668, 27872, 32693, 65535, 41444,
                    25059, 27902, 20992, 33133, 65535, 59989, 14524, 0, 46057, 0, 0, 11439, 0, 0,
                    49872, 17164, 37619, 0, 65535, 17186, 7201, 32437, 10954, 18970, 41971, 2867,
                    65535, 28834, 65535, 34027, 0, 51640, 23157, 46423, 49053, 27572, 0, 39559,
                    30212, 0, 0, 24627, 0, 45093, 65535, 63515, 65535, 0, 5954, 65535, 49571,
                    65535, 34413, 65535, 48071, 0, 49604, 65535, 45658, 39299, 9142, 4324, 38519,
                    63830, 65535, 0, 65535, 65260, 56201, 65535, 65535, 2542, 32366, 65535, 35069,
                    27145, 17588, 38180, 57927, 0, 0, 65535, 62362, 65535, 130, 14100, 0, 64598,
                    23755, 1191, 38947, 65535, 53102, 65535, 45557, 32862, 50537, 26242, 0, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_chaos_1/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf55c38f28e2305a905c22ee6a1bc0001216ec753835851e48b8f4adf0607ff2a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_lengthy_chaos_2() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            64091, 22003, 13074, 45519, 65535, 52650, 31421, 12635, 9020, 17970, 32335, 29377,
            65535, 65535, 8406, 43334, 0, 62215, 0, 16878, 8469, 19652, 12685, 35891, 26485, 36969,
            65456, 65535,
        ]))
        .unwrap(),
        c: 82,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 25276,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                60488, 33511, 43307, 65535, 0, 14084, 22981, 5725, 27774, 22256, 39489, 65535,
                9584, 26646, 28953, 8531, 26976, 0, 0, 31211, 4043, 13177, 0, 32231, 33649, 40427,
                41903, 29333, 56158, 45432, 39592, 42168, 38710, 48014, 65535, 65535, 65535, 24232,
                48985, 65535, 63114, 6787, 16801, 50432, 65535, 0, 0, 55341, 23706, 57500, 65535,
                0, 0, 1769, 41099, 0, 0, 23367, 42347, 20795, 20987, 65535, 37657, 4543, 65535,
                52686, 6492, 0, 65535, 48531, 65535, 49801, 48078, 65535, 4261, 0, 65535, 17400,
                46951, 0, 0, 0, 15476, 0, 1199, 65535, 17642, 50317, 65535, 0, 65535, 44680, 23443,
                52445, 42175, 65535, 65535, 8549, 22609, 8030, 49586, 65535, 0, 9879, 31593, 16284,
                20487, 36578, 65535, 65535, 5735, 0, 37801, 55937, 27964, 0, 6736, 65535, 60370,
                20162, 47374, 37263, 13980, 0, 10702, 65535, 3339, 57178, 0, 0, 19402, 65535, 0,
                11231, 6407, 0, 13722, 36753, 40251, 23883, 62879, 55791, 0, 39162, 18365, 37185,
                0, 44094, 44363, 12369, 65535, 15711, 65197, 65535, 0, 51171, 47599, 31140, 61022,
                14786, 34441, 4948, 32920, 50850, 65535, 0, 61978, 65535, 65535, 52341, 0, 65535,
                60547, 3936, 65535, 0, 0, 0, 29188, 3244, 47636, 49081, 2430, 0, 17835, 0, 8899,
                17297, 50312, 51270, 17370, 16059, 65535, 65535, 39408, 33633, 32022, 23894, 0,
                65535, 43279, 0, 26389, 0, 0, 37775, 41217, 0, 21367, 0, 0, 12999, 0, 51965, 5120,
                23560, 55262, 54104, 39305, 27552, 0, 65535, 48256, 65535, 64870, 58579, 42177,
                42904, 64260, 33772, 13643, 12616, 27874, 26692, 65535, 840, 21541, 50092, 62853,
                65535, 1836, 18414, 53577, 0, 7647, 4904, 9848, 2071, 0, 52722, 65535, 34846,
                31715, 25748, 0, 65535, 0, 58001, 0, 63834, 0, 28884, 65535, 2943, 65535, 65535,
                53817, 65535, 0, 0, 26377, 0, 39246, 6097, 38704, 46049, 13283, 11324, 44506,
                58169, 65535, 30018, 23712, 6208, 13929, 62917, 65535, 1927, 40867, 0, 47138,
                32969, 56612, 65535, 218, 5727, 43531, 0, 65535, 17374, 0, 19995, 65535, 17832,
                65535, 37061, 0, 60914, 19822, 39630, 0, 0, 65535, 7920, 29950, 43330, 46664,
                25966, 47928, 42048, 50406, 2848, 65535, 0, 61791, 2152, 63197, 16939, 4671, 35410,
                28018, 65535, 5544, 62954, 65535, 37200, 65535, 26000, 5756, 39350, 0, 6069, 36617,
                28810, 65535, 37891, 65535, 65535, 0, 48298, 65535, 62590, 51345, 7827, 57831, 0,
                61108, 59406, 19016, 48525, 8767, 61864, 4433, 65535, 52590, 36308, 21351, 17028,
                27169, 65535, 13476, 8731, 26506, 13077, 65535, 0, 51444, 0, 51040, 65535, 49373,
                14331, 15864, 0, 2543, 20578, 32572, 10336, 10272, 65535, 17078, 0, 65535, 19441,
                65535, 63151, 17893, 41224, 65535, 10717, 18073, 45289, 33243, 18315, 65535, 29556,
                8833, 20633, 40947, 12952, 33729, 65049, 64599, 0, 0, 65535, 8873, 21794, 0, 38453,
                37209, 0, 0, 55840, 48675, 58446, 3138, 65535, 6514, 65535, 65535, 31636, 42743,
                43782, 0, 0, 0, 65470, 65457, 65535, 41799, 6048, 0, 13876, 25331, 743, 65535,
                39249, 12142, 64054, 57320, 65535, 27708, 65535, 31809, 65535, 28332, 0, 22019,
                65535, 47465, 50064, 21949, 36685, 5691, 35886, 58038, 0, 63209, 65535, 0, 31484,
                50994, 34055, 18494, 65535, 8103, 22574, 65535, 0, 26807, 65535, 16783, 65535,
                10019, 28601, 33501, 18814, 15228, 4328, 65535, 58902, 50253, 25707, 65535, 46483,
                20330, 42424, 0, 0, 59411, 6396, 10349, 25008, 32937, 14950, 9093, 39093, 29078,
                65535, 65535, 506, 34487, 53079, 45999, 0, 33137, 0, 65535, 0, 58699, 28039, 0,
                65468, 65535, 0, 0, 6574, 61046, 31937, 65535, 30940, 40773, 49375, 65535, 834,
                26037, 65535, 56557, 0, 31318, 0, 40124, 26149, 17460, 28655, 28946, 65535, 44910,
                51791, 0, 0, 0, 0, 0, 50187, 41892, 8142, 34999, 65535, 19769, 58842, 65535, 50310,
                47276, 0, 42377, 48373, 12500, 65261, 26632, 28408, 39881, 65535, 45711, 0, 0, 0,
                53947, 44186, 65535, 0, 32592, 65535, 8284, 40565, 27718, 0, 0, 26671, 65535,
                65535, 58380, 34337, 47478, 34670, 65535, 14512, 46240, 27217, 24633, 57711, 51788,
                23811, 27409, 34717, 65535, 64493, 52959, 61256, 65535, 21581, 26406, 61333, 44434,
                65535, 65535, 48886, 22061, 60696, 0, 0, 61292, 10307, 20782, 65535, 1190, 21788,
                4726, 37053, 65535, 65535, 65535, 62987, 6507, 16768, 65535, 0, 32129, 38073,
                59964, 65535, 41736, 65066, 63911, 31979, 19771, 65535, 0, 35150, 14569, 20335,
                65535, 65535, 50671, 13567, 65535, 0, 65535, 65535, 0, 30616, 63297, 18346, 21876,
                0, 21992, 14631, 0, 0, 10551, 60791, 0, 30477, 0, 65535, 65535, 0, 9582, 59624,
                14482, 6442, 3325, 33611, 50245, 0, 0, 4618, 42352, 29055, 54658, 26935, 16986,
                30788, 34357, 53247, 0, 37311, 0, 17753, 0, 0, 65535, 35175, 7762, 47813, 0, 52739,
                65535, 50871, 0, 13171, 65535, 65535, 0, 21530,
            ]))
            .unwrap(),
            c: 201,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 7254947677528182112, c: 2135981308 },
            FixedTestStruct { a: 26, b: 4081821293207498810, c: 172786519 },
            FixedTestStruct { a: 0, b: 14936662733316973461, c: 0 },
            FixedTestStruct { a: 142, b: 0, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 20573,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([11366])).unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 12258,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    14409, 65491, 38971, 21889, 24163, 189, 8341, 15902, 0, 24113, 27305, 0, 60376,
                    65535, 65535, 36350, 0, 15484, 65535, 57437, 16858, 38474, 32423, 35593, 0,
                    25557, 45720, 33601, 0, 51181, 5660, 36933, 65535, 0, 35862, 30407, 32101,
                    65535, 0, 65535, 0, 65535, 0, 52881, 33649, 48842, 65535, 31700, 58549, 0,
                    44247, 35504, 65535, 49312, 11086, 65535, 40748, 0, 12876, 65535,
                ]))
                .unwrap(),
                c: 84,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/ComplexTestStruct_lengthy_chaos_2/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2188f5a9533d6ac453782f96a17aa100bcd8847755b95fc6a1cff5313b696357");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_last_offset_11_overflow() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_last_offset_11_overflow/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_last_offset_2_overflow() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_last_offset_2_overflow/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_last_offset_7_overflow() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_last_offset_7_overflow/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_offset_11_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_offset_11_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_offset_11_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_offset_11_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_offset_2_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_offset_2_minus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_offset_2_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_offset_2_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_offset_2_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_offset_2_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_offset_7_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_offset_7_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_lengthy_offset_7_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_lengthy_offset_7_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
fn test_containers_complex_test_struct_max() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x88848f1694182d82948d7d61dd420638ced418fbd7b0d599a5006133e5f275e6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_0() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([65535, 65535, 65535]))
                    .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x49523d3cfe6d9486ae984e3ed16997da67d623cb9d91a7ddf79474273557c278");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_1() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x851e0a459531f06bce0ae644ff2beec71f59bde9272bb0608d3d81e4be6c7b79");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_2() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([65535, 65535])).unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x89ef01b048542f12299fc4c7c1ca891c52d451e65e1cecb6eea027d0879a437b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_3() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x895ae3955634ee47df5502b910cc7eb4ce1638e8b6ed2d394f3d102ad15f7fbc");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_4() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([65535])).unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2764a7c55d05740396bcaa0aaad1c79ee51e6e0f00d857c6ef00adbc925359eb");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_5() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xcb22d4bcd66eee249a2fa9880a5014688bffb619d1a1d0cece0958fdc6ef67a0");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_6() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x98176543e9f5948bfcce73bfc90b0487cf2feba17c54f123a0186278585d2255");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_7() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x86e208bf04cbe646770f39838f02ff47d77c3eecd6416a15c963200090343ce6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_8() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xfc3e2fdcfc18a9a1a2939ab101ea90d5822364e8169f74ac41563bde13f77dde");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_9() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
                    65535,
                ]))
                .unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3df75b0d07a91733fa91042699b686dd7f871b3bc647bd282e11b83d7b8bad4e");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_chaos_0() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            33548, 65535, 27252, 30260, 7129, 50745, 46575, 65535, 14243, 49842, 12278, 16138,
            46230, 33829, 2577, 2022, 65535, 18736, 0, 65535, 65535, 65535, 0, 56657, 25669, 10974,
            65535, 65535, 0, 40461, 65535, 65535, 0, 56649, 520, 65535, 55695, 28949, 65535, 33652,
            65535, 18046, 46511, 0, 23895, 34814, 0, 1971, 65365, 63115, 37034, 65535, 63575,
            42679, 0, 46963, 58990, 0, 47333, 65535, 25439, 39144, 0, 57281, 20912, 48877, 65535,
            46263, 9042, 4492, 19720, 28431, 39965, 48152, 0, 48448, 64012, 27587, 33352, 65401,
            39127, 45311, 0, 57195,
        ]))
        .unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 54201,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                55336, 0, 804, 65535, 47507, 38649, 35846, 5940, 0, 21926, 6486, 17935, 65535,
                2304, 65535, 26991, 0, 27545, 7368, 0, 60691, 18307, 33168, 25600, 0, 65535, 65535,
                65535, 0, 64943, 32591, 1082, 16841, 54466, 10419, 14549, 28409, 30081, 40738,
                28063, 2187, 28786, 49383, 41814, 9204, 3867, 65535, 8527, 23976, 65535, 65535,
                45614, 0, 65535, 11694, 49449, 53023, 60439, 0, 37323, 41588, 0, 63749, 60364,
                57863, 65535, 32261, 5501, 54901, 0, 65535, 13720, 65535, 22025, 0, 65535, 0, 0,
                65535, 65535, 22028, 17856, 0, 0, 22931, 26233, 57555, 49227, 31081, 0, 53264,
                8543, 47251, 65535, 65535, 46007, 0, 65535, 65535, 65535, 56648, 38259, 65535,
                65535, 0, 0, 3432, 44084, 65535, 0, 65535, 56134, 65535, 63039, 38472, 65004,
                33597, 39618, 19191, 65535, 46083, 49728, 2052, 57048, 60297, 24389, 3829, 41159,
                6577, 48080, 65535, 12345, 39396, 9234, 0, 17540, 19030, 64618, 27936, 15418,
                65535, 19212, 2270, 14574, 8274, 51038, 47945, 65535, 65535, 3355, 58506, 55248,
                27206, 0, 45155, 30990, 0, 28353, 63892, 61538, 53755, 56709, 15084, 48805, 32705,
                24547, 39, 55758, 52857, 23455, 0, 20038, 65535, 25134, 47249, 1695, 65535, 0,
                21343, 50046, 87, 0, 62060, 13800, 0, 1171, 65535, 57321, 65535, 64415, 48406,
                65535, 59768, 45725, 6366, 51063, 24621, 97, 65535, 0, 65535, 34525, 17312, 65535,
                31510, 65535, 17301, 0, 16481, 28664, 1550, 10239, 65535, 0, 43865, 332, 5015,
                65535, 0, 0, 0, 65535, 49795, 16102, 65535, 48807, 35446, 63860, 31453, 65535, 0,
                65535, 0, 7538, 47373, 8667, 0, 21516, 65535, 57300, 65535, 0, 65535, 0, 24429,
                65535, 61180, 65535, 61259, 0, 65535, 11318, 23522, 9125, 33169, 35984, 42778,
                17336, 0, 10029, 42762, 57250, 43791, 46043, 65535, 23382, 0, 62152, 49789, 34666,
                32564, 63999, 45527, 16076, 27308, 41650, 0, 23325, 1409, 0, 0, 54988, 65535, 0,
                5979, 19737, 63941, 31574, 61560, 0, 52180, 65535, 24151, 0, 26975, 19618, 38892,
                8268, 0, 65535, 35189, 34319, 22425, 31747, 26069, 55816, 65535, 44108, 36310,
                65535, 32942, 4985, 14791, 0, 0, 1660, 14225, 0, 44956, 0, 44845, 38802, 0, 54130,
                38576, 65535, 1353, 58676, 51455, 18586, 62868, 36050, 40534, 65535, 46338, 6783,
                8041, 65535, 0, 52797, 5416, 65535, 61293, 43251, 0, 13533, 49843, 65535, 0, 65535,
                0, 26823, 4408, 51144, 0, 54882, 21333, 64283, 65535, 65535, 65535, 0, 0, 246,
                48148, 65535, 63205, 65007, 49038, 36731, 0, 18006, 62456, 65535, 0, 64779, 20187,
                65535, 29021, 34202, 35477, 65535, 17748, 17172, 50569, 15429, 0, 65535, 35586,
                50071, 17911, 33101, 34178, 26290, 35925, 65535, 65535, 37143, 49432, 26353, 23249,
                56237,
            ]))
            .unwrap(),
            c: 65,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 165, b: 16784664124676108355, c: 4294967295 },
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 1725152611 },
            FixedTestStruct { a: 166, b: 10459676645310975742, c: 2134711694 },
            FixedTestStruct { a: 255, b: 10502317145153744996, c: 2579023064 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 47551,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    57574, 8784, 55475, 0, 41206, 44871, 56810, 0, 2731, 19845, 62392, 26341, 6370,
                    41686, 65535, 65535, 39165, 9268, 22272, 45961, 63332, 65535, 0, 0, 42053,
                    38318, 0, 65535, 37004, 65535, 61189, 61386, 59672, 45287, 65535, 65535, 39339,
                    309, 0, 31374, 27880, 27444, 17596, 17191, 53444, 65535, 65535, 20700, 42906,
                    0, 59216, 26987, 65535, 16905, 36148, 10563, 20190, 0, 0, 3365, 65535, 65535,
                    0, 62935, 54716, 65535, 65535, 12866, 37140, 45119, 50746, 39707, 47532, 31877,
                    7658, 65535, 65535, 19046, 19181, 24801, 35127, 0, 38196, 16809, 39889, 65535,
                    65535, 38112, 65535, 65535, 65535, 65535, 29278, 0, 59338, 8366, 34991, 11615,
                    18695, 0, 52307, 22121, 57250, 46975, 0, 33793, 65535, 65535, 38024, 18475, 0,
                    40761, 18875, 578, 10165, 41160, 11418, 0, 65535, 0, 25671, 15288, 22204, 7384,
                    0, 65535, 24492, 1905, 11124, 57500, 7029, 0, 10808, 65535, 13811, 31975,
                    65535, 34159, 4181, 11973, 51794, 0, 16071, 46235, 31851, 40193, 22591, 531,
                    31946, 0, 0, 65535, 0, 48556, 15177, 0, 35087, 19440, 595, 20155, 35173, 35336,
                    64153, 0, 65535, 55180, 52004, 65535, 0, 32674, 9198, 65535, 48837, 57874,
                    46004, 65535, 65535, 0, 65535, 34574, 0, 65535, 29576, 39237, 65535, 0, 0,
                    41609, 30823, 0, 65535, 5151, 1793, 2864, 42727, 2491, 65535, 62993, 0, 0,
                    49657, 10712, 30588, 11749, 1495, 8457, 65535, 0, 58353, 124, 1481, 9590, 2702,
                    677, 38550, 0, 65535, 59880, 30373, 17872, 49784, 18065, 25544, 33499, 64352,
                    63893, 65535, 20997, 14817, 0, 56598, 61226, 30020, 40032, 51973, 64633, 57632,
                    65535, 27597, 46749, 65535, 30916, 16960, 65430, 0, 41326, 7563, 0, 34152,
                    65535, 0, 52634, 0, 57334, 51069, 51556, 61918, 11647, 8270, 0, 65535, 10586,
                    12225, 49116, 20133, 65535, 60597, 42895, 46087, 33385, 39233, 36900, 65535,
                    65535, 47013, 11443, 40026, 65136, 0, 24408, 30579, 0, 0, 45228, 0, 54085, 0,
                    55581, 53112, 30617, 47477, 5298, 0, 11311, 0, 35313, 16998, 21351, 8359, 1304,
                    49970, 3507, 57786, 56260, 65535, 30257, 36333, 65535, 3575, 5861, 0, 15435,
                    65535, 34878, 0, 48312, 43028, 54455, 56090, 33068, 19848, 0, 44235, 43090,
                    39642, 35395, 65535, 65535, 0, 2975, 27817, 5251, 41801, 34767, 65535, 53842,
                    51779, 0, 31723, 65535, 0, 30110, 33484, 35352, 58292, 47386, 64411, 33751,
                    65535, 29007, 38688, 7125, 11803, 13068, 63754, 53090, 34587, 35542, 65535,
                    6581, 10149, 65535, 0, 0, 45914, 40874, 7128, 26013, 56871, 17350, 65535,
                    23196, 0, 34801, 53619, 24312, 64696, 43269, 16998, 65535, 9736, 20160, 0,
                    65535, 12909, 46171, 65535, 7301, 19, 65535, 17400, 53932, 34104, 50565, 0,
                    9583, 65535, 17632, 53859, 48557, 0, 35909, 51497, 55921, 65535, 0, 38711,
                    54174, 42625, 17568, 38904, 0, 48375, 0, 0, 65535, 65535, 1676, 17801, 7513, 0,
                    65535, 0, 65535, 13531, 65535, 56620, 0, 65535, 41161, 0, 34126, 20564, 49149,
                    24100, 12881, 0, 47538, 38843, 65535, 25012, 19131, 42097, 52976, 0, 65535,
                    12281, 65535, 0, 65535, 48633, 65535, 65535, 65535, 2955, 65535, 34914, 48070,
                    65535, 65535, 46643, 47271, 65535, 0, 49598, 65535, 43144, 65535, 0, 33419,
                    6358, 43758, 0, 0, 39861, 62492, 59018, 40413, 59127, 0, 27666, 65535, 55918,
                    0, 0, 2648, 17859, 0, 65381, 40019, 65535, 40586, 18643, 38833, 60778, 35088,
                    0, 16615, 65535, 49340, 20330, 20458, 65535, 47494, 11203, 43187, 2505, 20405,
                    46548, 40584, 0, 20986, 65535, 65535, 60599, 0, 5984, 23254, 24025, 0, 65535,
                    52763, 43885, 65535, 5673, 31738, 15167, 7853, 63528, 0, 13090, 35859, 54027,
                    64031, 53232, 0, 65535, 65535, 0, 0, 65535, 34731, 65535, 65535, 65535, 0,
                    42675, 25447, 55249, 0, 22908, 37437, 45719, 50270, 65535, 65535, 22236, 52214,
                    62016, 51909, 1017, 65535, 31122, 3302, 24875, 19597, 24486, 64716, 51516,
                    51416, 65535, 65535, 0, 16353, 0, 0, 65535, 65535, 63877, 19691, 0, 37703,
                    65535, 62982, 52948, 8684, 56101, 62786, 29258, 0, 0, 28593, 16491, 12659, 0,
                    24082, 19529, 8470, 35039, 6492, 0, 0, 47210, 49465, 23357, 65535, 8480, 37037,
                    58607, 59514, 64385, 53026, 65535, 28766, 60737, 65535, 34691, 41439, 42882, 0,
                    65535, 55991, 65535, 0, 11407, 16063, 7049, 9135, 12923, 65535, 0, 65535,
                    20274, 0, 22999, 47006, 63989, 11858, 21774, 49916, 37153, 63414, 65535, 8733,
                    44605, 0, 52908, 37977, 65535, 14901, 34690, 65535, 65535, 29558, 23563, 62408,
                    42437, 22378, 65535, 20725, 18729, 0, 65535, 0, 65535, 65535, 40842, 0, 45446,
                    0, 53321, 16785, 29133, 31951, 14485, 0, 31234, 7635, 65535, 17395, 0, 60347,
                    16649, 23084, 0, 48433, 65535, 40921, 45174, 23696, 688, 3603, 28246, 43322,
                    11342, 0, 15627, 36299, 6301, 27901, 56818, 0, 65535, 0, 33201, 8283, 0, 58168,
                    12750, 56526, 65535, 7169, 38011, 35868, 44922, 17629, 30471, 16307, 59197,
                    52511, 38939, 6498, 36590, 63080, 65535, 21344, 0, 58333, 36815, 0, 16488,
                    16310, 0, 3197, 46368, 0, 292, 37374, 43053, 65535, 3804, 20680, 65535, 46929,
                    16913, 16611, 36697, 10334, 34644, 65535, 10180, 26004, 16564, 6316, 21235,
                    10689, 65535, 6528, 0, 38225, 65535, 65535, 22314, 65535, 20975, 5100, 0, 8456,
                    0, 42101, 20837, 18384, 18571, 42939, 5177, 62529, 0, 0, 23623, 0, 34153, 0, 0,
                    0, 16579, 20498, 0, 59146, 0, 65535, 18576, 31481, 36242, 42804, 0, 65535,
                    42698, 46401, 57269, 65535, 58492, 65535, 58409, 65535, 51536, 18534, 64238,
                    16751, 13987, 0, 61909, 64012, 1545, 64832, 3251, 63211, 65535, 55114, 0,
                    54250, 0, 20415, 0, 0, 65535, 38218, 13018, 0, 45422, 4983, 65535, 65535,
                    23435, 49597, 0, 0, 56932, 21668, 0, 425, 65535, 3748, 41752, 24146, 14386,
                    63454, 2571, 38359, 9558, 57512, 3022, 38406, 33526, 52004, 63668, 65535,
                    18294, 40038, 65535, 37914, 65535, 0, 56880, 32036, 0, 0, 0, 0, 61325, 39999,
                    45555, 60978, 59977, 65535, 60245, 0, 54001, 65535, 16271, 53267, 63026, 65535,
                    31232, 0, 0, 34385, 34457, 65535, 0, 0, 22750, 14799, 50248, 4043, 27166,
                    42198, 0, 52729, 48013, 65535, 45422, 0, 65535, 20162, 65535, 49305, 25177,
                    65535, 5590, 0, 8392, 25499, 7724, 0, 46898, 37758, 65535, 65535, 34286, 14859,
                    64325, 0, 30351, 0, 41480, 65535, 65535, 47717, 65535, 60964, 61372, 7, 51179,
                    65535, 57477, 47628, 11910, 0, 9283, 0, 65535, 54701, 41565, 65535, 0, 0,
                    15522, 39831, 24586, 59926, 21706, 65535, 64830, 38577, 54671, 0, 32804, 65535,
                    2312, 63576, 65535, 23153, 55671, 6981, 65535, 35486, 0, 41492, 10429, 61955,
                    0, 65535, 65535, 50191, 48746, 20982, 36322, 65535, 65535, 62589, 15644, 1597,
                    8016, 20948, 32630, 40892, 17482, 0, 0, 3759, 59346, 37782, 55784, 0, 62067,
                    44003, 27072, 34676, 51383, 3289, 28421, 59441, 43722, 0, 47552, 31206, 13961,
                    31785, 46488, 15541, 12747, 56879, 65535, 53177, 0, 0, 35239, 0, 65535, 65535,
                    0, 2903, 41200, 65535,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 25982,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    10299, 40845, 9157, 1513, 5260, 36708, 0, 65535, 22391, 25383, 41857, 65535,
                    5870, 0, 0, 33982, 29977, 6101, 25775, 3733, 65535, 65535, 0, 59747, 65535,
                    60722, 65535, 53619, 0, 14230, 56659, 65535, 52476, 9436, 0, 61651, 11113,
                    23652, 28837, 46402, 65535, 65535, 22676, 65535, 62696, 6057, 18819, 0, 0, 0,
                    23490, 65535, 11574, 60947, 28531, 0, 0, 8652, 65535, 61759, 51954, 0, 0,
                    50510, 52460, 2919, 0, 62480, 61840, 13144, 0, 27578, 35760, 10498, 0, 0, 9958,
                    65535, 7793, 43420, 19814, 65535, 64391, 45374, 39630, 0, 15550, 29818, 65535,
                    8075, 35378, 0, 65535, 65535, 32212, 37525, 3003, 28649, 0, 65535, 44647,
                    55203, 65535, 63172, 55953, 19499, 44062, 65535, 35068, 0, 0, 2502, 0, 54123,
                    8825, 0, 65535, 47187, 14067, 59297, 65535, 0, 7589, 65535, 55565, 0, 60325,
                    6518, 23866, 2719, 34416, 46727, 65535, 46306, 7232, 28462, 65535, 44291,
                    48032, 65535, 5846, 65535, 65535, 65535, 65535, 0, 0, 65535, 22245, 10795,
                    37598, 22369, 0, 56785, 58007, 6855, 7084, 58084, 0, 0, 25800, 65535, 48060,
                    20000, 7379, 65535, 20194, 41803, 59007, 65535, 10646, 65535, 58393, 10050, 0,
                    38902, 13378, 31461, 65535, 24902, 0, 65535, 39897, 19877, 65535, 0, 56974,
                    65535, 59659, 31775, 64391, 55150, 49227, 0, 0, 65202, 46575, 32503, 689,
                    63418, 21223, 52426, 40652, 31684, 54047, 0, 19711, 24638, 0, 9853, 0, 65535,
                    30362, 51785, 14563, 65535, 17174, 46077, 63507, 65535, 31369, 64581, 19172,
                    20717, 9096, 0, 48798, 56743, 33164, 25509, 20853, 0, 26005, 22627, 55027,
                    65535, 0, 62213, 0, 6129, 57145, 22969, 65535, 48897, 16962, 8106, 60396,
                    57229, 31469, 24817, 64928, 22513, 26886, 0, 41026, 39521, 61026, 65535, 65535,
                    0, 32737, 25657, 2560, 65535, 0, 4120, 54355, 15492, 52287, 49836, 6505, 29156,
                    65535, 10611, 6008, 65535, 0, 36959, 0, 19906, 37973, 9841, 0, 46749, 7627,
                    18867, 42436, 11022, 23238, 11233, 65535, 29216, 63821, 32015, 12339, 65535,
                    43390, 32683, 44573, 0, 0, 51768, 40247, 65535, 46940, 7657, 17498, 0, 27203,
                    2673, 39161, 33235, 44277, 65535, 8243, 41619, 63808, 36170, 50009, 28710,
                    10198, 26240, 44772, 0, 2021, 62308, 36767, 63676, 0, 65535, 3553, 39150, 0,
                    65535, 0, 0, 11499, 24130, 1532, 0, 0, 7458, 3714, 0, 0, 857, 57098, 52810,
                    16421, 0, 20422, 0, 12870, 36232, 57898, 16126, 43049, 32480, 65535, 65535,
                    65535, 62095, 56470, 65535, 12599, 65535, 34532, 50264, 65535, 18375, 65535,
                    2547, 0, 65535, 2216, 0, 9572, 14339, 46610, 14231, 49029, 25365, 45017, 37635,
                    65535, 32488, 36307, 0, 14133, 38835, 65535, 43417, 61322, 63946, 65535, 6597,
                    0, 50776, 48943, 65535, 0, 60777, 33818, 0, 0, 9419, 65535, 53740, 34763,
                    45771, 11303, 65535, 12619, 0, 12198, 0, 56189, 22698, 65535, 41845, 62016,
                    50246, 9579, 65535, 65535, 39497, 0, 21150, 2548, 2226, 61281, 4253, 52884,
                    377, 65535, 0, 62008, 54420, 43051, 0, 9371, 0, 8305, 59553, 53148, 37659,
                    65535, 42335, 40163, 46424, 65535, 40396, 65535, 6167, 64998, 11339, 0, 5251,
                    0, 34887, 58919, 22516, 0, 52208, 31078, 4278, 65535, 11095, 60968, 65535, 0,
                    0, 61360, 53998, 2241, 65535, 65535, 25085, 0, 0, 30555, 65535, 64945, 44616,
                    0, 65535, 65535, 65535, 0, 50838, 48805, 0, 0, 37570, 62316, 44712, 29394, 0,
                    28390, 10408, 25130, 14324, 44744, 46253, 45029, 316, 18792, 38865, 36666,
                    40807, 3336, 25176, 39360, 0, 47798, 63773, 43762, 29203, 65535, 0, 65535,
                    10279, 0, 48335, 14468, 39217, 0, 42026, 39024, 65535, 5909, 0, 39849, 0, 0,
                    65535, 24876, 58060, 49819, 59147, 10436, 12145, 62235, 0, 65535, 4552, 0,
                    8406, 46742, 24846, 65535, 28552, 59949, 64839, 0, 4956, 65013, 56052, 64421,
                    0, 0, 0, 65535, 2746, 27946, 21012, 0, 0, 62398, 3870, 0, 48103, 39017, 48636,
                    65535, 65535, 61652, 14988, 54004, 0, 61791, 65535, 48957, 65535, 2530, 33509,
                    65535, 47585, 65535, 31083, 54286, 0, 0, 0, 0, 17777, 65535, 19928, 61296,
                    65535, 32506, 65535, 48774, 65535, 62272, 0, 65535, 51610, 22483, 0, 1759,
                    50005, 41805, 0, 4805, 44512, 23034, 1429, 0, 18365, 65535, 65535, 42220,
                    10886, 65535, 65535, 47372, 65535, 0, 6, 0, 53341, 38787, 65535, 0, 0, 29575,
                    39136, 3899, 52062, 40422, 65535, 65535, 65535, 65026, 65535, 22094, 845,
                    32645, 0, 6448, 53586, 65535, 18107, 43493, 0, 65535, 65535, 45959, 26222, 0,
                    818, 65535, 65535, 0, 47144, 65535, 0, 25456, 44616, 59703, 41068, 44392,
                    50336, 42669, 0, 18849, 8302, 58346, 0, 0, 61887, 46439, 65535, 12242, 4178,
                    35933, 48988, 1199, 22335, 53441, 65535, 0, 53507, 54208, 65535, 0, 20295, 0,
                    41962, 29193, 65535, 65535, 10663, 0, 65535, 28553, 65535, 39782, 26674, 25235,
                    21025, 17613, 40182, 4973, 65535, 4669, 6825, 35358, 65535, 65535, 39640,
                ]))
                .unwrap(),
                c: 151,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7830b5fabc26bdb3f55dfaf8111fe4790a4320c3444bca8c38d1b8ac253f684e");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_chaos_1() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            23886, 48569, 0, 50118, 65535, 32879, 65535, 44111, 18232, 51122, 65535, 62233, 20445,
            43928, 0, 65535, 20354, 18103, 64357, 45709, 26749, 43786, 15955, 11793, 0, 65535, 0,
            0, 0, 23336, 23207, 18859, 59544, 65535, 65535, 0, 62873, 65535, 7006, 49091, 24037,
            15770, 10000, 23699, 47752, 0, 55255, 0, 65535, 37743, 65535, 45651, 33575, 36046,
            41461, 27885, 0, 19862, 65535, 33447, 20, 3345, 0, 5801, 48799, 56772, 34700,
        ]))
        .unwrap(),
        c: 113,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            203, 229, 161, 4, 208, 143, 157, 223, 230, 74, 164, 219, 251, 150, 228, 212, 26, 209,
            240, 242, 102, 119, 173, 220, 13, 227, 92, 32, 216, 103, 186, 217, 235, 119, 125, 136,
            13, 25, 112, 11, 33, 6, 89, 140, 219, 207, 112, 206, 92, 47, 79, 98, 164, 9, 71, 210,
            201, 144, 92, 12, 88, 41, 45, 107, 158, 18, 116, 38, 122, 208, 234, 33, 234, 35, 146,
            168, 5, 156, 84, 244, 18, 128, 40, 133, 19, 88, 75, 203, 21, 167, 49, 250, 146, 167, 4,
            15, 193, 66, 183, 223, 144, 250, 18, 65, 140, 1, 103, 67, 34, 40, 242, 134, 120, 187,
            30, 148, 74, 22, 25, 19, 39, 45, 189, 201, 179, 211, 182, 162, 169, 75, 21, 46, 101,
            249, 30, 134, 252, 103, 29, 239, 167, 228, 12, 67, 173, 120, 249, 34, 151, 196, 16, 98,
            144, 34, 181, 94, 196, 51, 45, 253, 14, 230, 101, 162, 13, 164, 26, 213, 133, 99, 179,
            119, 139, 187, 5, 8, 138, 4, 211, 114, 196, 39, 91, 224, 92, 37, 65, 101, 94, 31, 50,
            154, 43, 22, 165, 100, 14, 248, 131, 47, 38, 120, 167, 138, 59, 138, 86, 134, 69, 117,
            3, 212, 76, 200, 85, 98, 124, 55, 199, 57, 84, 141, 39, 32, 28, 12, 193, 1, 198, 4, 81,
            124, 150, 85, 112, 118, 205, 95, 9, 38, 225, 97, 5, 100, 137, 217, 60, 107, 152, 69,
            151, 225, 71, 105, 187, 74,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                15017, 62226, 65535, 59963, 65535, 65535, 30196, 48022, 65535, 65535, 17874, 27023,
                0, 39448, 63979, 0, 40688, 19842, 42761, 22227, 60207, 39866, 3442, 46666, 11948,
                65535, 0, 0, 65535, 0, 0, 63900, 0, 4406, 0, 23809, 65535, 18566, 18581, 50562,
                23865, 57352, 5438, 13668, 65535, 65535, 0, 0, 65535, 46357, 2497, 22414, 11787,
                8531, 0, 65535, 64645, 21162, 0, 65535, 65535, 0, 65454, 6177, 47560, 0, 65102,
                61873, 24843, 59935, 48801, 12309, 43177, 0, 65535, 21095, 0, 50938, 228, 6439,
                59487, 29528, 13429, 65535, 0, 24390, 20953, 1660, 60113, 48070, 65535, 0, 0,
                51771, 36296, 3239, 47233, 65535, 27010, 19024, 0, 44366, 6801, 0, 55170, 23607,
                65535, 65535, 0, 16674, 65535, 5177, 31146, 0, 48795, 34833, 6534, 63972, 10073,
                14142, 63686, 53965, 2030, 0, 10604, 65535, 36357, 65535, 0, 31854, 39200, 2684,
                52907, 37099, 0, 35717, 56813, 39357, 0, 65535, 10885, 65535, 26328, 65535, 28493,
                0, 48149, 60669, 0, 65535, 35756, 65535, 0, 13033, 56332, 0, 18143, 19611, 54790,
                0, 42341, 57736, 65535, 63126, 0, 61180, 45983, 22076, 65535, 55242, 65535, 5960,
                0, 38243, 37020, 29071, 65535, 14046, 22787, 65535, 2597, 40202, 65535, 59558,
                65535, 0, 0, 63216, 65320, 0, 0, 0, 11224, 0, 12502, 50719, 53320, 6177, 25842, 0,
                10672, 33248, 24129, 15868, 831, 39776, 0, 1891, 17139, 53417, 65535, 0, 0, 60376,
                65535, 42304, 0, 51137, 0, 5282, 56980, 65535, 40055, 0, 65535, 3754, 37193, 61233,
                0, 23257, 13592, 0, 0, 0, 0, 26463, 61708, 65535, 59831, 42961, 0, 35601, 38972,
                2617, 50856, 4937, 46850, 7973, 65535, 27306, 0, 65535, 44203, 33983, 10665, 64153,
                62614, 36709, 55179, 39141, 65535, 0, 11142, 0, 64619, 58247, 18354, 43117, 2534,
                40265, 0, 65535, 27022, 40843, 24620, 25680, 55151, 0, 11052, 37402, 21719, 65535,
                33838, 65535, 36072, 4482, 60378, 0, 65535, 17576, 48245, 55571, 65535, 33146,
                33971, 35061, 18155, 7598, 65535, 60972, 26042, 744, 0, 44169, 29624, 62476, 62732,
                59995, 2471, 25846, 43565, 49759, 65535, 26404, 47860, 60668, 25774, 0, 27486,
                59199, 0, 3144, 56537, 0, 10047, 12100, 50799, 18324, 59236, 36012, 65535, 45286,
                8368, 49467, 22986, 51416, 0, 56764, 65535, 0, 0, 4560, 3501, 0, 0, 18060, 14409,
                47088, 48849, 63102, 64610, 44972, 33226, 20787, 62649, 11076, 18857, 65112, 65535,
                25042, 31476, 10658, 9685, 28598, 51278, 0, 65535, 52309, 0, 41435, 55629, 35149,
                33412, 0, 28117, 58245, 14074, 0, 65535, 61881, 32814, 65535, 65535, 65535, 7265,
                447, 61512, 17687, 64398, 34194, 0, 35552, 0, 48997, 14868, 42241, 54460, 60111,
                55703, 42362, 8603, 64296, 0, 0, 34383, 62667, 65535, 0, 31105, 40297, 2322, 0,
                65535, 65535, 65535, 65535, 22211, 19084, 16013, 65535, 0, 65535, 17251, 0, 65535,
                0, 9192, 32057, 65535, 8810, 0, 44869, 8001, 0, 36009, 65535, 0, 3093, 52656,
                59475, 43018, 0, 0, 65535, 26240, 5105, 65535, 38451, 65535, 27225, 37181, 65535,
                23569, 65535, 10482, 0, 65535, 65535, 25181, 65535, 65535, 65535, 56537, 0, 0,
                9637, 0, 30665, 40130, 65535, 35105, 28775, 21527, 49907, 3484, 41865, 35410,
                40950, 64936, 57534, 24173, 65535, 37968, 0, 49686, 47609, 0, 36737, 20905, 37087,
                65535, 32660, 46427, 43032, 0, 26366, 37967, 0, 56387, 33133, 0, 10866, 0, 63534,
                65535, 65535, 7279, 38224, 65535, 65409, 45459, 45111, 60623, 28870, 7300, 45830,
                18499, 23076, 57635, 5922, 56519, 0, 61191, 595, 28032, 15966, 0, 65535, 15097,
                14895, 36347, 693, 42448, 15546, 23353, 0, 35726, 13538, 65535, 0, 29949, 57062,
                65535, 19470, 0, 18489, 428, 5739, 14770, 13621, 0, 60636, 3807, 39153, 53293,
                7894, 55045, 36234, 0, 42430, 0, 64409, 31874, 65535, 65535, 0, 65535, 65535, 0,
                60280, 26471, 65535, 0, 17633, 0, 45965, 19971, 0, 40692, 0, 18645, 33386, 58714,
                65535, 45436, 4270, 46708, 61014, 65535, 27530, 17093, 23561, 0, 47076, 0, 38650,
                44251, 5761, 62387, 18540, 5317, 3363, 10919, 0, 44141, 65535, 0, 37574, 62783,
                3389, 8092, 12209, 0, 0, 65535, 0, 8226, 63811, 4743, 19782, 12640, 65535, 9762,
                65535, 17115, 12599, 54147, 61600, 26852, 37474, 15980, 65535, 61079, 0, 6834,
                50441, 49518, 65535, 55384, 65535, 65535, 65535, 41225, 65535, 61487, 41570, 2146,
                22053, 46184, 0, 45439, 45344, 55658, 0, 38544, 14014, 51208, 16659, 12558, 20309,
                65535, 40118, 65535, 47296, 33906, 30500, 0, 36440, 0, 41714, 65535, 65535, 38529,
                13737, 65535, 16316, 0, 0, 16772, 21596, 0, 18187, 59773, 13932, 50483, 0, 65535,
                65535, 65535, 0, 30352, 2347, 42574, 65535, 65535, 28073, 26238, 34891, 39482,
                38648, 10387, 9840, 4807, 0, 21344, 21916, 29446, 0, 41372, 33985, 65535, 2019,
                55177, 27485, 1267, 59022, 20393, 63584, 0, 47084, 27772, 0, 2500, 52055, 0, 56334,
                44004, 0, 51509, 65535, 18653, 0, 65535, 24835, 0, 0, 4015, 3914, 21889, 20349,
                36486, 25215, 37148, 53949, 0, 65535, 0, 0, 65535, 48149, 49686, 33115, 0, 51296,
                14882, 1326, 0, 64869, 65535, 65535, 29482, 48491, 65535, 65535, 27454, 65535,
                38519, 6451, 20228, 0, 19751, 47556, 13163, 34329, 65535, 52402, 61134, 65535,
                52851, 6132, 23037, 7954, 38039, 14081, 41895, 33737, 46823, 61105, 0, 615, 2294,
                65535, 65535, 65535, 42625, 22707, 0, 65535, 65535, 52227, 0, 37959, 22338, 0, 0,
                44102, 11318, 65535, 31689, 11116, 2284, 6249, 15882, 12448, 45130, 63883, 17598,
                49100, 65535, 32885, 45865, 22431, 65535, 27078, 3781, 65535, 12512, 38426, 0, 0,
                4615, 17896, 32730, 0, 20060, 65535, 63691, 9729, 30236, 0, 39139, 2882, 55087,
                65535, 48439, 0, 0, 28439, 49995, 65535, 34432, 21409, 33225, 44572, 0, 15112,
                25235, 6362, 30836, 27340, 65535, 65535, 29930, 65535, 13513, 40053, 0, 0, 41536,
                8614, 0, 65535, 65535, 51433, 43092, 60217, 35900, 0, 41287, 0, 59182, 65535,
                65535, 1581, 65535, 10300, 65535, 65535, 65535, 65535, 65535, 65535, 60187, 18020,
                65535, 65535, 8697, 57453, 62083, 65535, 0, 56044, 1757, 18900, 65535, 64950,
                18666, 16311, 6113, 42220, 4249, 0, 17794, 27843, 8568, 54806, 39105, 54509, 24967,
                3656, 59445, 27791, 0, 7737, 47341, 5041, 16650, 4692, 27755, 8429, 30416, 0,
                53358, 45643, 55306, 37281, 65535, 61432, 0, 65535, 31748, 32814, 30654, 55370,
                15511, 5240, 65535, 38449, 65535, 47357, 65535, 43645, 57855, 0, 64456, 45779,
                18756, 34229, 39138, 59421, 64706, 56095, 0, 65535, 65535, 39576, 20323, 64231,
                65535, 606, 55847, 737, 37551, 33620, 44503, 65535, 10535, 49135, 0, 65535, 12785,
                58687, 65535, 47195, 37566, 30181, 33364, 65535, 50490, 65535, 27821, 25761, 0,
                28386, 33207, 0, 65535, 17171, 47999, 44710, 65535, 30234, 20987, 13163, 0, 11713,
                38091, 53824, 31766, 0, 31242, 29028, 11885, 840, 0, 18717, 0, 0, 33190, 65535,
                57507, 28777, 65535, 51712,
            ]))
            .unwrap(),
            c: 136,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 101, b: 1193560534692750837, c: 0 },
            FixedTestStruct { a: 0, b: 16215740681486122936, c: 4294967295 },
            FixedTestStruct { a: 180, b: 18446744073709551615, c: 2628568818 },
            FixedTestStruct { a: 70, b: 0, c: 1710393873 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 37516,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 65535, 30748, 0, 26285, 28380, 53629, 46798, 45251, 17328, 0, 0, 22062,
                    65535, 65535, 48255, 60854, 8401, 61421, 9952, 23975, 65535, 21836, 65535,
                    55726, 25102, 0, 0, 65535, 43026, 36300, 65535, 0, 62164, 61259, 0, 40363,
                    51828, 3746, 33977, 0, 65535, 0, 50027, 39231, 24981, 65535, 56093, 57186,
                    37459, 8048, 7318, 0, 29876, 0, 65535, 27096, 0, 0, 23256, 59882, 0, 21911,
                    31199, 31455, 65535, 7137, 65535, 3011, 27349, 515, 63354, 28621, 57115, 0,
                    8037, 65535, 1431, 65535, 34155, 65535, 0, 8367, 26984, 15469, 45620, 0, 60330,
                    0, 8829, 0, 52796, 64540, 51838, 25158, 0, 9091, 0, 32778, 48731, 13256, 65535,
                    45437, 65535, 0, 65535, 57326, 0, 65535, 35581, 65535, 11089, 17709, 65535, 0,
                    0, 6320, 35115, 34288, 0, 37087, 33589, 27013, 39712, 13545, 50743, 53643,
                    62551, 9233, 51692, 24099, 24103, 570, 0, 45376, 65535, 8928, 65535, 0, 12834,
                    0, 49496, 63858, 0, 0, 0, 39068, 29639, 37681, 30759, 5477, 62006, 4472, 65535,
                    31142, 33801, 8747, 65535, 3565, 0, 50149, 0, 44698, 31083, 65535, 32468, 0,
                    65535, 0, 0, 65535, 53621, 0, 34665, 52641, 65535, 40139, 62143, 0, 48, 47188,
                    18546, 33344, 50508, 29098, 65535, 65535, 35926, 39917, 0, 23245, 35974, 65535,
                    65535, 51546, 37713, 59146, 65535, 16595, 16097, 44686, 54007, 0, 62212, 0,
                    60994, 0, 65535, 0, 65535, 65535, 12243, 975, 65535, 40464, 10820, 0, 65535, 0,
                    32064, 63220, 47580, 16254, 65535, 65535, 65535, 60969, 44512, 65535, 37990,
                    65535, 65535, 32989, 27183, 62270, 65535, 43005, 18488, 65535, 26082, 41115,
                    16865, 0, 65535, 18416, 65535, 0, 61222, 65535, 56222, 42831, 48960, 46798,
                    17353, 44854, 9838, 65535, 44383, 39671, 44911, 24600, 54348, 65535, 65535,
                    41567, 65535, 0, 3784, 44549, 65535, 12811, 65535, 0, 55207, 41212, 21569,
                    21729, 65535, 0, 42044, 55429, 0, 37945, 65535, 0, 23423, 65535, 0, 59775,
                    3296, 16725, 33629, 40077, 14993, 0, 65535, 53162, 65535, 45250, 65535, 33840,
                    11733, 65535, 22867, 19937, 0, 24175, 273, 10817, 65535, 30131, 50668, 57044,
                    65535, 55132, 43699, 0, 56483, 29779, 0, 31097, 25340, 55176, 30626, 60712,
                    54403, 65535, 36684, 65535, 13803, 24861, 27864, 47821, 6773, 44541, 31238,
                    65535, 0, 19050, 3940, 22155, 24384, 0, 43976, 29967, 63687, 65535, 20711,
                    56265, 50443, 65535, 0, 38761, 0, 40095, 13299, 0, 0, 10071, 62046, 21816,
                    24633, 3763, 22028, 46264, 39898, 0, 0, 65535, 7456, 59409, 22601, 65535,
                    38173, 49867, 0, 64447, 29910, 11328, 36249, 52613, 25336, 46961, 7966, 55176,
                    20518, 18739, 47311, 28821, 0, 65535, 0, 65535, 65535, 65535, 32095, 65535, 0,
                    5695, 58044, 57629, 45094, 0, 17038, 61721, 25092, 36417, 0, 56573, 65535, 0,
                    37633, 0, 26730, 56392, 61518, 39090, 0, 45894, 37410, 65535, 65535, 59797,
                    65535, 28297, 19307, 26689, 48030, 15667, 65535, 61706, 0, 0, 23673, 36272,
                    4796, 40180, 0, 25667, 0, 65535, 774, 65535, 44658, 9645, 60130, 5311, 35914,
                    0, 43382, 65535, 65390, 53040, 8532, 0, 0, 23176, 53045, 57278, 52155, 0, 0, 0,
                    17364, 65535, 2788, 10634, 0, 65535, 0, 3306, 0, 59273, 5695, 65535, 65535,
                    26852, 19119, 65535, 48177, 26451, 9638, 54412, 21355, 0, 22387, 14432, 2130,
                    0, 65535, 55608, 670, 54559, 0, 29506, 0, 65535, 0, 63174, 63976, 51232, 43955,
                    30792, 18210, 65535, 30758, 33362, 0, 65535, 65535, 33180, 24733, 55640, 0, 0,
                    22149, 65535, 0, 6373, 0, 0, 0, 30162, 2221, 55103, 65535, 57969, 59040, 0,
                    27600, 60800, 41560, 0, 52634, 37218, 37291, 0, 43727, 52503, 17332, 0, 65535,
                    24685, 42778, 64209, 0, 38745, 65535, 36030, 0, 52676, 63996, 52018, 27, 0,
                    65535, 0, 3997, 13177, 51121, 0, 65535, 54269, 7852, 12327, 8026, 5798, 0,
                    65535, 0, 43076, 56347, 12430, 30429, 20849, 31856, 65535, 62180, 36909, 12111,
                    46526, 50528, 56125, 24620, 49385, 0, 19486, 65535, 15275, 6246, 42311, 28136,
                    13157, 11033, 63350, 51761, 26301, 17629, 65535, 65535, 12420, 65535, 18931,
                    65535, 14434, 28576, 61196, 0, 65535, 65535, 541, 0, 0, 12020, 29102, 4715,
                    14887, 33752, 31190, 18268, 5781, 11334, 65535, 58424, 65535, 11536, 52841, 0,
                    30229, 65535, 64771, 12830, 0, 31718, 4834, 65535, 50929, 0, 65424, 65535, 0,
                    23916, 54028, 8802, 0, 65535, 7022, 43168, 39935, 27074, 65535, 64950, 65535,
                    28826, 65535, 37257, 0, 29425, 57543, 30963, 65535, 0, 65535, 0, 58906, 0,
                    9214, 0, 65535, 47719, 60644, 0, 47890, 6483, 41128, 0, 65535, 4799, 7684,
                    56571, 1027, 65535, 54874, 12543, 65535, 65535, 60342, 58814, 0, 22915, 0, 0,
                    65535, 62332, 4553, 52091, 13514, 31692, 10483, 28451, 25101, 27180, 57237, 0,
                    2055, 24677, 21370, 28007, 24029, 65535, 19842, 65535, 58340, 65535, 65535,
                    15644, 65535, 1289, 65535, 34835, 61560, 9434, 0, 0, 46648, 0, 62792, 50396,
                    23640, 2243, 19594, 51115, 3820, 18191, 0, 56554, 65535, 24655, 0, 25828,
                    57386, 40312, 32217, 601, 65535, 65535, 65535, 20139, 65535, 0, 23131, 0, 8524,
                    65535, 65535, 11897, 23921, 28200, 65535, 38126, 0, 65535, 64949, 65535, 0,
                    23058, 19158, 40721, 0, 38116, 47381, 65535, 56642, 6619, 12646, 41410, 60024,
                    65535, 65535, 48328, 22404, 26318, 45654, 65535, 0, 48412, 65535, 58683, 62359,
                    7009, 56563, 36564, 8104, 37605, 6435, 64151, 65535, 8525, 45226, 11158, 22672,
                    0, 0, 60143, 23745, 0, 19982, 2753, 32614, 63485, 4974, 17150, 49416, 5870,
                    55200, 47478, 277, 65535, 0, 12902, 0, 65535, 0, 20066, 37094, 0, 0, 42200,
                    52579, 14363, 45577, 21534, 38716, 5540, 51071, 11011, 24834, 60541, 27476, 0,
                    64899, 65535, 65535, 0, 20953, 5785, 0, 0, 56848, 65535, 0, 65535, 20086,
                    40697, 65535, 4012, 65535, 65535, 38750, 10045, 48876, 3364, 28512, 11325,
                    1987, 56143, 1559, 0, 44917, 32053, 65535, 51613, 28665, 0, 65535, 65535,
                    61310, 65535, 0, 61658, 17186, 63410, 18043, 65535, 63867, 7736, 15644, 28329,
                    23820, 8245, 11551, 7698, 10247, 17469, 65535, 43832, 45654, 10699, 11856,
                    65535, 19135, 35258, 65535, 0, 65535, 38076, 39280, 49906, 65535, 44075, 0,
                    58255, 60512, 18983, 41116, 65535, 10494, 55846, 30461, 0, 0, 38028, 65535,
                    19760, 41044, 65535, 36415, 53626, 52797, 35559, 65535, 21576, 0, 65535, 993,
                    45749, 27537, 43692, 65535, 0, 16217, 40398, 21775, 65535, 34943, 49820, 4350,
                    45950, 54239, 0, 21912, 0, 32015, 13444, 57076, 65535, 65535, 2953, 41465,
                    14993, 9113, 63762, 31506, 29253, 25230, 21443, 0, 65535, 17844, 54662, 38004,
                    62170, 50095, 65535, 0, 65535, 37772, 25286, 44512, 0, 34624, 65535, 55601, 0,
                    0, 20609, 65535, 48324, 0, 61501, 10807, 44404, 0, 0, 38409, 36357, 0, 63244,
                    65535, 28627, 65535, 45487, 26986, 13631, 15324, 24930, 57165, 65535, 65535,
                    60534, 44939, 0, 38733, 7789, 8659, 65535, 49718, 24792, 65535, 3587, 0, 0,
                    28192, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 30355,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe18df8aacc7cb9e900244c003b5850297314c74f42b7b7faf3451c33c97a8d38");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_max_chaos_2() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 65535, 54084, 16256, 34273, 65535, 65535, 48971, 65535, 60519, 65535, 19583, 62612,
            54724, 45834, 65535, 22398, 23935, 49472, 51104, 27844, 11267, 41223, 31835, 40634,
            62179, 60440, 28600, 62565, 42352, 34133, 65535, 26777, 8410, 59366, 48421, 50301,
            50490, 0, 0, 62004, 51309, 16915, 19941, 0, 0, 6582, 65535, 50511, 39781, 0, 21204,
            2626, 30271, 58560, 13730, 12681, 0, 55317, 32245, 10884, 65535, 11197, 0, 7753, 0, 0,
            65535, 0, 26608, 10685, 0, 65535, 12010, 54530, 394, 34477, 0, 10885, 65535, 41149,
            58793, 54479, 60881, 0, 65535, 49352, 16845, 62623, 51017, 0, 53247, 9752, 17834, 0,
            36525, 65535, 64036, 61211, 25506, 64956, 6752, 65535, 50956, 44238, 36127, 65535,
            20573, 12050, 65535, 46429, 0, 13589, 0, 12312, 5139, 1453, 27388, 281, 65535, 925,
            12555, 55960, 0, 25327, 27349, 16663, 24667,
        ]))
        .unwrap(),
        c: 59,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([243])).unwrap(),
        e: VarTestStruct {
            a: 3820,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 65535, 65535, 3474, 0, 58492, 0, 36481, 32246, 40897, 0, 55404, 19545, 26106, 0,
                0, 31478, 2973, 65535, 0, 57290, 0, 8824, 20875, 3715, 35870, 45746, 29170, 32005,
                49661, 26537, 38188, 0, 0, 41504, 41032, 8324, 63199, 48280, 47772, 17173, 0, 0,
                21646, 56724, 58182, 50481, 0, 11390, 51481, 9897, 18870, 20852, 59480, 0, 0,
                62655, 42103, 0, 12317, 62607, 0, 10892, 19133, 0, 41270, 37484, 0, 10545, 14857,
                8892, 65535, 57039, 65535, 0, 35217, 65535, 62096, 47430, 65535, 48092, 41055,
                39127, 6795, 11772, 48449, 23218, 0, 0, 65535, 63070, 0, 37855, 20871, 29556,
                44469, 63217, 2199, 31664, 4290, 0, 62998, 0, 60792, 0, 6538, 35927, 3378, 65535,
                13061, 22446, 65535, 0, 0, 16685, 0, 11266, 24617, 8601, 29660, 9335, 0, 57140, 0,
                65535, 0, 65535, 38537, 65535, 28171, 0, 28537, 0, 63923, 13348, 65535, 42450, 0,
                23244, 61507, 37940, 0, 8820, 0, 1321, 42076, 0, 0, 0, 9285, 50992, 45540, 21339,
                0, 0, 15998, 1845, 42721, 44343, 52166, 60061, 0, 59632, 65535, 5142, 0, 0, 3535,
                0, 0, 2304, 42979, 62589, 62908, 22702, 40068, 0, 0, 3490, 65535, 15191, 57181, 0,
                0, 65535, 65535, 0, 65535, 0, 0, 54354, 49349, 13320, 53403, 2278, 36160, 17312,
                65535, 29146, 65535, 30688, 47309, 13497, 43507, 65535, 65535, 65535, 43513, 12685,
                65535, 0, 39019, 63596, 50765, 65535, 65535, 65535, 0, 49053, 31858, 54363, 0,
                65535, 34054, 65535, 0, 0, 65535, 15041, 21681, 65535, 24108, 0, 41037, 65535,
                55404, 65535, 29240, 38163, 0, 51068, 22890, 2086, 42217, 75, 18498, 65535, 35841,
                8033, 15113, 25761, 65535, 0, 47669, 0, 65535, 62102, 41278, 52754, 958, 223, 5656,
                28276, 0, 57287, 21572, 65535, 65535, 65535, 0, 0, 28999, 0, 65535, 11597, 19949,
                28820, 10491, 10301, 0, 0, 44758, 65535, 0, 65535, 0, 40284, 37799, 19589, 30251,
                35077, 26543, 4921, 0, 63119, 35251, 31808, 17760, 65535, 0, 0, 61763, 18737, 2077,
                39402, 0, 17077, 13666, 30020, 38466, 5175, 2067, 1923, 65535, 56574, 34106, 55929,
                33846, 65535, 55278, 0, 0, 38806, 62146, 21335, 15946, 5374, 52650, 24760, 0,
                17881, 38560, 0, 39469, 0, 0, 0, 51558, 54284, 0, 28206, 37254, 54366, 52940,
                24763, 1513, 26999, 60119, 0, 0, 29602, 65535, 43519, 51215, 60762, 0,
            ]))
            .unwrap(),
            c: 255,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 718448224 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 1329793564 },
            FixedTestStruct { a: 255, b: 6208544608927711480, c: 1456160422 },
            FixedTestStruct { a: 203, b: 725894435553429232, c: 3291746385 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 37686,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    39073, 10315, 65455, 65452, 18512, 0, 59416, 52137, 57329, 3923, 40070, 23530,
                    65264, 62317, 10274, 65535, 30144, 562, 46326, 36914, 65535, 14536, 57972, 0,
                    65535, 22831, 1394, 65535, 0, 65535, 17950, 65535, 3737, 35518, 64611, 63414,
                    42234, 65535, 65535, 0, 5148, 0, 0, 35721, 39511, 34708, 25911, 0, 0, 0, 28481,
                    26584, 44320, 16087, 4692, 65535, 65535, 13516, 17885, 65179, 48291, 17656,
                    57882, 65535, 0, 0, 20254, 35344, 4481, 35804, 65535, 0, 65535, 17419, 65535,
                    65535, 10205, 8670, 0, 0, 61560, 65535, 18241, 13361, 0, 40819, 63744, 18992,
                    52914, 10544, 0, 19793, 65535, 0, 0, 19226, 5947, 49018, 17519, 14489, 30464,
                    38940, 758, 54832, 32674, 65535, 27175, 0, 25279, 63430, 39073, 65535, 25918,
                    0, 65535, 0, 31910, 14982, 46729, 44868, 14631, 0, 10343, 57632, 2453, 12985,
                    59334, 0, 9240, 48256, 35761, 18610, 43479, 14653, 18846, 26055, 0, 52174,
                    54633, 62930, 52317, 0, 65535, 19994, 65535, 11128, 0, 44053, 65535, 23332,
                    61884, 0, 49488, 32616, 65535, 50678, 25948, 0, 36424, 12854, 65535, 65535,
                    65535, 35122, 0, 0, 56214, 63893, 65535, 5829, 65324, 15924, 0, 40709, 21129,
                    15309, 65535, 0, 59925, 0, 49915, 12099, 49493, 0, 65535, 0, 49972, 65535,
                    9107, 0, 0, 0, 0, 54678, 54878, 27051, 33241, 60163, 65535, 0, 39622, 65535,
                    30576, 13111, 2273, 0, 34818, 16391, 65535, 1680, 60311, 51690, 22916, 45014,
                    0, 55477, 37951, 0, 65535, 65535, 18438, 0, 51557, 16022, 38159, 24939, 0,
                    21600, 45696, 55114, 65535, 65535, 29317, 65535, 65535, 61673, 0, 53484, 31667,
                    132, 23334, 55851, 15918, 57619, 22530, 35269, 0, 43449, 61648, 1157, 65535,
                    8129, 0, 16305, 52097, 0, 60733, 2436, 54975, 17077, 58341, 8765, 9788, 60468,
                    16786, 65535, 39621, 41771, 8489, 24013, 39600, 11944, 65503, 65535, 28451,
                    65535, 49993, 40780, 0, 0, 16563, 59108, 26651, 22750, 46583, 0, 65535, 0,
                    63399, 43942, 46488, 25870, 21589, 65535, 65535, 16314, 0, 45677, 55597, 65535,
                    55178, 32550, 61850, 41387, 0, 7764, 44727, 23151, 19345, 10769, 65535, 65535,
                    62660, 30404, 65535, 46787, 55822, 19876, 16594, 38611, 65535, 65535, 65535,
                    20200, 11286, 46801, 0, 18241, 65535, 32403, 56770, 65535, 1148, 19296, 53355,
                    65535, 0, 65535, 39572, 48752, 0, 9541, 63167, 65535, 57491, 6437, 29654,
                    59340, 0, 39954, 65535, 51046, 55970, 0, 65535, 0, 0, 20970, 5147, 65535,
                    65535, 54960, 19522, 25761, 65535, 65535, 40603, 51134, 42067, 4748, 31511,
                    65073, 30008, 52929, 27633, 36773, 57362, 65535, 48307, 14230, 53095, 24615,
                    30739, 54956, 65038, 65535, 65535, 55495, 34608, 65535, 18884, 1562, 56770, 0,
                    51669, 0, 65535, 0, 44358, 11814, 38231, 60065, 47813, 0, 195, 34749, 65535,
                    23463, 31761, 0, 32315, 11549, 923, 134, 49656, 30660, 88, 0, 65535, 21354, 0,
                    40108, 65535, 0, 29440, 0, 50071, 60390, 23105, 0, 46224, 0, 32214, 65535,
                    65535, 59623, 30132, 0, 65535, 65535, 65535, 34826, 29068, 19454, 64434, 6434,
                    31025, 65535, 0, 65535, 0, 15121, 23688, 14782, 2884, 16747, 27901, 4385,
                    13718, 65535, 22163, 64484, 22005, 0, 0, 51030, 39566, 29445, 65535, 42898,
                    1920, 65535, 34512, 13574, 12679, 55037, 55071, 57146, 22172, 0, 7025, 10678,
                    1123, 0, 65535, 1063, 61916, 38394, 14586, 0, 0, 44548, 50610, 15927, 5749, 0,
                    2799, 13107, 6014, 38071, 65535, 53719, 0, 0, 50810, 43915, 47728, 57177,
                    47679, 15940, 62552, 51196, 0, 8016, 0, 65535, 62994, 57499, 16261, 5591,
                    22410, 0,
                ]))
                .unwrap(),
                c: 26,
            },
            VarTestStruct {
                a: 17194,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    63502, 0, 5157, 64161, 0, 11288, 10786, 56433, 16827, 36892, 0, 65535, 0, 0, 0,
                    31011, 56371, 64791, 65535, 8965, 50553, 52998, 22533, 65535, 46697, 6502,
                    45109, 5090, 0, 65535, 36864, 65535, 42437, 55156, 50622, 61898, 40725, 18365,
                    65535, 0, 3620, 65535, 65535, 13162, 0, 4663, 13248, 15702, 0, 65535, 20122,
                    49247, 53324, 56981, 23865, 50435, 22423, 65535, 42784, 4995, 9473, 65535,
                    37605, 55954, 30027, 25286, 65535, 1544, 65535, 42273, 56165, 0, 21916, 36895,
                    0, 60953, 24093, 33162, 14604, 30448, 64424, 31545, 30913, 17313, 0, 17867, 0,
                    54927, 65535, 43102, 65535, 49169, 65535, 0, 59797, 33077, 6719, 62175, 28576,
                    0, 47263, 43588, 44134, 0, 11642, 15442, 4182, 17791, 0, 0, 27820, 31553, 0, 0,
                    48439, 49384, 65535, 29213, 0, 20248, 5866, 9469, 65535, 65535, 65044, 12653,
                    50983, 65535, 59317, 15049, 54263, 43743, 59312, 30731, 59660, 0, 57231, 21301,
                    65535, 19602, 51672, 46021, 45473, 65535, 46913, 65535, 0, 48020, 0, 0, 12782,
                    0, 44677, 0, 27672, 17679, 65535, 50030, 65535, 21819, 0, 41071, 65535,
                ]))
                .unwrap(),
                c: 59,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_max_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x83f81e711657e10a505159f722c03e2a4388b20ebda4210094cd8aba93f53d5d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_0() {
    let value = ComplexTestStruct {
        a: 19485,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 180,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 13864,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 141,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 165, b: 8068917769969028869, c: 2277999461 },
            FixedTestStruct { a: 61, b: 11503330852836445370, c: 3928653011 },
            FixedTestStruct { a: 119, b: 12206147646038945500, c: 410672326 },
            FixedTestStruct { a: 76, b: 5070213093309402826, c: 1094752811 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 20759,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 177,
            },
            VarTestStruct {
                a: 244,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 234,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x05bb1882d46575e2bc5dc7148051bf464e4df6f271a31321001e857c7895bacf");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_1() {
    let value = ComplexTestStruct {
        a: 31862,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 130,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 60686,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 111,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 224, b: 8455189095550600109, c: 305887049 },
            FixedTestStruct { a: 193, b: 4609309126404052848, c: 1914492464 },
            FixedTestStruct { a: 177, b: 2653576707560396806, c: 1801138374 },
            FixedTestStruct { a: 105, b: 18274784593465324798, c: 2852535394 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 54743,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 210,
            },
            VarTestStruct {
                a: 51841,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 157,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x58ee3514728894b03c5099a22a571ecd725755466df364bf7a57e7b28a3a5a0d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_2() {
    let value = ComplexTestStruct {
        a: 23196,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 113,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 6355,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 86,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 40, b: 6953245828279934596, c: 1308111910 },
            FixedTestStruct { a: 208, b: 12771065554358068557, c: 1083277962 },
            FixedTestStruct { a: 92, b: 2502920560586508085, c: 2982477632 },
            FixedTestStruct { a: 0, b: 4313267603424881240, c: 1682215570 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 59655,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 160,
            },
            VarTestStruct {
                a: 59415,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 210,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x200f6d4be8b29aa0f833d63639119d08eae8acacc527047690318e25819d7239");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_3() {
    let value = ComplexTestStruct {
        a: 60841,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 187,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 3995,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 57,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 23, b: 15768297607792768094, c: 2064621428 },
            FixedTestStruct { a: 23, b: 13709416112692801715, c: 4263269997 },
            FixedTestStruct { a: 231, b: 280663353279624319, c: 3699997108 },
            FixedTestStruct { a: 155, b: 14745974764115225816, c: 2047685213 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 46432,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 111,
            },
            VarTestStruct {
                a: 26110,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 116,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x620f18ab8fddf91e5207f8887d9761be6fb672c4a57d01fa4962604c4d812fad");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_4() {
    let value = ComplexTestStruct {
        a: 21814,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 4,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 731,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 87,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 53, b: 17425883430848326670, c: 2206568488 },
            FixedTestStruct { a: 162, b: 4518565267621897585, c: 2762128761 },
            FixedTestStruct { a: 55, b: 5590819469063844781, c: 2313943500 },
            FixedTestStruct { a: 214, b: 2645789205906406025, c: 447896030 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 37780,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 159,
            },
            VarTestStruct {
                a: 19303,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 3,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc75a13f8ba4d56d78324313bc49f15de88dc7b23c8a19b96bde8092a9bb70b83");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_5() {
    let value = ComplexTestStruct {
        a: 25053,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 58,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 43590,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 160,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 245, b: 4285430812474724128, c: 96553846 },
            FixedTestStruct { a: 118, b: 419042278047056153, c: 2383149990 },
            FixedTestStruct { a: 226, b: 1982638783961322327, c: 401721006 },
            FixedTestStruct { a: 114, b: 11491385464508481011, c: 2931422633 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 4881,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 137,
            },
            VarTestStruct {
                a: 55351,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 22,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x6ef0e14dc6f46f40c86d65c94c29afa89f2dde63f2b2931e64bf820900b0755d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_6() {
    let value = ComplexTestStruct {
        a: 49427,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 38,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 37374,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 178,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 182, b: 4883985550195607555, c: 129911815 },
            FixedTestStruct { a: 135, b: 17008688145670874216, c: 951106738 },
            FixedTestStruct { a: 101, b: 8414741617516369815, c: 2800288494 },
            FixedTestStruct { a: 236, b: 13641072140023550764, c: 619044473 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 63597,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 150,
            },
            VarTestStruct {
                a: 48535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 174,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0b1c17953fafada3820c7a59db020154d0f5f1d4b06b772c4db16230c9d77a9d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_7() {
    let value = ComplexTestStruct {
        a: 3985,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 215,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 62638,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 108,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 150, b: 15588268613150293086, c: 1907598192 },
            FixedTestStruct { a: 240, b: 16589956227358955489, c: 3324319672 },
            FixedTestStruct { a: 146, b: 6779170118518636459, c: 1056522404 },
            FixedTestStruct { a: 68, b: 17425493469122432576, c: 430256473 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 43631,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 106,
            },
            VarTestStruct {
                a: 32583,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 9,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9b967a5a3ba0e36a9e065908ea5aed331d03f8f17228ec7583071c4fd7a279ff");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_8() {
    let value = ComplexTestStruct {
        a: 9027,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 140,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 54691,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 202,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 20, b: 18135134188981962079, c: 2394370994 },
            FixedTestStruct { a: 117, b: 5219395316282000727, c: 2348897699 },
            FixedTestStruct { a: 181, b: 14484851435303679857, c: 3534595230 },
            FixedTestStruct { a: 90, b: 5694953708669313864, c: 2066736489 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 13195,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 236,
            },
            VarTestStruct {
                a: 34246,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 100,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xae34c46e97a3d2c4a6ad6782a17cce892f912deb9e27f8342c076e463a4ab1af");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_9() {
    let value = ComplexTestStruct {
        a: 38573,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 146,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 63645,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 85,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 4196246451731623853, c: 3716254028 },
            FixedTestStruct { a: 50, b: 8824461942592144971, c: 4099008183 },
            FixedTestStruct { a: 192, b: 11033948554750137231, c: 1464509462 },
            FixedTestStruct { a: 190, b: 11872251491066628880, c: 1379512329 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 52029,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 174,
            },
            VarTestStruct {
                a: 27201,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 168,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x052e5374ba3620756ed73b79878607555e407a7393515f1aeea3da9f2ec252a8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_chaos_0() {
    let value = ComplexTestStruct {
        a: 31237,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            65535, 2814, 48248, 28900, 0, 0, 58773, 65535, 55881, 54469, 57296, 51980, 35061,
            65535, 15553, 38452, 65535, 65254, 65535, 0, 49346, 24216, 15584, 65535, 26112, 65535,
            15278, 52055, 0, 5824, 0, 26542, 62595, 65535, 38946, 30733, 5471, 0, 57450, 14239,
            65535, 0, 0, 2817, 12066, 0, 8627, 65535, 65535, 20487, 0, 9609, 0, 65535, 43070,
            53909, 40421, 65535, 65535, 65535, 64232, 64691, 62808, 17976, 61537, 42772, 61290,
            30753, 32240, 65535, 523, 9488,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 34818, 52245, 20089, 27986, 56953, 12079, 4882, 60492, 0, 65296, 9392, 65535,
                17816, 65535, 2104, 48705, 14547, 5005, 18550, 0, 10164, 55882, 48899, 4686, 65535,
                44261, 41440, 17702, 65535, 22180, 53703, 65535, 36266, 17744, 14538, 64117, 65535,
                4365, 0, 41206, 65535, 65535, 65535, 65535, 65535, 34597, 0, 0, 14435, 33924, 4825,
                0, 14300, 61411, 0, 45447, 65111, 54294, 11954, 33149, 65535, 60732, 13060, 0, 0,
                0, 62219, 43818, 58547, 29689, 13656, 2705, 43613, 51475, 56830, 35527, 0, 9584,
                65535, 53223, 0, 37323, 28525, 23973, 0, 65535, 65535, 23765, 35775, 0, 58476,
                16391, 0, 64861, 2628, 22869, 65535, 42671, 16050, 25682, 63949, 29059, 3450,
                24032, 0, 45771, 6203, 65535, 0, 0, 65535, 65535, 58746, 0, 50329, 65535, 18371,
                49297, 44745, 31131, 0, 55372, 22881, 26972, 55494, 32695, 17773, 65535, 38006,
                18248, 33626, 35394, 51218, 0, 2439, 32229, 6278, 0, 35737, 56317, 50329, 65535,
                40882, 22635, 17845, 0, 65535, 57542, 54176, 13316, 43007, 63245, 49640, 50495,
                65535, 60655, 18879, 41747, 47926, 64884, 62864, 0, 4917, 7465, 0, 27262, 51058,
                48329, 10090, 58015, 57239, 10615, 34311, 18352, 152, 54221, 3987, 0, 46145, 29443,
                0, 5443, 8909, 28022, 10668, 14533, 31871, 0, 62812, 0, 65535, 0, 48388, 0, 13711,
                40790, 60411, 63038, 65535, 27050, 28593, 45019, 21433, 17804, 56494, 25660, 65535,
                19003, 2165, 0, 65535, 65535, 52570, 48178, 54362, 0, 65535, 15376, 0, 44621,
                65535, 9959, 4145, 52587, 59052, 65292, 20052, 65535, 15779, 1765, 0, 28527, 24557,
                65535, 41168, 0, 24875, 5594, 0, 9999, 65535, 65535, 65535, 56282, 43469, 59140, 0,
                54391, 0, 40128, 4466, 4282, 39488, 61685, 58911, 27385, 65535, 61272, 8749, 18348,
                45770, 0, 0, 11529, 65535, 18109, 0, 61587, 34100, 14550, 61375, 0, 25658, 65535,
                6222, 50324, 65535, 6290, 0, 0, 41914, 65535, 55164, 0, 9807, 15097, 39388, 47420,
                56057, 49238, 36442, 65535, 63191, 0, 33852, 65535, 48771, 35039, 0, 38230, 40508,
                34396, 21862, 0, 32479, 0, 25842, 65535, 2776, 65535, 41221, 6394, 42877, 53615, 0,
                0, 0, 27988, 65535, 34396, 0, 32945, 65535, 0, 45461, 59697, 62670, 14786, 58950,
                20171, 1057, 65535, 19530, 21109, 0, 20469, 9970, 0, 42395, 55772, 35528, 1859,
                42304, 14184, 35620, 7748, 25619, 10989, 0, 64475, 65535, 60744, 65535, 65502, 0,
                0, 16934, 55882, 65535, 63603, 31364, 27282, 65535, 65535, 0, 20650, 65535, 47355,
                16848, 42744, 41585, 0, 65535, 0, 0, 0, 37953, 35856, 31037, 15748, 0, 0, 48447,
                65535, 65535, 42973, 65535, 0, 392, 44233, 65535, 63936, 42453, 31140, 11141,
                16667, 65535, 58779, 20699, 35202, 0, 0, 0, 65535, 31063, 44849, 1311, 0, 35834,
                8902, 0, 63396, 64598, 65535, 29418, 48388, 29027, 40904, 11868, 32629, 0, 27706,
                2955, 0, 0, 0, 49805, 22117, 60055, 47281, 65535, 54748, 58881, 25767, 51006,
                21092, 41301, 40026, 65535, 8010, 0, 49266, 57112, 15391, 18299, 65535, 65535,
                65535, 0, 0, 45058, 15711, 34735, 25140, 0, 44679, 39171, 65535, 44085, 37813,
                26821, 0, 56932, 64743, 18868, 65535, 0, 49451, 0, 24494, 0, 6657, 22205, 60250,
                30931, 13459, 65535, 0, 28238, 51702, 24234, 11958, 38912, 47624, 54577, 65535,
                65535, 0, 25908, 57852, 8931, 63949, 16049, 7756, 0, 12887, 65535, 0, 65535, 54834,
                49104, 40280, 63983, 65535, 0, 9759, 65535, 5553, 0, 26701, 22002, 9234, 2477,
                38507, 57312, 32552, 0, 0, 28271, 65535, 38029, 51183, 21437, 65535, 14101, 42307,
                6842, 65535, 51423, 20486, 3659, 0, 59225, 21637, 65535, 65535, 20452, 29425,
                29183, 4211, 34668, 0, 65535, 27454, 38086, 38568, 5918, 27968, 27242, 0, 65535,
                50656, 32237, 0, 9509, 12824, 65535, 0, 30702, 0, 12254, 26244, 39805, 0, 65535,
                31045, 65263, 65535, 65535, 44074, 20758, 12542, 51600, 0, 29556, 65535, 27566,
                56758, 65535, 0, 11737, 35788, 33629, 46098, 65535, 0, 0, 65535, 17462, 36623,
                34323, 0, 48943, 63543, 0, 0, 7744, 6985, 29008, 26760, 26346, 23105, 59016, 15291,
                0, 41125, 0, 11501, 60495, 40527, 65535, 18647, 29767, 0, 52106, 0, 65535, 56977,
                65535, 40192, 6599, 42959, 20379, 42176, 0, 48935, 0, 54443, 54965, 50340, 6594,
                65535, 55134, 65535, 35577, 0, 50471, 39753, 42658, 55662, 17251, 0, 50089, 38721,
                0, 26877, 0, 16514, 0, 33386, 24169, 65535, 54057, 26949, 45527, 0, 809, 913,
                54301, 0, 53044, 33429, 20256, 8594, 65535, 15918, 30530, 43633, 45556, 57775,
                65535, 36056, 63443, 61737, 19552, 49695, 61265, 4699, 19174, 58223, 65535, 0,
                38240, 24693, 0, 28113, 44141, 22697, 43258, 21075, 0, 21447, 8827, 40374, 0,
                51412, 0, 48990, 65535, 54943, 31490, 50477, 34046, 7471, 25523, 17449, 23182,
                56485, 0, 1170, 53289, 0, 53910, 20463, 65535, 65535, 65535, 29589, 65322, 0,
                41065, 29800, 22331, 65535, 65535, 50048, 65535,
            ]))
            .unwrap(),
            c: 76,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 4, b: 4598951545657795543, c: 716905517 },
            FixedTestStruct { a: 0, b: 12216977882749265266, c: 4294967295 },
            FixedTestStruct { a: 135, b: 4149443187579449670, c: 2899477178 },
            FixedTestStruct { a: 56, b: 0, c: 4189058632 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 28196,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    16780, 25531, 50330, 38545, 65535, 29514, 0, 7146, 50377, 0, 65535, 40773,
                    65535, 18533, 61052, 10190, 65535, 4432, 25246, 65535, 58168, 0, 43780, 0,
                    8421, 0, 65535, 0, 19624, 55185, 65535, 65535, 64757, 2848, 65535, 55480,
                    31092, 18429, 65535, 13925, 46915, 18788, 49335, 0, 12928, 48666, 65535, 63569,
                    4186, 41810, 51324, 11342, 54903, 0, 58917, 54247, 13312, 0, 0, 59348, 61752,
                    65535, 65535, 1166, 62145, 43548, 39385, 0, 56017, 65535, 4400, 18819, 65201,
                    7040, 0, 13713, 37990, 0, 55631, 65535, 7892, 65159, 65535, 62229, 65535,
                    43918, 17093, 31300, 4884, 28479, 26404, 52337, 54067, 34741, 9582, 0, 46062,
                    0, 62780, 0, 26132, 22584, 0, 65535, 25948, 14839, 2622, 6159, 64654, 47446,
                    63952, 0, 46951, 0, 35716, 44004, 28432, 65535, 65535, 58698, 53715, 65535, 0,
                    28717, 38863, 43438, 50670, 7901, 12257, 19474, 55621, 65535, 30493, 31587,
                    18859, 31083, 0, 65535, 28075, 3079, 28109, 52080, 47058, 56399, 0, 63232,
                    65535, 56465, 0, 42242, 44878, 544, 231, 0, 65535, 36060, 0, 0, 56168, 27492,
                    33670, 64099, 65535, 41126, 0, 62278, 65535, 44905, 2670, 65535, 35688, 32085,
                    0, 2597, 54670, 14002, 65535, 5359, 42778, 65535, 0, 65535, 44758, 26075, 0,
                    36180, 28451, 54985, 65535, 65412, 24291, 0, 37923, 37498, 0, 52882, 0, 65535,
                    8531, 32909, 41017, 0, 0, 0, 65535, 0, 12674, 20863, 49471, 65535, 38085, 0,
                    17490, 19401, 63376, 17994, 19262, 13890, 65535, 16921, 11173, 2413, 55841,
                    64710, 14779, 32807, 11314, 65535, 0, 0, 16268, 33857, 53120, 61713, 36327,
                    53866, 64412, 31073, 53885, 30477, 44472, 44869, 1421, 58410, 19938, 51563,
                    50885, 0, 65535, 48844, 32492, 65535, 0, 0, 25094, 1045, 0, 39799, 0, 64552,
                    26261, 738, 65535, 42343, 56346, 372, 21998, 0, 3702, 0, 37317, 43343, 25187,
                    29586, 65535, 65535, 51167, 9736, 65535, 65535, 52567, 65230, 39688, 20597,
                    15651, 50852, 65535, 0, 51532, 58715, 39530, 17757, 53963, 0, 0, 3411, 0, 0, 0,
                    51792, 32935, 22644, 38134, 65535, 13237, 65535, 39879, 0, 44869, 31131, 0,
                    45963, 0, 65535, 49366, 0, 37207, 23777, 0, 16002, 65535, 51318, 10361, 53703,
                    59628, 54415, 18850, 57692, 18553, 46812, 38780, 29779, 0, 48026, 7161, 0,
                    49225, 26863, 65535, 10357, 65535, 38992, 45222, 46858, 65535, 65535, 48549,
                    55292, 52392, 65535, 0, 19974, 0, 12859, 33283, 16389, 65535, 58692, 16487,
                    675, 2728, 65535, 26570, 0, 49154, 57201, 58600, 46245, 49788, 0, 28404, 65535,
                    0, 54861, 52952, 36805, 23399, 41601, 6205, 55802, 0, 43567, 19178, 3088,
                    58892, 0, 32688, 27869, 0, 33966, 0, 42820, 0, 44455, 45372, 8824, 0, 65535,
                    64952, 0, 18713, 65535, 0, 46152, 0, 33486, 0, 49570, 46008, 61793, 54910,
                    52691, 48911, 0, 9378, 45378, 35646, 59836, 65535, 57121, 55935, 2845, 0,
                    16507, 0, 60983, 61631, 11712, 0, 43741, 28478, 23476, 19672, 21191, 51454,
                    65535, 65535, 0, 38724, 64353, 65535, 53865, 65535, 0, 65535, 63219, 65535, 0,
                    27197, 22041, 13623, 14337, 57158, 0, 51905, 65457, 65535, 56185, 8839, 37510,
                    53680, 65535, 65535, 23164, 39081, 5948, 0, 26471, 9386, 65535, 32017, 0,
                    41488, 30454, 64036, 65535, 36198, 26191, 25579, 65535, 65535, 197, 13699,
                    37873, 24680, 0, 0, 65535, 11080, 65535, 0, 65535, 64886, 65299, 51732, 55255,
                    60580, 0, 0, 16882, 28575, 4194, 0, 35901, 0, 7525, 1815, 1385, 59454, 52215,
                    45663, 65535, 36654, 65535, 0, 44783, 36844, 65535, 50252, 65535, 1174, 65535,
                    15653, 61419, 56933, 51513, 50723, 1473, 37461, 65535, 21735, 24972, 53511,
                    39218, 26108, 55099, 65535, 28278, 49434, 65535, 65535, 45865, 31631, 65535,
                    50540, 62171, 37202, 64409, 65535, 33449, 11465, 18361, 62994, 0, 44925, 32794,
                ]))
                .unwrap(),
                c: 240,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x663ac96094d20fa3ee53493a634653172d3864513da3f38d14d2a4429ed4bbd3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_chaos_1() {
    let value = ComplexTestStruct {
        a: 64128,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 65472, 14705, 36376, 65535, 56894, 26486, 4406, 0, 25544, 65535, 65535, 29047, 0, 0,
            0, 0, 47826, 3444, 392, 22743, 26440, 36791, 44360, 0, 31701, 63700, 54665, 65535,
            65535, 50477, 43712, 7488, 55337, 65535, 33273, 27741, 5130, 23221, 38436, 48351,
            65535, 2368, 49342, 65535, 53796, 6266, 65535, 16675, 0, 6437, 65535, 25568, 61775,
            15569, 61483, 0, 37618, 0, 24111, 25805, 13979, 58285, 15316, 40759, 0, 2002, 30336, 0,
            30909, 64263, 38121, 0, 65535, 0, 51108, 26155, 24404, 50107, 0, 65535, 65535, 8833,
            52400, 63907, 38654, 0, 47128, 22508, 40830, 22791, 17950, 56470, 53681, 50180, 35151,
            0, 65535, 44934, 1427, 0, 43221, 17639, 41281, 34470, 0, 62259, 0, 10826, 0, 0, 0, 0,
            3319, 65535, 65535, 40032, 11320, 22237, 49421, 65535, 65535, 20024, 796, 0, 42713,
            53104, 32826,
        ]))
        .unwrap(),
        c: 204,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                48846, 21253, 16374, 26603, 64201, 14921, 0, 65535, 22245, 41300, 0, 35640, 18123,
                39, 7040, 51634, 15454, 65535, 0, 0, 65535, 53608, 33375, 33550, 39605, 16851,
                43827, 12739, 2938, 0, 58987, 64454, 65535, 5538, 65535, 51825, 23717, 30344, 0,
                4965, 65535, 9256, 7946, 63106, 1215, 0, 65535, 2446, 63388, 5279, 65535, 44189,
                48305, 0, 60810, 15955, 65535, 46312, 22188, 48447, 27201, 45510, 3990, 65535,
                62599, 53537, 43085, 9274, 20555, 46774, 58361, 36534, 46410, 8398, 35778, 0,
                32362, 41330, 19554, 0, 6057, 55, 65535, 0, 0, 0, 30483, 9712, 36058, 5546, 14887,
                65535, 0, 31014, 56335, 65535, 0, 10365, 65535, 65535, 0, 52114, 41682, 65535,
                31626, 3883, 24741, 65535, 45293, 65535, 0, 0, 48292, 38077, 18972, 65535, 65535,
                0, 48874, 65535, 53776, 0, 0, 65535, 65535, 5164, 65535, 54569, 0, 65535, 0, 0,
                65535, 60676, 65535, 31061, 56395, 56663, 56824, 62602, 51680, 0, 34766, 23098,
                54494, 0, 65535, 0, 57458, 18698, 42777, 14515, 8153, 4254, 57377, 0, 35643, 40944,
                7846, 39539, 0, 65535, 35303, 48573, 40247, 0, 20692, 65535, 0, 42582, 37256,
                65084, 0, 52645, 62272, 31932, 38418, 9204, 65535, 13828, 59474, 56151, 53335,
                60044, 65535, 0, 45301, 0, 13946, 38033, 0, 6972, 19550, 61811, 14877, 31691, 0, 0,
                24023, 0, 56464, 0, 0, 9753, 14051, 53084, 65535, 65535, 38834, 58306, 0, 29900,
                12554, 16999, 59987, 32816, 8584, 18180, 0, 24629, 65535, 54019, 51626, 3527,
                40387, 31597, 3065, 9011, 28878, 65535, 9172, 52788, 50313, 44140, 65535, 50949,
                55758, 60851, 63170, 17210, 0, 269, 7847, 51100, 65535, 37409, 37242, 28782, 0,
                19701, 22844, 19732, 51151, 34394, 65535, 53888, 5166, 10560, 11784, 0, 10644,
                65535, 25824, 53336, 40229, 28888, 0, 65535, 31662, 25176, 65535, 17400, 51190,
                40768, 0, 25174, 48271, 9425, 7203, 65535, 59675, 57393, 57328, 65535, 32572,
                20974, 119, 18774, 43640, 60237, 0, 51642, 0, 0, 52240, 22314, 0, 0, 57334, 65535,
                17634, 6908, 25432, 65535, 58150, 0, 0, 58221, 65535, 0, 57869, 13675, 65535,
                49729, 0, 64527, 65535, 27448, 34519, 60852, 40004, 35369, 30566, 0, 18301, 7569,
                50344, 65535, 17930, 52690, 57680, 10842, 65494, 16900, 49987, 65535, 0, 0, 3941,
                22469, 61976, 44690, 8017, 1637, 47743, 32319, 0, 13954, 19511, 59934, 60668,
                27052, 37153, 20342, 0, 29631, 13707, 36833, 65535, 0, 31310, 19798, 0, 44674,
                65535, 9803, 36806, 29814, 8759, 0, 59511, 0, 65535, 36305, 35942, 0, 53126, 5161,
                28208, 5106, 65535, 13761, 18509, 27411, 40681, 65535, 43334, 65535, 34276, 65535,
                0, 0, 60351, 0, 23301, 28407, 65535, 47538, 65535, 12176, 52646, 0, 18458, 21438,
                0, 0, 65535, 47700, 5030, 34532, 31856, 21106, 56536, 15490, 48271, 0, 17636,
                21694, 10890, 0, 15202, 55152, 64350,
            ]))
            .unwrap(),
            c: 216,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 3238394806 },
            FixedTestStruct { a: 0, b: 0, c: 3744871039 },
            FixedTestStruct { a: 116, b: 12168793305650347123, c: 0 },
            FixedTestStruct { a: 255, b: 18034704172605105472, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 25347,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    1670, 49577, 19860, 45573, 54837, 0, 0, 65535, 1515, 65535, 65535, 21595, 0,
                    23304, 65535, 34936, 65535, 65535, 14717, 0, 23870, 36944, 4427, 32567, 19039,
                    55410, 7733, 13830, 65535, 0, 0, 0, 0, 8019, 0, 58818, 35223, 57577, 5466,
                    14397, 0, 60803, 65535, 65535, 29388, 0, 52757, 45107, 20924, 41979, 0, 34069,
                    0, 0, 32264, 65535, 0, 0, 0, 48032, 0, 65535, 2, 6695, 10935, 65535, 65535,
                    22558, 0, 50375, 64923, 44290, 33833, 0, 0, 54317, 51589, 54749, 65535, 1348,
                    58660, 43318, 45, 43800, 0, 18496, 0, 61830, 36543, 51813, 0, 51109, 65535,
                    43947, 0, 53914, 12651, 44746, 52970, 64474, 5650, 63698, 5893, 0, 9332, 22347,
                    0, 54123, 0, 42707, 15870, 150, 4029, 790, 65535, 1233, 56496, 65535, 10045,
                    28780, 65535, 23471, 0, 65535, 58517, 65535, 0, 0, 18120, 40954, 7008, 13962,
                    54984, 0, 65535, 41814, 28297, 45471, 0, 0, 28470, 21197, 22694, 7772, 65535,
                    59990, 54740, 56014, 0, 65535, 34963, 17261, 4145, 65535, 19986, 65535, 0,
                    29420, 15729, 42823, 7137, 32108, 26635, 41910, 54285, 24778, 27893, 22786,
                    16070, 9016, 18905, 20739, 0, 10171, 15860, 21922, 62626, 26393, 44374, 0, 0,
                    2442, 35425, 34232, 64801, 13569, 65535, 23856, 12910, 24645, 0, 0, 65535, 0,
                    65535, 20131, 20375, 63956, 65535, 20608, 0, 19476, 64523, 19526, 0, 31792,
                    16734, 53330, 17317, 0, 65535, 0, 37039, 55935, 1049, 36279, 53991, 0, 6720,
                    65535, 6823, 10192, 0, 31583, 52868, 65535, 65535,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 0, 22250, 29253, 2155, 54481, 30918, 19853, 24299, 0, 65535, 17219,
                    41710, 65535, 65535, 387, 40783, 0, 10715, 65535, 60087, 60576, 65535, 7260,
                    48628, 62850, 65535, 2030, 22255, 51734, 0, 8489, 65535, 57951, 48489, 65535,
                    36382, 56376, 64278, 16330, 0, 65535, 3427, 0, 14733, 53458, 55385, 40424,
                    53899, 25501, 0, 20061, 0, 37987, 0, 29808, 10585, 65535, 65535, 0, 0, 49703,
                    0, 19485, 0, 44531, 32941, 0, 0, 22177, 0, 0, 26345, 0, 65535, 40440, 0, 65535,
                    16632, 25817, 41165, 65535, 28264, 44057, 60594, 65535, 65535, 28205, 65535,
                    59644, 14679, 51165, 58128, 65535, 65535, 45399, 46177, 22498, 65535, 40014,
                    49718, 24675, 0, 56179, 50808, 0, 65535, 16649, 60154, 26360, 13768, 0, 26066,
                    64172, 47610, 55514, 62015, 27632, 65535, 1288, 63506, 65503, 0, 16293, 15541,
                    39735, 41940, 41197, 7351, 0, 65535, 7418, 0, 65535, 53537, 16988, 0, 65535,
                    8209, 18328, 18865, 36696, 10982, 35201, 65535, 0, 40828, 43385, 50406, 0,
                    19667, 25421, 28399, 45630, 14183, 52200, 45566, 0, 0, 49330, 25191, 51210,
                    64374, 34010, 31787, 65535, 62361, 52923, 30090, 65535, 6542, 36154, 26590,
                    54522, 0, 0, 57812, 15919, 11500, 65535, 58201, 32780, 44472, 0, 22851, 1476,
                    0, 65535, 0, 0, 65535, 44128, 46005, 39515, 29986, 0, 36948, 65535, 12757,
                    20192, 23616, 51020, 65535, 0, 25068, 65535, 57846, 16551, 46229, 10710, 53793,
                    0, 15416, 65535, 40005, 43889, 8561, 34482, 37970, 65535, 65535, 65535, 734,
                    13559, 24069, 63235, 8503, 65535, 58113, 55660, 0, 42380, 0, 65535, 9903,
                    14513, 42721, 3513, 24992, 33404, 65535, 31517, 65535, 28095, 12195, 60157,
                    55384, 0, 31811, 62639, 0, 65535, 0, 29904, 10645, 65535, 14836, 59748, 9145,
                    0, 4664, 44634, 65535, 0, 64555, 0, 30879, 48431, 14436, 4924, 65535, 5294,
                    28847, 21116, 17946, 23859, 39921, 32450, 16084, 48685, 65535, 46495, 0, 0, 0,
                    57967, 0, 60176, 65535, 38332, 0, 54683, 929, 5025, 65535, 65535, 17771, 0,
                    37397, 24590, 32974, 5914, 43280, 27778, 24839, 27343, 0, 0, 6320, 32613,
                    54110, 41102, 23378, 9764, 61403, 29789, 2496, 25765, 59014, 61844, 16541, 0,
                    24263, 32675, 37568, 62902, 3396, 65535, 38512, 29192, 63687, 43291, 0, 29912,
                    51212, 65535, 44133, 618, 28545, 0, 46583, 2088, 3439, 28894, 0, 30077, 36410,
                    0, 8164, 48525, 0, 48213, 54335, 24349, 22967, 65535, 5782, 0, 36293, 49133,
                    41539, 36701, 39085, 65535, 0, 33883, 60492, 65535, 4384, 33155, 36746, 23977,
                    816, 0, 63003, 23391, 0, 7253, 46182, 5993, 2166, 23187, 65535, 27379, 58117,
                    0, 43811, 96, 3774, 0, 65535, 31021, 65535, 46731, 48578, 248, 65535, 20663, 0,
                    65535, 43298, 36030, 9998, 61587, 64725, 49098, 1668, 26968, 0, 0, 0, 10736,
                    61246, 7264, 28743, 29268, 0, 37945, 3556, 58115, 65535, 59908, 65535, 13971,
                    58779, 24167, 82, 60472, 44148, 25388, 55884, 41974, 65535, 14985, 17067,
                    52349, 0, 65535, 63531, 9367, 31905, 32788, 62758, 22805, 65535, 48983, 59449,
                    51003, 4670, 65535, 5369, 0, 549, 7530, 8947, 65535, 37341, 8911, 0, 9943,
                    65535, 44775, 44224, 42118, 36231, 4135, 12142, 2268, 49160, 0, 65535, 65535,
                    11263, 0, 65535, 38086, 8588, 59072, 41763, 53429, 14621, 65535, 31875, 65535,
                    31784, 1946, 36032, 53801, 31104, 7174, 46169, 32666, 8864, 0, 34139, 21116,
                    17179, 16509, 55272, 61719, 65535, 65253, 50899, 41388, 0, 36343, 0, 41533,
                    65535, 65535, 65535, 38113, 36260, 65535, 36843, 46937, 63616, 0, 38257, 43741,
                    0, 44500, 10816, 0, 24291, 46673, 0, 0, 0, 0, 65535, 12938, 55098, 25582,
                    65535, 28773, 27929, 61877, 65535, 38078, 33637, 0, 45124, 41303, 54384, 35019,
                    60946, 591, 1882, 54769, 7793, 22153, 64547, 26406, 9220, 0, 65535, 65535,
                    49242, 44515, 0, 51789, 65535, 65535, 0, 42269,
                ]))
                .unwrap(),
                c: 161,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x1de2e6e269b79034e9e81aba443f9e2e8c0c66e49ffb49c3dea82ce5a0788398");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_nil_chaos_2() {
    let value = ComplexTestStruct {
        a: 19852,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 142,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 12547,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([0])).unwrap(),
            c: 20,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 237, b: 0, c: 4294967295 },
            FixedTestStruct { a: 204, b: 0, c: 724106461 },
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 2185746054 },
            FixedTestStruct { a: 199, b: 12259549524723329898, c: 481303456 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 22973,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([11951])).unwrap(),
                c: 204,
            },
            VarTestStruct {
                a: 13466,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 54721, 22221, 22864, 8887, 48990, 12611, 65535, 65535, 22195, 52793,
                    65535, 53594, 42007, 65535, 51832, 65535, 7350, 0, 58688, 59357, 50782, 16992,
                    17782, 0, 57901, 65535, 4264, 0, 42150, 38578, 29015, 44963, 32151, 2195,
                    55320, 65535, 46012, 27149, 102, 21121, 54743, 65535, 65535, 58045, 32741, 0,
                    2666, 35430, 10992, 65535, 34318, 17961, 6647, 2362, 39749, 0, 25474, 58372,
                    42754, 0, 38553, 71, 63676, 47340, 45635, 0, 58453, 0, 20377, 37902, 12658,
                    48051, 0, 31523, 60608, 43958, 64715, 0, 65535, 65535, 58705, 65535, 33981,
                    15633, 61034, 38072, 52422, 5886, 0, 18446, 44184, 21727, 59593, 65535, 65535,
                    0, 7826, 46323, 6369, 0, 0, 2803, 10702, 65535, 0, 45717, 24824, 47908, 0,
                    14592, 0, 16535, 29064, 29014, 38633, 0, 61801, 38036, 14750, 47729, 30713,
                    65535, 61704, 21698, 12498, 16772, 50690, 26423, 65535, 29148, 0, 3076, 24399,
                    65535, 23445, 37884, 31257, 0, 7684, 13050, 58700, 65535, 0, 32297, 10199, 0,
                    13775, 46175, 56844, 9208, 54164, 43702, 65416, 33331, 58631, 4524, 0, 39221,
                    16675, 65535, 0, 17905, 0, 61097, 23700, 42890, 41435, 65535, 9493, 65535,
                    20178, 0, 47860, 61921, 2315, 21992, 58101, 9132, 30593, 22709, 0, 48258, 4396,
                    47111, 19837, 65535, 6190, 39201, 50305, 9377, 65535, 51145, 65535, 65535,
                    6380, 63704, 16965, 65535, 61354, 0, 3244, 48260, 11996, 65535, 16166, 1297,
                    51374, 50053, 61449, 56459, 65535, 9728, 65535, 39305, 0, 65535, 54709, 0, 0,
                    15865, 3235, 0, 65535, 65535, 49593, 21070, 3642, 0, 28658, 0, 21692, 8151,
                    7190, 65535, 42031, 0, 22981, 5805, 65535, 38509, 21061, 36624, 34296, 19728,
                    18118, 0, 46879, 11525, 65535, 20033, 65535, 24210, 56454, 31174, 3990, 65535,
                    4998, 32986, 57706, 44128, 62626, 31654, 3005, 7308, 75, 65535, 14196, 57323,
                    57849, 0, 44783, 13300, 65535, 7058, 64039, 22334, 65535, 43358, 45718, 6243,
                    33619, 39268, 30156, 7536, 58356, 0, 0, 9804, 0, 0, 14830, 65535, 5732, 18705,
                    10299, 32207, 6092, 25920, 45714, 56861, 52086, 13108, 65535, 60645, 64823,
                    11514, 60115, 0, 64103, 52637, 0, 16641, 65535, 56354, 65535, 62462, 65535,
                    65535, 63618, 57892, 4332, 57403, 0, 64302, 58368, 28185, 24689, 0, 567, 0,
                    37018, 53080, 7462, 65535, 0, 7416, 0, 65535, 0, 0, 28450, 50316, 39103, 0,
                    14623, 12479, 32652, 0, 5469, 0, 65535, 65535, 41282, 50229, 30811, 59217,
                    51522, 15079, 0, 2805, 54509, 65535, 63164, 0, 0, 62818, 65535, 25155, 65366,
                    0, 49378, 65535, 56155, 6938, 0, 48201, 3561, 8580, 65535, 41813, 65535, 47465,
                    53596, 63348, 46884, 0, 14750, 65535, 39382, 54313, 2369, 61755, 49412, 47304,
                    59537, 27771, 6077, 0, 29025, 65535, 4553, 683, 11648, 3432, 6313, 0, 53524,
                    58604, 0, 14443, 53676, 63378, 10878, 43138, 8374, 17183, 30477, 65535, 30646,
                    49556, 60597, 62598, 44284, 19733, 40299, 0, 43703, 34724, 65535, 65535, 39975,
                    60485, 18947, 65535, 30174, 0, 25460, 65535, 340, 0, 25228, 1913, 0, 46450,
                    14852, 14485, 26457, 25538, 45712, 59549, 21, 30283, 0,
                ]))
                .unwrap(),
                c: 249,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_nil_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x43c51c1784a07f7eb57f8ae5dfe7a4ec37c7a086101f331b753bf1117fd7236b");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_nil_offset_11_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_nil_offset_11_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_nil_offset_11_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_nil_offset_11_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_nil_offset_2_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_nil_offset_2_minus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_nil_offset_2_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_nil_offset_2_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_nil_offset_2_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_nil_offset_2_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_nil_offset_7_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_nil_offset_7_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_nil_offset_7_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_nil_offset_7_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
fn test_containers_complex_test_struct_one_0() {
    let value = ComplexTestStruct {
        a: 38154,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([47908])).unwrap(),
        c: 143,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([245])).unwrap(),
        e: VarTestStruct {
            a: 39132,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([25993])).unwrap(),
            c: 111,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 106, b: 8652513012715231117, c: 2610893141 },
            FixedTestStruct { a: 130, b: 12629251369612733104, c: 228974924 },
            FixedTestStruct { a: 87, b: 6663679391872608727, c: 2037320603 },
            FixedTestStruct { a: 92, b: 15062127672893584670, c: 3929326738 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 55570,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([3524])).unwrap(),
                c: 109,
            },
            VarTestStruct {
                a: 5100,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([34313])).unwrap(),
                c: 101,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xff0954642b226bd43a9e5039d29f93ac8b691cc448bbf4eb2dfe4d189da9cbed");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_1() {
    let value = ComplexTestStruct {
        a: 13143,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([8619])).unwrap(),
        c: 204,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([229])).unwrap(),
        e: VarTestStruct {
            a: 17637,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([18401])).unwrap(),
            c: 217,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 137, b: 3698107209298432044, c: 3176272394 },
            FixedTestStruct { a: 162, b: 15291011847857921729, c: 1829104123 },
            FixedTestStruct { a: 62, b: 16558409627621425975, c: 458242411 },
            FixedTestStruct { a: 227, b: 17237671256703602443, c: 792658115 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 35174,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([50366])).unwrap(),
                c: 66,
            },
            VarTestStruct {
                a: 21256,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([18160])).unwrap(),
                c: 79,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x30585fde416d36ce2d348b70297cd7fd09c4551b0dd1deee62d41aedfb95af0e");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_2() {
    let value = ComplexTestStruct {
        a: 2132,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([12333])).unwrap(),
        c: 91,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([126])).unwrap(),
        e: VarTestStruct {
            a: 56546,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([43049])).unwrap(),
            c: 58,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 231, b: 2706008284211844601, c: 2711578705 },
            FixedTestStruct { a: 230, b: 16875043296603227956, c: 1039572323 },
            FixedTestStruct { a: 71, b: 15547187220898582978, c: 2573371095 },
            FixedTestStruct { a: 123, b: 17141572244333043671, c: 3190500251 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 49457,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([9836])).unwrap(),
                c: 90,
            },
            VarTestStruct {
                a: 47592,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([57832])).unwrap(),
                c: 226,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc9437ccf57457f4cbe655692eba592369aa3db85848d6aadf306ce972f5491e0");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_3() {
    let value = ComplexTestStruct {
        a: 36438,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([6183])).unwrap(),
        c: 56,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([21])).unwrap(),
        e: VarTestStruct {
            a: 19180,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([22839])).unwrap(),
            c: 17,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 22, b: 6812908272702126259, c: 4186898732 },
            FixedTestStruct { a: 230, b: 8240213798243482664, c: 2792567625 },
            FixedTestStruct { a: 165, b: 17298807408446028590, c: 2910649996 },
            FixedTestStruct { a: 84, b: 795096226043405295, c: 1707213731 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 39435,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([59522])).unwrap(),
                c: 156,
            },
            VarTestStruct {
                a: 53219,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([22382])).unwrap(),
                c: 245,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7aa69f757591d6ea01a99f7e924d78fdc082e32ca8f07c00a8a183d76bfe1c61");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_4() {
    let value = ComplexTestStruct {
        a: 7019,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([21115])).unwrap(),
        c: 38,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([27])).unwrap(),
        e: VarTestStruct {
            a: 55818,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([36705])).unwrap(),
            c: 82,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 254, b: 11038019863293932723, c: 3248911323 },
            FixedTestStruct { a: 155, b: 576265987753049515, c: 4164489055 },
            FixedTestStruct { a: 100, b: 14194240814660945241, c: 3728482372 },
            FixedTestStruct { a: 132, b: 14980261050401996368, c: 3906117725 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 31556,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([30161])).unwrap(),
                c: 166,
            },
            VarTestStruct {
                a: 2183,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([2273])).unwrap(),
                c: 231,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x233b24ab7e5f473361ee2bda67221aa64da667b1d130f48673fe642fe3fc393d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_5() {
    let value = ComplexTestStruct {
        a: 42404,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([27499])).unwrap(),
        c: 129,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([162])).unwrap(),
        e: VarTestStruct {
            a: 33667,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([32896])).unwrap(),
            c: 46,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 123, b: 3190524335516902138, c: 1329833068 },
            FixedTestStruct { a: 30, b: 17096690851221183220, c: 295578636 },
            FixedTestStruct { a: 59, b: 8693058165156072976, c: 560108314 },
            FixedTestStruct { a: 91, b: 6859192891078689891, c: 818540191 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 51030,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([38918])).unwrap(),
                c: 224,
            },
            VarTestStruct {
                a: 42468,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([25906])).unwrap(),
                c: 129,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x13abc7a3790c13f6ef94157a97d1b90d1c05d488fb40a9a1fda9e8d5c8cc01b1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_6() {
    let value = ComplexTestStruct {
        a: 6760,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([53019])).unwrap(),
        c: 203,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([57])).unwrap(),
        e: VarTestStruct {
            a: 23204,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([56831])).unwrap(),
            c: 150,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 159, b: 13083633660079970584, c: 23713312 },
            FixedTestStruct { a: 255, b: 4498242945647992026, c: 2650895289 },
            FixedTestStruct { a: 248, b: 4123559037685831358, c: 3568539168 },
            FixedTestStruct { a: 114, b: 11781398417317460959, c: 1927026118 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 33775,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([54978])).unwrap(),
                c: 150,
            },
            VarTestStruct {
                a: 47839,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([10291])).unwrap(),
                c: 168,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2eb015bc47b6979baaf4f6b282f88e9ae9fe0c42d119e3adbfeea304f59c9adb");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_7() {
    let value = ComplexTestStruct {
        a: 27051,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([41373])).unwrap(),
        c: 93,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([245])).unwrap(),
        e: VarTestStruct {
            a: 17079,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([18838])).unwrap(),
            c: 254,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 144, b: 9630041280954718907, c: 3860009817 },
            FixedTestStruct { a: 107, b: 14660019895614454726, c: 50688825 },
            FixedTestStruct { a: 34, b: 17069218468855642366, c: 1581057633 },
            FixedTestStruct { a: 27, b: 17894885261833704615, c: 4184919304 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 44356,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([26024])).unwrap(),
                c: 205,
            },
            VarTestStruct {
                a: 28269,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([30137])).unwrap(),
                c: 231,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa5942e18cbc2c03264bfc0cc69e29e13f134c95495103c2b3466df20c75ef1e7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_8() {
    let value = ComplexTestStruct {
        a: 25971,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([20564])).unwrap(),
        c: 187,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([143])).unwrap(),
        e: VarTestStruct {
            a: 39042,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([61430])).unwrap(),
            c: 114,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 123, b: 6334741659144451951, c: 1526537611 },
            FixedTestStruct { a: 243, b: 5222896383156454461, c: 1835653298 },
            FixedTestStruct { a: 63, b: 7286122069490932541, c: 4289629055 },
            FixedTestStruct { a: 183, b: 12433749682947961192, c: 1080446032 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 19298,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([47357])).unwrap(),
                c: 71,
            },
            VarTestStruct {
                a: 8111,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([17806])).unwrap(),
                c: 206,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7a8efffdb7f5d3439511ce3561de603f5045de609f2b32f18fd3f047679f9904");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_9() {
    let value = ComplexTestStruct {
        a: 21941,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([36043])).unwrap(),
        c: 128,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([14])).unwrap(),
        e: VarTestStruct {
            a: 55001,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([14698])).unwrap(),
            c: 17,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 108, b: 16544320973406607841, c: 2882154604 },
            FixedTestStruct { a: 10, b: 7944363846863012684, c: 1796833773 },
            FixedTestStruct { a: 1, b: 9715459767620106557, c: 4262151287 },
            FixedTestStruct { a: 87, b: 7154297801074969655, c: 2943748527 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 30131,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([60754])).unwrap(),
                c: 203,
            },
            VarTestStruct {
                a: 24774,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([22860])).unwrap(),
                c: 218,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x6e7ac8728198a06e6edf766748f545ad7a70867b8bc834415f88167f19933eb6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_chaos_0() {
    let value = ComplexTestStruct {
        a: 15280,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([138])).unwrap(),
        e: VarTestStruct {
            a: 58176,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                56043, 65535, 36334, 0, 1563, 13454, 58660, 8189, 0, 0, 1380, 7729, 65535, 0,
                35646, 64849, 61930, 63918, 40903, 29391, 45920, 53202, 31653, 36449, 50872, 17834,
                16796, 65535, 65535, 10168, 50879, 49646, 0, 0, 32701, 0, 24474, 33069, 22030,
                59425, 17324, 52269, 23244, 31323, 30871, 0, 57317, 19517, 0, 65535, 14168, 49100,
                22031, 7302, 65535, 65187, 32312, 30216, 59751, 52341, 1986, 64785, 41132, 0,
                30998, 57032, 204, 10315, 65535, 4223, 43658, 55565, 0, 2067, 15527, 7660, 21725,
                44167, 23399, 47310, 62286, 48685, 28134, 28969, 28238, 65535, 64728, 59882, 60998,
                1341, 0, 21975, 36226, 36824, 34108, 43592, 65535, 54318, 16337, 25397, 4703,
                60490, 65535, 51204, 50414, 30138, 0, 51584, 42330, 9742, 49661, 17545, 57673,
                16467, 9188, 52282, 0, 10481, 65535, 0, 455, 30629, 46779, 37195, 48507, 0, 22178,
                0, 55615, 64032, 65535, 65535, 46898, 65535, 0, 51756, 47035, 40185, 0, 360, 0, 0,
                46790, 0, 65535, 0, 24586, 0, 62072, 22121, 0, 65535, 10091, 65535, 32954, 63924,
                65535, 3688, 17323, 65535, 0, 55372, 50066, 65535, 65535, 0, 24392, 43088, 65535,
                57833, 0, 51474, 5125, 30995, 4635, 54295, 0, 17277, 65535, 47018, 65535, 0, 56609,
                33513, 1475, 11581, 33291, 14842, 65535, 56789, 0, 36406, 65535, 19480, 65535,
                65535, 0, 0, 58781, 65535, 65535, 3669, 1735, 37606, 24431, 16678, 65535, 55808, 0,
                65535, 47677, 52901, 0, 0, 24197, 27520, 64534, 24747, 39579, 0, 24609, 65535,
                65535, 33423, 35335, 65535, 0, 42245, 16966, 975, 0, 30672, 4688, 27696, 0, 20584,
                23561, 41949, 31083, 24585, 65535, 0, 0, 61525, 28605, 44934, 65535, 0, 10762,
                65535, 46691, 65535, 65535, 17188, 51517, 91, 8548, 0, 0, 27049, 26931, 65535,
                26944, 25074, 0, 51760, 62849, 25259, 24635, 14461, 4747, 64014, 65535, 33071,
                65535, 316, 11154, 38371, 0, 30602, 1060, 25587, 12593, 47047, 31690, 21640, 44683,
                12904, 50629, 1509, 0, 1329, 46891, 8315, 65535, 27245, 65535, 13076, 0, 44704,
                47220, 65535, 65535, 57935, 52201, 34044, 65535, 62657, 2039, 8316, 33809, 605, 0,
                65535, 0, 65535, 51139, 65535, 0, 12292, 65535, 35609, 61923, 11238, 64003, 0,
                13557, 64734, 0, 14571, 16757, 34296, 65535, 28872, 15527, 36682, 0, 29353, 22590,
                0, 4607, 27890, 37182, 38290, 44701, 55376, 31748, 0, 33077, 0, 54165, 65535,
                57154, 38491, 65535, 51749, 65535, 51596, 59598, 0, 3845, 49198, 37703, 48713, 0,
                65535, 22704, 65535, 65043, 63378, 65535, 25564, 65535, 12754, 61745, 15553, 35034,
                31791, 65395, 21347, 45707, 0, 0, 14492, 16977, 49600, 0, 44719, 34695, 48261,
                65535, 41105, 0, 46159, 22408, 27543, 0, 34307, 16761, 0, 65535, 0, 0, 17453, 0,
                49113, 25739, 0, 0, 38046, 46465, 65535, 30326, 3766, 45551, 65535, 778, 62840, 0,
                43334, 23621, 0, 63863, 41848, 0, 52501, 381, 38324, 37177, 32655, 44716, 47872, 0,
                38082, 9932, 28409, 9013, 29215, 0, 16331, 31756, 45347, 45306, 27939, 6775, 22765,
                34693, 65535, 6022, 5226, 0, 13302, 0, 5866, 53938, 0, 41918, 33031, 65535, 19835,
                28102, 49789, 65535, 55370, 52805, 4930, 36194, 28446, 46358, 48475, 65535, 25140,
                15381, 65535, 47883, 61265, 65535, 0, 65535, 0, 51355, 64485, 65535, 64088, 12157,
                65535, 37987, 45026, 57738, 64248, 65535, 22340, 65535, 21908, 25546, 0, 0, 4135,
                0, 65535, 28570, 65535, 17655, 52246, 51913, 4824, 54831, 20883, 0, 65535, 65535,
                0, 0, 24101, 47371, 27543, 65535, 17891, 37102, 61557, 40247, 52547, 65535, 53524,
                0, 0, 65535, 28753, 23327, 65535, 33795, 17336, 61019, 17068, 28331, 39261, 65535,
                57559, 53036, 34028, 63795, 4505, 53117, 65535, 64439, 65535, 59669, 65535, 19885,
                17166, 51610, 20099, 61671, 11075, 50010, 47242, 58393, 65535, 65535, 65535, 35198,
                33946, 55691, 0, 12311, 65535, 65535, 13974, 15384, 0, 350, 65535, 45441, 0, 45765,
                28564, 65535, 21303, 23331, 8977, 15945, 65535, 9373, 0, 37662, 18467, 61550, 0, 0,
                57007, 540, 28744, 65535, 16426, 20246, 2928, 23405, 0, 64912, 3115, 2225, 2314,
                12187, 52362, 27539, 0, 40600, 0, 65535, 37377, 65535, 58813, 33550, 0, 53239,
                65535, 32786, 11546, 28985, 50703, 12700, 17364, 65535, 34784, 58644, 65535, 12134,
                39292, 34316, 24959, 65535, 58222, 65535, 65067, 0, 42140, 24759, 13483, 59348,
                40716, 17874, 64488, 23272, 32463, 32611, 64098, 65535, 19512, 40214, 10564, 40270,
                47116, 42582, 0, 65535, 7589, 65535, 31906, 0, 65535, 11506, 40520, 63676, 58667,
                65535, 0, 0, 63110, 0, 18431, 65535, 57620, 0, 22771, 65535, 65535, 0, 11528,
                11079, 8986, 47042, 0, 65535, 16167, 47431, 0, 56228, 51123, 19798, 65535, 0,
                62162, 60774, 17537, 58499, 1722, 61793, 54484, 23616, 36027, 2320, 25169, 52034,
                65535, 58572, 4556, 65535, 0, 35427, 18884, 60647, 47546, 39368, 21266, 36185,
                16624, 36900, 25307, 52072, 0, 61500, 8892, 53285, 38732, 56859, 31008, 41342, 0,
                26399, 0, 0, 0, 44322, 46738, 0, 38856, 44358, 45331, 58893, 415, 0, 0, 28315, 0,
                50164, 0, 29681, 65535, 55632, 25247, 27540, 19543, 44473, 53494, 62504, 57624,
                36574, 54090, 0, 0, 52520, 11326, 25811, 14651, 40609, 65535, 10419, 28821, 42883,
                13293, 0, 4768, 50688, 55161, 0, 26827, 12679, 61279, 63489, 65535, 6485, 44921, 0,
                24304, 40805, 0, 0, 9407, 37029, 0, 61353, 7309, 16230, 65535, 1786, 26311, 57026,
                36947, 24867, 41560, 53164, 65535, 64830, 54033, 7712, 33111, 18141, 4973, 56776,
                21206, 0, 0, 9628, 0, 33660, 61633, 17121, 0, 0, 14925, 20922, 44817, 65535, 65535,
                14556, 65535, 0, 29784, 65535, 9663, 0, 65535, 0, 0, 57336, 29104, 14016, 9529,
                15830, 7826, 53448, 667, 65535, 65535, 62419, 39636, 0, 0, 30212, 21968, 65535,
                50438, 35431, 0, 35326, 39657, 6009, 5453, 60537, 0, 3581, 31963, 44667, 42403,
                65535, 19810, 65535, 27965, 98, 17235, 29020, 35020, 65535, 47451, 43408, 18089,
                65535, 41121, 15027, 56026, 65535, 62406, 49872, 11592, 4782, 36171, 0, 55558,
                12551, 24886, 65535, 65535, 41920, 0, 15039, 26538, 36052, 10525, 9275, 0, 30936,
                0, 53059, 65535, 38145, 56163, 65535, 19511, 65535, 2915, 23614, 65535, 20924, 0,
                53923, 65535, 23120, 65535, 65535, 36337, 0, 9358, 55551, 7324, 10685, 55930,
                65535, 0,
            ]))
            .unwrap(),
            c: 49,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 205, b: 0, c: 890866662 },
            FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 43, b: 14271930625990025266, c: 668891495 },
            FixedTestStruct { a: 62, b: 14349550525679116958, c: 1963676877 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 44117,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    6133, 54169, 43234, 9784, 3959, 62530, 0, 12414, 51041, 65535, 65535, 50229, 0,
                    33741, 19262, 49611, 35270, 4988, 50059, 65535, 15482, 44695, 50878, 53984,
                    65444, 0, 39215, 34450, 28911, 6464, 13089, 3303, 36431, 18485, 0, 55598,
                    18202, 65535, 0, 58740, 1496, 65535, 29233, 65535, 65535, 19323, 65535, 65535,
                    65535, 18917, 50790, 65535, 65535, 50859, 36411, 40555, 62259, 62376, 47950,
                    65535, 65535, 46937, 18513, 65535, 20751, 56860, 49379, 0, 35319, 61802, 65535,
                    0, 1506, 26286, 65535, 53920, 0, 12426, 56230, 65535, 46732, 8540, 65535,
                    65535, 65535, 47776, 6381, 17201, 16592, 65535, 65535, 42540, 65535, 44806, 0,
                    52822, 65535, 42463, 47811, 20114, 49839, 3204, 6620, 56852, 38618, 0, 0,
                    18398, 64330, 20602, 0, 65535, 65535, 0, 14504, 2937, 16603, 65535, 43809,
                    16086, 65535, 22509, 12263, 46555, 11156, 33631, 7319, 39814, 43807, 0, 12012,
                    30153, 18899, 25946, 7685, 8906, 33019, 0, 59865, 18399, 38783, 62712, 39734,
                    0, 6025, 57776, 0, 24783, 65535, 64852, 17661, 0, 8643, 18089, 0, 56662, 64699,
                    65535, 23865, 57731, 62231, 38548, 0, 5274, 31519, 0, 65535, 48383, 7111, 0, 0,
                    16030, 15346, 65535, 50186, 0, 47299, 64895, 28076, 50356, 65535, 65535, 58226,
                    32921, 0, 38055, 60447, 0, 16523, 22079, 29369, 55573, 63509, 0, 12334, 65535,
                    57584, 25311, 1008, 47382, 54649, 17318, 28109, 0, 0, 37849, 45690, 63856,
                    24578, 0, 50792, 62332, 64970, 33173, 65535, 35241, 61195, 28453, 40908, 20061,
                    51476, 29293, 0, 52911, 51603, 65535, 25092, 65535, 40231, 34434, 19543, 37892,
                    65535, 65535, 5605, 65535, 41808, 33271, 14349, 37830, 0, 49014, 65535, 48215,
                    35881, 65535, 40524, 65535, 35444, 65535, 26883, 24924, 31889, 19726, 39203,
                    110, 13331, 20015, 39626, 34326, 22283, 37804, 0, 0, 0, 13944, 0, 0, 65535,
                    12606, 51933, 50106, 39676, 57664, 52661, 41475, 65535, 65535, 65535, 34909, 0,
                    35390, 42179, 31606, 25148, 49304, 0, 65535, 1632, 47880, 0, 35365, 65535,
                    33647, 17189, 1538, 12915, 7324, 27091, 54839, 65535, 65535, 20887, 19699, 0,
                    31360, 0, 65535, 54730, 50755, 64744, 13739, 0, 65535, 19298, 22807, 24447,
                    65535, 0, 65535, 28991, 65535, 23569, 19264, 47848, 47792, 3594, 50209, 65535,
                    65535, 60105, 53205, 15415, 47725, 65535, 0, 23300, 2037, 12090, 60945, 65535,
                    3814, 19146, 65535, 52641, 16251, 0, 2685, 8649, 65535, 65535, 36263, 0, 43077,
                    54729, 0, 60514, 40976, 58725, 0, 7733, 65535, 10973, 65535, 10570, 48231,
                    8495, 52167, 33222, 29145, 29337, 55356, 65535, 30423, 59865, 51269, 22772,
                    65530, 65535, 1285, 6379, 0, 58504, 47676, 21291, 65535, 40036, 65535, 49365,
                    65535, 56059, 59949, 0, 65535, 57956, 39922, 44578, 3025, 32781, 27700, 29003,
                    0, 39319, 54733, 65535, 1206, 32734, 7245, 13464, 0, 24126, 3336, 65185, 46277,
                    57319, 5945, 56674, 51606, 65535, 65535, 43833, 58697, 36254, 61208, 30636,
                    40669, 2495, 65535, 8362, 51993, 50512, 48627, 34687, 0, 28498, 49904, 0,
                    65535, 0, 65535, 42255, 45435, 0, 31923, 0, 20862, 1834, 65535, 7295, 14795,
                    57763, 32788, 27850, 61916, 58099, 30124, 65535, 2766, 26979, 0, 30129, 51620,
                    0, 0, 26762, 27402, 0, 65535, 65535, 7271, 31616, 225, 43957, 8534, 0, 601,
                    46471, 56085, 46166, 16865, 65535, 532, 5162, 0, 7734, 65535, 2407, 65535,
                    13136, 42667, 65535, 0, 0, 63852, 25575, 16480, 24914, 65535, 65535, 54568, 0,
                    14398, 28563, 4687, 46872, 19690, 60298, 65535, 65535, 0, 65535, 17730, 15231,
                    0, 43036, 0, 65535, 62290, 6262, 65535, 65535, 29534, 0, 55223, 23317, 6297, 0,
                    1084, 38879, 0, 29287, 65535, 0, 19442, 64338, 0, 19627, 55245, 59125, 7547, 0,
                    54057, 65535, 65535, 65144, 14745, 65535, 65535, 65535, 65535, 60012, 53085, 0,
                    56486, 23513, 22419, 347, 19087, 30683, 65535, 36546, 0, 43578, 65535, 65535,
                    51185, 53582, 54622, 10114, 50398, 65535, 65535, 65535, 53920, 65535, 65535,
                    65535, 65535, 2843, 25808, 16960, 64699, 2534, 65535, 0, 65535, 65535, 43034,
                    48454, 65535, 63470, 0, 22690, 0, 0, 28032, 30391, 39288, 65535, 6770, 32713,
                    33261, 56245, 0, 17489, 0, 25891, 45382, 51551, 1447, 46519, 65535, 65535,
                    3484, 29042, 0, 0, 14340, 41276, 0, 0, 39184, 57969, 0, 28315, 56607, 43104, 0,
                    41178, 65535, 52714, 0, 56224, 0, 55837, 2221, 18473, 42, 65535, 29564, 20862,
                    58975, 0, 14352, 0, 65535, 0, 0, 2446, 7274, 61004, 24552, 65535, 15430, 0,
                    60080, 2800, 0, 65187, 2825, 16887, 32365, 3335, 61525, 0, 65535, 0, 65535, 0,
                    5422, 17873, 27408, 27080, 37981, 58654, 65535, 16065, 29352, 65535, 0, 0,
                    65535, 0, 18072, 0, 6889, 25052, 12558, 65535, 65535, 64030, 65535, 16845, 0,
                    65535, 44948, 60663, 35501, 43962, 44953, 32332, 65535, 20164, 9727, 20742,
                    46365, 22084, 6317, 37045, 13280, 0, 31232, 0, 19290, 0, 40575, 65535, 43276,
                    22037, 51835, 24215, 178, 65535, 19120, 0, 0, 65535, 52837, 65535, 45071,
                    59349, 18447, 28, 8874, 0, 133, 45890, 65535, 57915, 56330, 65535, 65535,
                    20356, 46898, 0, 19062, 127, 7666, 18127, 42883, 65535, 10403, 22943, 64786,
                    15877, 423, 39399, 65535, 36693, 65535, 65535, 65535, 57964, 43398, 16417,
                    13834, 15790, 0, 21393, 45543, 42072, 65535, 65535, 0, 4015, 58969, 37612,
                    41807, 50711, 1791, 7596, 63035, 43549, 8843, 0, 6918, 0, 0, 16023, 24572,
                    10895, 65535, 61436, 65535, 41786, 27279, 52841, 0, 61861, 63255, 65535, 7875,
                    59566, 62491, 23627, 40764, 43348, 0, 65535, 65535, 65535, 65535, 24531, 29897,
                    37846, 15870, 29212, 41476, 53742, 50435, 65535, 16218, 55762, 44472, 62983,
                    40309, 26819, 0, 65535, 65535, 65535, 65535, 37231, 47179, 29088, 64569, 19922,
                    59137, 24667, 33600, 0, 32216, 41643, 23519, 44853, 58097, 50871, 65535, 61464,
                    65535, 20570, 50595, 42741, 63273, 0, 17927, 65535, 5447, 0, 63784, 6036, 0,
                    22204, 0, 38749, 65535, 27996, 65535, 65535, 0, 0, 65535, 34411, 49212, 0,
                    11062, 24883, 56214, 8156, 65535, 65535, 65535, 65535, 24849, 18621, 39585,
                    65535, 57930, 0, 0, 65535, 58377, 24161, 29814, 24630, 38520, 25351, 32417,
                    42747, 0, 22221, 31348, 26323, 65535, 0, 61988, 0, 65535, 34033, 3120, 56422,
                    13012, 75, 59496, 65535, 0, 34351, 14556, 24251, 0, 0, 0, 6438, 7215, 0, 0,
                    54587, 47463, 4854, 65535, 9141, 65535, 0, 22362, 0, 65535, 0, 5781, 26217,
                    64881, 41020, 65287, 13880, 5846, 29036, 50062, 0, 60434, 7130, 8227, 64105,
                    40315, 59712, 0, 4700, 56140, 47635, 964, 15578, 65535, 12098, 17876, 0, 39093,
                    0, 54872, 3735, 64046, 31954, 15993, 0, 6361, 65535, 65535, 13332, 0, 27160,
                    52679, 54286, 38773, 54607, 62384, 0, 65535, 65535, 65535, 65535, 8461, 23862,
                    65535, 57934, 3171, 27759, 65535, 6302, 7205, 30337, 0, 65535, 41713, 0, 21168,
                    21771, 363, 30290, 7256, 0, 65535, 23556, 65535, 17033, 7401, 50679, 49735,
                    65535, 8270, 57990, 0, 16191, 9226, 29, 30812, 59921, 62268,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 9225,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    33411, 21327, 47202, 38974, 65535, 63303, 10284, 65535, 65535, 24089, 20083,
                    65535, 65535, 55871, 15226, 20387, 8658, 32666, 63796, 0, 12691, 33213, 43492,
                    12098, 38634, 3287, 15855, 11166, 20185, 36228, 12371, 65535, 0, 12598, 11134,
                    65535, 3299, 65535, 11139, 46752, 62367, 65535, 4946, 0, 705, 65535, 60143, 0,
                    31065, 65535, 11199, 65535, 19735, 65535, 37078, 25592, 41192, 2488, 62630,
                    49877, 44753, 65535, 6094, 41457, 31569, 0, 33034, 8316, 65535, 0, 6612, 54815,
                    0, 829, 11082, 15632, 65535, 23602, 65535, 0, 46857, 2295, 37006, 51278, 24044,
                    0, 29645, 65535, 65535, 62923, 65535, 28428, 29646, 8332, 10965, 34236, 53594,
                    39484, 64402, 28026, 0, 16502, 61311, 9914, 65535, 42103, 46559, 0, 1103,
                    65535, 65332, 52477, 37344, 35287, 65535, 64071, 49612, 65535, 0, 65535, 33646,
                    0, 65535, 51853, 0, 61156, 10026, 29813, 49648, 26448, 0, 0, 65535, 65535, 0,
                    0, 41358, 55211, 0, 32039, 0, 60621, 65535, 56083, 42191, 23084, 35176, 8884,
                    52825, 48998, 0, 17108, 6866, 12342, 65535, 54001, 0, 65535, 52560, 65535, 0,
                    65535, 65535, 53589, 65535, 43840, 65535, 5273, 43213, 65535, 64470, 65156,
                    6707, 13073, 30922, 0, 10095, 25809, 0, 3918, 52182, 65535, 0, 52741, 41269,
                    1630, 31035, 11627, 30437, 39583, 51163, 0, 40419, 65535, 65535, 65535, 9659,
                    35203, 9623, 0, 42101, 1244, 46536, 9228, 22978, 29752, 0, 22596, 0, 60334,
                    54534, 0, 0, 906, 0, 28556, 29331, 23348, 9043, 39272, 26085, 0, 0, 16208,
                    65535, 0, 0, 32501, 51268, 64668, 9273, 51105, 18774, 16722, 53521, 59295,
                    9208, 26709, 8394, 2869, 34477, 9806, 65535, 48361, 0, 65535, 65535, 62227,
                    19676, 44794, 0, 22579, 16042, 0, 0, 9126, 60050, 0, 65535, 1981, 0, 30768, 0,
                    0, 0, 0, 53284, 59194, 9727, 21791, 65535, 194, 25358, 39097, 0, 57187, 39396,
                    24091, 65452, 17992, 19600, 65535, 4537, 19700, 65535, 42197, 63737, 4738,
                    5828, 2367, 65535, 55485, 42635, 65535, 14898, 37546, 19269, 12103, 31222,
                    55931, 50869, 22455, 61032, 65535, 65535, 1277, 0, 3676, 25082, 33203, 28342,
                    0, 8493, 65535, 65535, 28926, 6144, 9028, 65535, 60869, 0, 65535, 65535, 57947,
                    65535, 48705, 65535, 0, 19269, 51833, 1175, 34028, 22453, 20802, 0, 46801,
                    17499, 65535, 50048, 63163, 0, 65535, 0, 16063, 65535, 21646, 65535, 0, 0,
                    7534, 0, 54792, 57909, 55219, 14202, 11688, 23909, 49331, 37091, 0, 45485,
                    14797, 64406, 968, 0, 47486, 0, 65535, 40587, 2360, 2748, 5867, 38105, 18957,
                    19433, 27156, 21744, 65535, 65535, 0, 9493, 137, 65535, 0, 55658, 59719, 65535,
                    15323, 37836, 16228, 65535, 32734, 5874, 502, 65535, 899, 42636, 41256, 48491,
                    12457, 44138, 32993, 57620, 32340, 0, 55894, 49969, 23264, 65535, 65535, 49359,
                    39386, 45830, 63227, 27112, 35938, 14413, 29434, 4758, 65535, 0, 36596, 62380,
                    23445, 23848, 0, 2250, 33407, 44083, 23451, 0, 50239, 32414, 57696, 65535,
                    27760, 16794, 18360, 0, 30070, 21997, 15192, 10167, 56749, 243, 50148, 65535,
                    0, 20638, 65535, 57523, 23718, 32121, 28197, 21020, 0, 65535, 9787, 46969,
                    65535, 39564, 60144, 17769, 58323, 56379, 56116, 47449, 65535, 36161, 65535,
                    43016, 9732, 0, 3407, 15817, 0, 26584, 65535, 0, 37705, 0, 4141, 65535, 43410,
                    0, 17189, 0, 53261, 59448, 0, 4456, 62012, 0, 43164, 15617, 35186, 54985,
                    57460, 11143, 0, 0, 65535, 0, 27400, 1448, 65535, 47199, 60491, 49589, 65535,
                    27172, 33599, 0, 59659, 43569, 48199, 56615, 0, 54021, 0, 2178, 21671, 17258,
                    0, 65535, 65535, 65535, 0, 38172, 41727, 0, 65535, 61716, 50472, 19665, 0,
                    14765, 0, 14883, 32606, 39312, 0, 62632, 15060, 0, 65535, 43158, 31970, 26415,
                    8355, 58391, 3021, 58668, 30215, 53797, 0, 44993, 48013, 65535, 0, 58786, 5780,
                    47175, 58376, 65535, 0, 36499, 0, 3723, 55708, 65535, 4027, 11260, 65535,
                    65535, 5706, 65535, 0, 38674, 30280, 17113, 65535, 65535, 65535, 13971, 0, 0,
                    0, 20621, 65535, 62577, 40091, 38198, 56268, 5630, 48419, 50700, 0, 674, 65535,
                    3196, 65535, 124, 0, 7138, 65535, 30305, 61019, 0, 41534, 50316, 58377, 52786,
                    65535, 61278, 0, 4433, 46600, 16066, 56558, 0, 34779, 51332, 3121, 0, 61120,
                    1157, 0, 65535, 5650, 54678, 7880, 39195, 0, 38050, 45208, 0, 57187, 0, 41883,
                    35183, 0, 7295, 53582, 4978, 60421, 65535, 65535, 37449, 53735, 64929, 64849,
                    3804, 57355, 6442, 42688, 65535, 64036, 3936, 0, 23716, 60749, 64147, 33495,
                    3267, 60532, 0, 65535, 40794, 25352, 0, 4116, 0, 61133, 64295, 24586, 65535,
                    36836, 52950, 52800, 65535, 40012, 0, 65535, 59222, 40439, 27481, 36518, 22014,
                    17727, 33809, 0, 65535, 21505, 42225, 65535, 65535, 37981, 17397, 13087, 65535,
                    65535, 52952, 0, 65535, 29267, 65535, 0, 37112, 13325, 61863, 65535, 12589,
                    28753, 65535, 0, 56683, 7090, 4722, 0, 51906, 0, 18995, 0, 56992, 6725, 24923,
                    13926, 0, 0, 0, 39062, 0, 65535, 0, 46939, 0, 43454, 65535, 0, 45372, 26888,
                    65535, 32221, 0, 0, 16252, 0, 58631, 15852, 64640, 65535, 65535, 59027, 65535,
                    0, 0, 28369, 65535, 41790, 5336, 27837, 4168, 65535, 65137, 41046, 52071, 0,
                    36003, 29416, 57022, 14276, 33414, 20965, 65535, 60567, 28900, 65535, 64319,
                    47831, 11489, 65535, 52903, 24991, 65535, 11799, 0, 408, 64537, 34135, 65535,
                    25136, 65535, 46229, 52685, 65535, 0, 65535, 65535, 2938, 0, 63859, 57720, 0,
                    33095, 0, 0, 17696, 65535, 34026, 46695, 65535, 62085, 65535, 34225, 65535,
                    36676, 58934, 0, 42073, 57180, 7653, 0, 65535, 65535, 57491, 65535, 65535,
                    8312, 22787, 0, 8934, 41694, 3848, 26339, 0, 0, 33015, 64879, 42141, 0, 21749,
                    20127, 45099, 4061, 53926, 65535, 65535, 35544, 19671, 7512, 23952, 65535,
                    37186, 48126, 48224, 12048, 50752, 56476, 32248, 34848, 65535, 0, 65535, 2032,
                    25472, 26201, 38831, 42511, 42707, 0, 23108, 38837, 10260, 46509, 65535, 0,
                    24741, 43034, 65535, 27404, 48758, 15448, 20620, 65535, 0, 35364, 26062, 36508,
                    0, 0, 58475, 33925, 65535, 16534, 41647, 63677, 65535, 65535, 65535, 0, 17658,
                    18175, 60908, 0, 15000, 43200, 26729, 51503, 0, 13004, 64270, 34380, 51877,
                    65535, 38043, 65535, 65535, 36989, 33064, 2271, 29822, 0, 19799, 48033, 17726,
                    34956, 20965, 20727, 0, 0, 64492, 0, 9516, 37163, 52628, 27032, 18196, 12996,
                    0, 48241, 45651, 37274, 33988, 25189, 65535, 51445, 41866, 0, 35498, 1085,
                    8143, 10287, 0, 60631, 0, 42889, 37512, 58750, 2942, 65535, 32085, 14640,
                    45068, 59453, 65535, 16811, 0, 32519, 0, 6725, 40535, 65535, 44038, 58685,
                    15197, 0, 31942, 2066, 28985, 19192, 56281, 0, 65535, 47177, 65535, 51507,
                    42741, 14896, 0, 56385, 20018, 40457, 55679, 27021, 15365, 28363, 0, 0, 0,
                    7424, 65535, 65535, 16249, 31276, 44051, 65535, 12944, 6538, 0, 29130, 14706,
                    24552, 20012, 0, 65535, 34863, 17288, 65535, 65535, 0, 3516, 0, 51154,
                ]))
                .unwrap(),
                c: 123,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4c0a5c0335b803a36ad2e8ae8063eaa7420c091797074082bf0113df9a941df2");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_chaos_1() {
    let value = ComplexTestStruct {
        a: 34335,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            28911, 23128, 5142, 39460, 28794, 0, 45973, 0, 65535, 14654, 0, 20168, 44845, 65535,
            56071, 63059, 65535, 0, 31094, 65535, 14891, 20035, 65535, 55112, 23912, 65535, 65535,
            31228, 28741, 0, 15481, 58409, 0, 1952, 65535, 0, 12320, 31379, 192, 65535, 50958,
            29711, 65535, 39068, 65535, 43048, 0, 39709, 42656, 939, 3019, 0, 4731, 15914, 6611,
            30247, 59319, 25966, 65535, 22279, 38565, 65535, 0, 15023, 40328, 0, 47621, 65535,
        ]))
        .unwrap(),
        c: 189,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 32393,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([65535])).unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 1309541429 },
            FixedTestStruct { a: 161, b: 0, c: 232350620 },
            FixedTestStruct { a: 255, b: 9684147188565411464, c: 0 },
            FixedTestStruct { a: 78, b: 15690044218905010559, c: 683865189 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 47794,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([64563])).unwrap(),
                c: 117,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xd9c780f1cc4ba0f9f4c121062c817a6b74825de8e4d374a7b17f11ecea73cb3b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_one_chaos_2() {
    let value = ComplexTestStruct {
        a: 6168,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            23271, 13490, 0, 0, 8475, 6430, 29468, 65535, 8198, 65535, 3774, 22672, 38858, 4157,
            4027, 0, 65535, 26576, 63574, 0, 65535, 40178, 0, 1455, 11702, 3941, 65535, 65535,
            13201, 55539, 65535, 1627, 59044, 65535, 65535, 44671, 6298, 65535, 2703, 65535, 56933,
            60562, 63417, 36975, 22808, 12107, 3442, 65535, 53958, 31878, 7077, 0, 42511, 41672,
            65535, 29494, 40814, 14410, 0, 24487,
        ]))
        .unwrap(),
        c: 64,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            175, 204, 157, 196, 164, 76, 49, 201, 234, 58, 132, 100, 163, 41, 12, 133, 37, 255, 30,
            60, 129, 4, 79, 179, 202, 240, 183, 115, 191, 1, 81, 135, 73, 134, 124, 206, 135, 223,
            33, 33, 238, 113, 3, 177, 146, 82, 15, 21, 233, 125, 181, 199, 6, 44, 222, 246, 2, 36,
            101, 54, 125, 189, 81, 214, 163, 221, 56, 117, 139, 74, 253, 150, 178, 109, 173, 220,
            147, 62, 200, 9, 251, 19, 82, 98, 7, 201, 28, 154, 214, 88, 76, 117, 98, 23, 140, 182,
            92, 91, 178, 86, 22, 32, 55, 29, 76, 55, 165, 181, 162, 167, 228, 81, 57, 151, 133, 46,
            244, 26, 133, 77, 243, 214, 27, 13, 122, 140, 215, 37, 220, 54, 75, 81, 54, 49, 221,
            186, 53, 107, 70, 172, 13, 70, 138, 137, 76, 159, 9, 69, 1, 116, 217, 5, 248, 143, 48,
            69, 140, 222, 251, 174, 165, 142, 199, 38, 94, 160, 68, 152, 66, 64, 51, 96, 248, 169,
            23, 102, 111, 246, 126, 206, 228, 164, 107, 156, 24, 100, 121, 189, 245, 224, 133, 231,
            255, 229, 110, 249, 225, 43, 22, 110, 252, 25, 207, 33, 215, 11, 94, 165, 43, 126, 206,
            111, 58, 145, 11, 209, 16, 61, 46, 190, 86, 208, 76, 135, 40, 124, 177, 159, 3, 183,
            31, 180, 0, 206, 38, 15, 204, 209, 214, 143, 164, 200, 128, 64, 149, 74, 102, 188, 232,
            150, 201, 38, 154, 46, 173, 130,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 65535,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                63943, 0, 30128, 1130, 65535, 0, 43490, 0, 17263, 36672, 0, 65535, 0, 21137, 56624,
                5073, 65535, 56247, 40332, 42294, 0, 19313, 4484, 25618, 0, 17674, 34843, 25399,
                12727, 0, 6449, 65535, 65535, 39024, 52056, 9872, 10047, 18372, 18740, 0, 12694, 0,
                47466, 23533, 65535, 21902, 50810, 0, 1972, 0, 0, 45366, 63924, 50390, 59286, 0,
                15937, 34554, 65535, 0, 0, 33859, 35367, 65535, 65535, 9146, 59007, 42202, 59810,
                0, 32724, 3495, 7564, 63288, 64480, 60039, 30387, 51366, 23319, 21560, 65535,
                44251, 0, 17578, 0, 35456, 62625, 0, 37677, 22715, 65535, 29894, 3185, 51501,
                51221, 64906, 32352, 58756, 57123, 59880, 12790, 48578, 48349, 0, 65535, 25647,
                30777, 60673, 0, 65535, 65535, 7138, 0, 0, 65535, 47898, 56141, 58316, 34553, 6882,
                57094, 0, 0, 0, 0, 34023, 65535, 12885, 10221, 65535, 20145, 27647, 42417, 0,
                64729, 0, 45307, 23461, 11632, 58981, 65535, 20743, 20726, 36451, 19954, 33597,
                54359, 0, 6816, 5837, 17257, 65535, 19693, 34155, 8804, 15365, 42445, 19676, 26413,
                62484, 0, 53288, 53725, 51435, 0, 31404, 65535, 65535, 1290, 60253, 0, 0, 22623,
                35525, 52094, 59784, 56842, 0, 7885, 62936, 0, 21770, 7805, 65535, 65535, 38661,
                40160, 42542, 65535, 65535, 10860, 17867, 0, 46591, 65535, 7622, 58267, 0, 58251,
                0, 56572, 65535, 61107, 29171, 25613, 7010, 6480, 0, 65535, 27134, 0, 64979, 65535,
                0, 56609, 42479, 52170, 62116, 9514, 65535, 45757, 65535, 0, 10351, 17162, 25591,
                28451, 50427, 17128, 65432, 0, 34195, 31394, 7746, 57081, 16781, 17450, 0, 51774,
                35094, 0, 65535, 0, 46838, 22556, 28470, 65535, 0, 6625, 54019, 65535, 65535,
                17613, 14991, 65535, 65535, 0, 65535, 61779, 65535, 0, 0, 25432, 51896, 65535,
                65535, 65535, 16021, 60355, 19016, 60247, 62860, 49214, 65535, 23370, 65535, 0,
                19699, 20690, 1902, 50713, 0, 65535, 53992, 8975, 65535, 0, 42042, 62215, 3430,
                29847, 65535, 0, 2929, 42594, 25191, 12372, 53698, 276, 0, 1052, 55974, 0, 26555,
                53811, 0, 33491, 2498, 1956, 59718, 65535, 59098, 13877, 11310, 0, 32818, 0, 0,
                39807, 0, 11861, 8259, 43368, 3930, 0, 29803, 65535, 9744, 42863, 53727, 0, 54889,
                65535, 7728, 65535, 65535, 5624, 28967, 0, 34129, 65535, 28211, 30953, 48210, 0,
                65535, 15843, 65426, 52147, 6537, 65535, 62056, 0, 0, 65535, 33388, 0, 43018,
                65535, 0, 0, 50825, 0, 29153, 62527, 59149, 65535, 17377, 26700, 50648, 28781,
                45131, 65535, 43440, 36252, 65535, 5208, 60381, 5309, 8129, 24607, 0, 65168, 0,
                42771, 0, 42864, 11393, 15706, 65535, 23468, 65535, 35315, 50221, 65535, 0, 0,
                65535, 27535, 25279, 2974, 35728, 18067, 30359, 1279, 20771, 45797, 0, 54858, 0,
                6483, 0, 45524, 22366, 25959, 37761, 13157, 12306, 65535, 64645, 52150, 19250,
                65535, 31167, 0, 56850, 0, 64282, 45213, 65535, 12776, 0, 26342, 65535, 65535, 0,
                65535, 58072, 20560, 62813, 65535, 44170, 29501, 64090, 23690, 23752, 10063, 65535,
                58361, 6778, 8075, 35238, 65535, 5996, 50720, 38624, 52918, 42956, 33172, 65535,
                65535, 4803, 0, 0, 33706, 26518, 40995, 0, 42866, 65535, 8550, 59079, 65535, 0, 0,
                0, 29125, 49540, 49130, 65535, 65535, 43911, 0, 65535, 128, 30353, 55218, 27334,
                44225, 0, 0, 65535, 0, 14175, 39541, 22562, 47371, 59965, 35466, 37862, 23104,
                26057, 0, 0, 56784, 15282, 65535, 0, 22345, 23560, 64253, 65535, 14056, 28038,
                58279, 65535, 0, 46715, 65535, 65535, 30225, 17466, 65535, 0, 12364, 58816, 46690,
                19303, 3652, 60603, 64940, 30672, 0, 0, 65535, 65535, 57465, 12486, 65535, 58710,
                0, 33935, 0, 27746, 524, 52095, 0, 0, 39846, 4046, 43098, 0, 0, 57850, 0, 2902,
                42234, 51038, 0, 65535, 39050, 65535, 3795, 61109, 29153, 0, 12871, 40721, 46929,
                37928, 24388, 18268, 1020, 17706, 2984, 46085, 12060, 4516, 65535, 14324, 0, 33015,
                0, 58241, 0, 0, 5701, 55100, 0, 57989, 41438, 60587, 42644, 0, 41528, 27878, 54911,
                65535, 0, 42211, 65535, 9288, 8050, 21759, 27008, 65535, 24624, 28989, 65535,
                54133, 58919, 22689, 30475, 38150, 65535, 65535, 14190, 65535, 49402, 40421, 54486,
                14807, 23899, 47234, 36182, 10906, 14281, 65535, 31220, 21594, 65535, 28266, 55863,
                57439, 63812, 1051, 0, 0, 0, 2474, 18895, 18759, 41774, 37362, 7312, 52378, 16225,
                31669, 65535, 48083, 65535, 0, 65535, 0, 0, 0, 29041, 28698, 51852, 0, 47595,
                22321, 6582, 22904, 59182, 32998, 58336, 42328, 54836, 0, 34629, 65535, 65535,
                62857, 65535, 40692, 65535, 0, 48513, 38905, 39214, 0, 65535, 0, 0, 37950, 65535,
                6150, 0, 49253, 844, 0, 27711, 53510, 34285, 20492, 0, 32988, 24654, 15569, 30564,
                65535, 0, 60749, 65535, 30378, 15968, 0, 59692, 65535, 65535, 26325, 45393, 32471,
                61887, 55736, 56502, 65535, 7467, 0, 0, 54111, 27848, 0, 26246, 19853, 52854,
                24551, 53341, 65535, 50662, 2692, 24818, 47711, 65535, 42031, 65535, 50999, 21916,
                65535, 25414, 26389, 65535, 54186, 0, 7782, 2, 49649, 0, 63996, 10402, 7126, 65535,
                29777, 35238, 25916, 21734, 23791, 62760, 18453, 65535, 0, 0, 28439, 23056, 3503,
                35113, 58901, 43507, 0, 37140, 38397, 0, 40952, 33162, 65535, 0, 15287, 65535,
                34439, 65535, 0, 44416, 14582, 64661, 0, 0, 6032, 0, 18286, 37800, 53076, 22526,
                5654, 38638, 0, 0, 44110, 26808, 65535, 31537, 65535, 15592, 2818, 65535, 65535,
                47716, 65535, 62139, 3467, 0, 14847, 45142, 61750, 51915, 0, 28571, 24132, 65535,
                8601, 44803, 0, 65535, 0, 4383, 19769, 15862, 10166, 43835, 0, 12234, 44239, 65535,
                14243, 16813, 44997, 4311, 14565, 10777, 26999, 0, 44826, 13852, 63424, 6435,
                65535, 65535, 47001, 65535, 42748, 38063, 65535, 9048, 49191, 58272, 34356, 20310,
                43487, 0, 65535, 12591, 65535, 65535, 62067, 16372, 16659, 48799, 50997, 11639,
                52295, 25613, 60088, 65535, 21565, 9934, 1031, 0, 65535, 65535, 10416, 0, 9100, 0,
                22041, 65535, 42651, 34298, 57389, 57937, 62289, 65535, 43676, 56015, 0, 65535,
                35485, 0, 31389, 65535, 946, 0, 57312, 64781, 41189, 17651, 41603, 56075, 65535,
                27770, 55952, 65535, 48247, 23780, 43465, 65535, 0, 16714, 0, 65535, 38655, 24518,
                65535, 37513, 43857, 65535, 57874, 0, 255, 40214, 65535, 61869, 35307, 65535,
                16806, 0, 34411, 63740, 61428, 46451, 0, 65535, 27373, 17091, 0, 51160, 43265,
                50312, 28353, 0, 42823, 26209, 39348, 3579, 39552, 25834,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 4294967295 },
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 4120464077 },
            FixedTestStruct { a: 65, b: 0, c: 2188123331 },
            FixedTestStruct { a: 255, b: 17000352882817197487, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 12691,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 56004, 29080, 62513, 0, 19666, 16031, 17941, 0, 9254, 26531, 0, 0,
                    43712, 0, 65535, 65535, 20900, 6017, 55871, 0, 50142, 50237, 53963, 65535, 0,
                    4915, 65535, 33301, 24022, 43901, 0, 19136, 40337, 65535, 51610, 0, 32487,
                    65535, 65535, 2018, 14030, 50965, 26517, 65535, 488, 32617, 0, 38812, 43514,
                    60341, 63104, 0, 65348, 65535, 65535, 49837, 0, 407, 51172, 33683, 59568,
                    11439, 44948, 54941, 52682, 6801, 12016, 39632, 0, 17538, 65535, 25534, 27032,
                    54668, 40567, 58083, 6978, 48047, 50623, 43151, 13066, 11539, 13682, 65535,
                    4787, 21455, 20345, 17198, 10161, 65535, 2953, 65535, 55649, 65535, 43054,
                    42891, 5667, 3974, 9085, 65535, 65535, 50513, 59212, 20109, 65535, 65535, 0,
                    65535, 8171, 24605, 65535, 15914, 16456, 15957, 63391, 41087, 58877, 0, 17832,
                    27030, 55542, 33778, 0, 9701, 0, 2557, 0, 22941, 0, 3325, 61667, 65535, 0,
                    24570, 60041, 50733, 0, 0, 65535, 64587, 0, 38867, 56844, 9720, 0, 57238, 4606,
                    10047, 32468, 28023, 18157, 65011, 65535, 52627, 14232, 0, 54376, 65535, 45278,
                    47267, 42696, 43274, 1963, 65535, 33200, 0, 51031, 32854, 26507, 65535, 10627,
                    29169, 6446, 29607, 0, 0, 0, 63417, 52524, 3333, 37152, 65190, 10663, 65535,
                    53369, 65535, 18584, 0, 37837, 0, 31649, 0, 54905, 65535, 0, 46689, 1137,
                    18292, 65535, 65535, 0, 406, 0, 0, 0, 61652, 0, 64111, 43427, 50940, 65463,
                    35987, 18388, 39873, 49608, 64748, 45007, 0, 51383, 50158, 0, 0, 43786, 65535,
                    23861, 49224, 31716, 65535, 65535, 46116, 65535, 7884, 33546, 65535, 65535,
                    38231, 56875, 0, 65535, 65535, 15412, 13720, 12299, 57275, 46848, 12589, 0,
                    62221, 65535, 26394, 30050, 13363, 65535, 13275, 65535, 0, 0, 27996, 17071,
                    57553, 51034, 44394, 56792, 48389, 0, 65535, 5085, 0, 29699, 42450, 0, 7656, 0,
                    34316, 32572, 0, 0, 65535, 65535, 49857, 28674, 26313, 65535, 35418, 40944, 0,
                    0, 0, 20166, 6199, 0, 7588, 0, 23684, 55875, 37372, 30723, 48260, 64447, 65535,
                    35885, 65535, 11614, 27582, 65254, 26949, 43408, 45087, 23346, 0, 46693, 28060,
                    22153, 0, 15333, 7017, 41094, 62466, 14526, 0, 0, 8821, 65535, 54352, 49413,
                    65535, 3769, 11913, 2747, 65535, 32311, 65290, 23706, 9495, 311, 34710, 18431,
                    31390, 25615, 65535, 60284, 41856, 52530, 0, 63009, 46845, 52231, 1471, 0,
                    15735, 41688, 57166, 10827, 7244, 12337, 54968, 52512, 47153, 38056, 3738,
                    31880, 14207, 0, 42132, 65535, 26414, 51688, 44695, 0, 4993, 65535, 62369,
                    4278, 23662, 33942, 26622, 0, 62098, 65535, 65535, 47510, 65535, 6756, 65535,
                    0, 61748, 48814, 13757, 65535, 40326, 60081, 65535, 31510, 14216, 25173, 24054,
                    34805, 45318, 15005, 33910, 0, 0, 25228, 21040, 47858, 6398, 57347, 22974,
                    46076, 41603, 11053, 52673, 0, 37063, 65535, 59505, 0, 8598, 10612, 34613,
                    17815, 56294, 65535, 47169, 46953, 65535, 56010, 65535, 0, 5402, 49806, 13515,
                    55679, 65535, 20180, 14241, 17777, 38408, 9689, 61733, 0, 59498, 5199, 19767,
                    65535, 48201, 48245, 45784, 43234, 0, 0, 35738, 65535, 11992, 44573, 25120,
                    44098, 14435, 46199, 0, 39951, 47553, 65535, 0, 65535, 65535, 65535, 40258,
                    21701, 65535, 5524, 65280, 1583, 10617, 10298, 28255, 65535, 43806, 0, 12914,
                    0, 11696, 5001, 41565, 65535, 1243, 55705, 45631, 20350, 0, 65535, 0, 53780,
                    65535, 53298, 13702, 0, 50758, 45816, 0, 59579, 57776, 31754, 18094, 62169,
                    59257, 57595, 65535, 0, 0, 51211, 65535, 48566, 27215, 23458, 0, 0, 65535,
                    22118, 34253, 33046, 35146, 57435, 0, 54263, 0, 0, 41504, 0, 58037, 52741,
                    2452, 17569, 0, 64123, 38339, 10343, 65535, 27300, 0, 17900, 32059, 63982,
                    65535, 65535, 33392, 47787, 65321, 32296, 65535, 57603, 0, 0, 24270, 19634,
                    65535, 0, 65535, 4015, 56767, 51612, 39661, 0, 62360, 3213, 38191, 50492,
                    12876, 65535, 13479, 38450, 65535, 9046, 0, 13894, 12657, 43031, 13795, 27539,
                    65535, 40188, 15734, 3473, 0, 49516, 11495, 7165, 0, 56827, 65535, 0, 53896, 0,
                    0, 0, 907, 43860, 29853, 55599, 65535, 0, 60945, 56395, 13146, 62535, 65535,
                    65535, 65535, 0, 49737, 45393, 1032, 15806, 35138, 25568, 64086, 14700, 17553,
                    65535, 62695, 65535, 65535, 42613, 16745, 65535, 65535, 54560, 2704, 22176,
                    1294, 0, 61651, 27039, 0, 37715, 62196, 52243, 0, 16987, 65535, 0, 25465,
                    65535, 13034, 21227, 23207, 26695, 19939, 47256, 58272, 0, 48573, 28962, 49127,
                    34538, 12134, 65535, 41610, 0, 5821, 3842, 62086, 18276, 11581, 65535, 51208,
                    11804, 65535, 33485, 36161, 11760, 7118, 47097, 16544, 0, 51912, 40447, 65535,
                    53128, 65535, 29356, 29137, 45465, 61741, 0, 0, 0, 25104, 54620, 30447, 44799,
                    6778, 59153, 41576, 65535, 1212, 40236, 35730, 56426, 0, 44883, 36214, 22381,
                    57952, 21869, 49091, 61156, 55456, 65535, 1078, 59570, 23719, 0, 26209, 40501,
                    65018, 12136, 11702, 16788, 60259, 29305, 7875, 65226, 21406, 20257, 55641,
                    59784, 3430, 0, 65535, 24309, 27460, 0, 65535, 30333, 2095, 18754, 46840,
                    40084, 32802, 0, 47436, 65535, 19538, 65535, 40493, 65535, 33837, 38971, 59526,
                    35006, 39159, 30933, 18130, 51672, 43138, 22577, 0, 0, 16842, 65535, 33464,
                    52615, 65535, 65535, 0, 65535, 0, 49499, 5113, 65535, 65535, 65535, 52203,
                    36916, 65535, 57332, 8913, 22423, 22918, 53822, 65535, 21669, 0, 65535, 18569,
                    0, 42002, 65535, 0, 5758, 0, 0, 24184, 6382, 42197, 24012, 0, 6187, 65535,
                    50639, 0, 0, 11719, 65535, 65535, 54843, 15525, 0, 0, 7092, 65535, 32263,
                    50903, 0, 0, 65071, 0, 65535, 61543, 0, 31894, 42497, 6956, 65535, 0, 25406,
                    65535, 16967, 65535, 26771, 7422, 15869, 45084, 65535, 33241, 33610, 28367,
                    33533, 17399, 0, 41344, 65535, 30814, 15283, 65535, 65535, 0, 65535, 49864, 0,
                    21716, 61025, 65535, 35558, 45043, 65535, 21585, 40787, 0, 9705, 0, 21405,
                    7453, 65535, 61949, 0, 0, 65535, 46065, 26566, 50216, 0, 0, 0, 0, 21594, 16431,
                    0, 64609, 44808, 10835, 41191, 0, 29485, 41860, 5534, 18380, 22740, 65535,
                    38284, 21121, 39715, 35707, 62472, 19896, 57470, 0, 31837, 0, 17827, 43517,
                    13719, 62160, 0, 30199, 28926, 0, 32852, 0, 24026, 40, 65535, 0, 19841, 32774,
                    48107, 6912, 3062, 39465, 12976, 3522, 45197, 2073, 54283, 61462, 57398, 23815,
                    0, 65535, 39100,
                ]))
                .unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 43447,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 254,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_one_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf2662f0b6e96aa420aa3eef028c170264009f6768273afd0646de22f0873d033");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_last_offset_11_wrong_byte_length() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_last_offset_11_wrong_byte_length/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_last_offset_2_wrong_byte_length() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_last_offset_2_wrong_byte_length/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_last_offset_7_wrong_byte_length() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_last_offset_7_wrong_byte_length/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_offset_11_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_offset_11_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_offset_11_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_offset_11_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_offset_2_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_offset_2_minus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_offset_2_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_offset_2_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_offset_2_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_offset_2_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_offset_7_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_offset_7_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_one_offset_7_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_one_offset_7_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
fn test_containers_complex_test_struct_random_0() {
    let value = ComplexTestStruct {
        a: 36613,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            26357, 19789, 53414, 41528, 43058, 36456, 17712, 64993, 14992, 3994, 4491, 37237,
            53370, 56684, 48965, 45101, 683, 38708, 61558, 12121, 58510, 879, 50407, 11930, 32867,
            52560, 10326, 11794, 38432, 37170, 7301, 2227, 4388, 48317, 46754, 41733, 15080, 33578,
            26677, 35638, 9218, 36504, 11368, 51823, 20795, 30745, 10679, 55815, 25564, 29076,
            21398, 58915, 58478, 38856, 63404, 1699, 37627, 60898, 50590, 18255, 41407, 44726,
            28457, 3998, 35025, 2482, 12213, 22094, 13467, 49527, 52350, 18655, 54130, 28648,
            35414, 44409, 63193, 56039, 28235, 4754, 24928, 42877, 63576, 49446, 28624, 1845,
            14005, 59266, 59031, 7912, 54815, 61433, 53381, 25189, 12485, 35484, 25168, 15869,
            47845, 52140, 17390, 6122,
        ]))
        .unwrap(),
        c: 165,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            195, 233, 126, 154, 2, 52, 84, 232, 190, 193, 89, 187, 182, 127, 72, 123, 37, 182, 167,
            220, 226, 98, 253, 142, 172, 255, 98, 239, 154, 9, 41, 99, 73, 38, 16, 15, 196, 44,
            185, 128, 92, 255, 13, 150, 8, 101, 248, 8, 178, 16, 173, 149, 174, 48, 249, 30, 249,
            138, 12, 104, 184, 8, 84, 207, 58, 234, 186, 200, 80, 131, 178, 250, 57, 157, 179, 52,
            243, 138, 57, 157, 255, 162, 122, 184, 87, 200, 26, 229, 32, 65, 32, 168, 2, 29, 180,
            205, 214, 83, 141, 247, 192, 166, 24, 83, 112, 5, 221, 75, 211,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 7651,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                6344, 26342, 31916, 17688, 43997, 48720, 3037, 39218, 43497, 26255, 53081, 22190,
                27775, 19805, 20488, 22640, 52465, 14669, 5816, 51703, 5787, 14708, 1341, 2847,
                48871, 35239, 22603, 19756, 49392, 586, 17909, 10332, 30451, 4159, 25786, 28998,
                24770, 53886, 40002, 63520, 25751, 33941, 32567, 25840, 45470, 41440, 27480, 17075,
                33823, 41889, 10847, 29543, 30452, 21168, 58220, 44464, 57740, 31822, 36787, 28680,
                27627, 45628, 19526, 49567, 6316, 65109, 10689, 8657, 37913, 54280, 9336, 45717,
                45092, 60898, 60114, 52378, 28331, 5245, 56106, 35836, 41491, 41479, 49519, 37463,
                22289, 3929, 23256, 37486, 28217, 16698, 20243, 57951, 28335, 875, 55446, 2643,
                38449, 59262, 45994, 32091, 607, 26607, 3590, 28433, 39546, 9347, 19433, 47539,
                43125, 53689, 17206, 15293, 5375, 49839, 16161, 7855, 13975, 25297, 17365, 4272,
                19002, 998, 62950, 15227, 55713, 232, 29193, 5580, 53324, 13467, 17868, 23757,
                54402, 50739, 49220, 38991, 22846, 36316, 18199, 5136, 10369, 35815, 63713, 4953,
                61164, 57215, 44993, 53991, 5056, 48129, 57167, 24193, 47794, 62491, 53054, 42570,
                12005, 50626, 6096, 24627, 48577, 22983, 3327, 62358, 39266, 63630, 56482, 49251,
                18941, 30107, 43504, 12057, 30426, 21196, 57234, 31207, 33639, 55498, 57220, 4718,
                28222, 12729, 33246, 18268, 31628, 8136, 59222, 62827, 14231, 10196, 48029, 28304,
                64764, 7251, 4362, 45513, 43267, 24465, 37508, 30446, 35645, 62348, 51687, 27898,
                14121, 42211, 51968, 7026, 63484, 3398, 17748, 28064, 12990, 5251, 25683, 34766,
                38339, 54082, 11061, 60695, 36390, 57538, 43060, 22003, 30468, 32978, 52042, 32248,
                43857, 56286, 37186, 11391, 61442, 50874, 27333, 32305, 57222, 3582, 5622, 51717,
                32781, 55911, 54021, 17209, 47318, 46137, 44453, 55563, 12602, 39614, 25817, 60153,
                24499, 8424, 23138, 45603, 56236, 12932, 55051, 40073, 50254, 24266, 58032, 11189,
                47716, 667, 34439, 62701, 43402, 33363, 47316, 49365, 19, 48751, 6308, 42632,
                60566, 59286, 33097, 43957, 46536, 63636, 11200, 55992, 16180, 60914, 17449, 53775,
                45714, 50182, 60378, 6398, 5835, 49615, 59504, 32956, 37367, 57630, 18679, 53715,
                58115, 9575, 49591, 6276, 24431, 11709, 37558, 11479, 43534, 11388, 32866, 63174,
                52726, 31409, 59501, 47148, 42776, 14724, 53809, 36799, 6439, 31809, 11623, 60009,
                12746, 4383, 45501, 17740, 34659, 7578, 26103, 41995, 45243, 42156, 52740, 53495,
                44601, 21426, 55901, 17246, 50350, 42207, 5439, 36915, 62279, 21520, 47417, 54734,
                40557, 48049, 18296, 44531, 62523, 59209, 21620, 27227, 7791, 44991, 50387, 2111,
                30098, 55440, 60983, 11968, 45740, 257, 10872, 4875, 49422, 60332, 13529, 55521,
                37186, 10349, 52077, 4842, 27602, 12618, 9822, 43666, 61567, 41448, 63623, 65193,
                7927, 29535, 57903, 32454, 55634, 1482, 48359, 59195, 47720, 27315, 2879, 42128,
                28952, 57076, 51538, 39177,
            ]))
            .unwrap(),
            c: 230,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 106, b: 18346316386435066714, c: 4114265883 },
            FixedTestStruct { a: 129, b: 12577455140759872076, c: 691153183 },
            FixedTestStruct { a: 87, b: 10247605863889932385, c: 746141135 },
            FixedTestStruct { a: 121, b: 6739481722438214759, c: 2991894903 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 8252,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    15788, 56952, 37934, 38984, 36802, 34742, 2281, 52090, 19648, 60417, 52168,
                    65159, 61095, 33605, 44434, 6581, 7836, 6646, 5580, 49892, 18520, 22425, 49849,
                    32735, 22152, 8889, 35578, 39334, 6219, 37572, 20024, 22917, 21092, 9477,
                    53708, 57477, 49934, 7860, 11471, 55025, 41757, 41073, 50814, 50942, 54252,
                    18286, 14363, 11978, 29221, 24082, 49437, 32600, 33385, 17695, 15031, 21576,
                    59137, 23250, 15688, 31367, 4243, 42429, 19328, 17284, 58615, 42702, 23870,
                    11854, 64878, 11356, 37988, 2591, 46638, 24541, 4033, 35213, 38503, 32089,
                    29923, 37012, 46237, 63174, 13556, 3232, 7187, 51802, 48247, 35820, 47546,
                    43353, 16118, 38089, 10817, 44460, 7086, 13933, 51767, 5601, 55928, 2992,
                    27198, 16034, 20738, 31275, 45104, 47487, 12155, 40104, 5561, 57363, 43367,
                    44332, 16097, 43091, 6557, 39561, 4092, 30682, 23826, 55843, 6830, 22722,
                    61796, 59862, 28346, 12540, 26258, 16294, 57927, 26569, 63660, 41195, 12528,
                    29536, 50178, 60524, 29397, 52805, 22248, 3419, 29163, 10037, 32556, 21191,
                    65104, 7803, 6303, 39587, 13129, 59271, 62512, 50729, 34711, 54464, 13274,
                    26753, 12887, 33008, 52023, 11661, 9284, 50111, 57149, 22283, 57342, 7800,
                    49201, 44244, 52924, 63069, 9887, 11305, 49614, 12668, 20020, 11862, 31384,
                    3539, 7098, 22200, 41998, 53628, 48683, 57483, 11866, 16510, 54111, 49467,
                    3117, 24351, 6083, 11217, 25901, 11353, 65132, 26069, 52335, 62307, 52509,
                    12873, 47528, 37697, 44613, 61532, 31336, 7676, 59645, 19126, 11960, 43383,
                    24606, 6580, 44614, 54402, 25886, 20962, 20238, 30674, 30967, 36140, 59447,
                    9868, 34699, 8193, 51300, 50141, 53695, 18504, 12358, 23250, 63617, 63594,
                ]))
                .unwrap(),
                c: 254,
            },
            VarTestStruct {
                a: 61809,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    35740, 33338, 22738, 24896, 56971, 42585, 21483, 6579, 51970, 63753, 62371,
                    13862, 58540, 24510, 54252, 8242, 55665, 8797, 22599, 54702, 19607, 42132,
                    47489, 36541, 47296, 26702, 65351, 24527, 60381, 37462, 36967, 27240, 56631,
                    42259, 25519, 12947, 38412, 53128, 32993, 29007, 49088, 29931, 10609, 35776,
                    7733, 35367, 14387, 13292, 21598, 11259, 50428, 17019, 11422, 61325, 49625,
                    44310, 15593, 56864, 10542, 17506, 17192, 65077, 59486, 48871, 55087, 14500,
                    64742, 52613, 2986, 61274, 22112, 20798, 55523, 60741, 9105, 31564, 29900,
                    8899, 35937, 19466, 6670, 6778, 13494, 19269, 12477, 3030, 32555, 32725, 59494,
                    61738, 50578, 10219, 3919, 13219, 57140, 61944, 14909, 11361, 35352, 5140,
                    26487, 12294, 11884, 27456, 59440, 47195, 33877, 345, 21714, 646, 24043, 20477,
                    63398, 9008, 15884, 35052, 64056, 43510, 10471, 20303, 49799, 7925, 31746,
                    19813, 25352, 30876, 59454, 55707, 19999, 35961, 56698, 16471, 6932, 30473,
                    37095, 2303, 58953, 38878, 48133, 9380, 18724, 8596, 12726, 19334, 48797,
                    62757, 7919, 2547, 55845, 17243, 44255, 24640, 278, 48133, 53104, 5792, 55373,
                    22699, 2548, 54527, 5060, 3772, 21344, 58596, 58783, 38674, 60793, 44329,
                    50167, 24704, 29689, 33718, 31284, 27794, 46948, 22914, 13959, 10251, 55803,
                    40465, 1221, 11600, 257, 25234, 42518, 13452, 34702, 39225, 22461, 14234, 7612,
                    31998, 34469, 32277, 43117, 35835, 61639, 54858, 19046, 62576, 34304, 45654,
                    51156, 22614, 14893, 28138, 11014, 53056, 8493, 17407, 29313, 58992, 45690, 97,
                    38894, 31996, 31979, 54157, 47618, 9480, 13329, 20305, 37175, 61724, 30130,
                    46832, 1530, 30625, 50791, 13715, 46714, 7372, 19555, 65195, 11858, 59412,
                    61080, 35905, 54278, 33339, 38180, 21788, 56670, 51606, 13, 34832, 55666, 5811,
                    10703, 53202, 33696, 61180, 22328, 59128, 43546, 12992, 55445, 53805, 15443,
                    7592, 39020, 16156, 11291, 49096, 63921, 62689, 55989, 15881, 7599, 46434,
                    51892, 46209, 22281, 44145, 62576, 45013, 18069, 21280, 24712, 37909, 7449,
                    21245, 49958, 21585, 25656, 31760, 35623, 2383, 6796, 15782, 46243, 21854,
                    57960, 2209, 33550, 195, 1820, 18920, 8218, 8055, 9407, 48793, 51997, 30590,
                    3625, 32192, 55151, 64666, 3839, 50456, 3784, 53120, 30913, 52436, 36340,
                    44494, 8432, 60049, 65044, 62465, 20227, 52551, 56393, 27846, 25131, 32122,
                    20617, 55262, 11715, 64463, 53507, 19302, 52169, 54714, 11396, 56524, 48912,
                    15975, 29481, 45524, 22431, 21438, 14818, 14222, 55471, 39095, 10436, 64195,
                    54466, 8925, 6426, 47416, 45993, 42502, 12976, 41883, 65254, 39210, 32014,
                    12940, 4550, 39225, 15635, 4657, 43407, 6279, 12819, 36497, 8005, 46083, 55804,
                    3566, 35327, 35855, 10258, 55879, 9189, 19983, 968, 16031, 882, 33582, 30445,
                    36383, 28902, 28542, 45504, 17107, 7356, 22548, 29683, 8431, 46831, 15875,
                    20145, 44720, 18885, 3882, 36043, 58131, 12611, 38802, 12428, 23246, 7374,
                    15788, 39984, 59179, 29408, 44635, 61559, 10744, 25648, 9773, 63264, 35006,
                    15686, 54542, 12176, 42972, 17739, 24509, 22153, 62788, 33379, 32712, 55762,
                    21, 54150, 37467, 25930, 9221, 12665, 55990, 23462, 23943, 60197, 22000, 48660,
                    13163, 15767, 26723, 40625, 47594, 40958, 2062, 2556, 2804, 37669, 42650,
                    39502, 46553, 22884, 49423, 34102, 38109, 20783, 58127, 26952, 24243, 62339,
                    18478, 19535, 63182, 144, 17264, 17444, 12103, 16573, 10356, 37576, 63409,
                    20559, 23686, 42815, 12377, 27356, 3925, 15005, 33667, 64937, 33053, 60026,
                    40621, 29385, 23303, 55956, 34507, 26714, 43633, 34838, 54226, 22456, 6797,
                    47440, 59306, 38966, 42622, 58478, 64991, 58152, 29054, 14023, 19295, 55095,
                    58410, 21340, 24962, 18462, 23486, 25544, 48726, 43659, 28412, 60520, 2461,
                    10813, 8503, 24026, 62973, 62160, 48162, 48854, 16944, 3782, 26629, 24910,
                    45984, 42178, 51027, 21823, 13918, 53539, 35704, 26334, 25167, 25516, 51002,
                    21974, 54329, 4617, 18906, 53484, 50900, 20795, 28645, 28958, 23968, 33234,
                    14593, 6589, 11058, 19323, 36480, 43016, 9872, 13215, 1360, 40473, 36804,
                    46063, 12471, 44827, 51759, 29212, 26590, 26273, 29033, 40688, 58134, 61705,
                    35972, 29224, 4668, 15791, 14140, 47040, 47906, 36793, 34882, 53901, 29262,
                    7480, 7845, 40130, 52743, 22751, 1754, 34468, 13887, 6318, 38895, 13219, 53407,
                    57006, 14098, 44616, 55059, 29033, 4027, 19566, 40492, 19418, 31887, 20134,
                    63760, 49325, 44963, 63366, 45401, 59000, 11585, 63738, 27273, 62287, 8807,
                    61832, 65447, 40359, 40435, 44455, 259, 25455, 50236, 47955, 19746, 31740,
                    61215, 35090, 2824, 36157, 18078, 19887, 60979, 65366, 40389, 19469, 8949,
                    57450, 17000, 22661, 33653, 64317, 27181, 11772, 28839, 26920, 12973, 36465,
                    54185, 14147, 18999, 32165, 2930, 7374, 17055, 62553, 65086, 6320, 44467,
                    20066, 21018, 46746, 65280, 30358, 33087, 53979, 31524, 62080, 24710, 39184,
                    59428, 4696, 65450, 13150, 6095, 62651, 14575, 47502, 23666, 39136, 11068,
                    26424, 61299, 61232, 57870, 7945, 48238, 37590, 48621, 61357,
                ]))
                .unwrap(),
                c: 184,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x1677290a19a687395e9912e9b41e5e3b4ea7e0db5daf8417ae531552e3f6395d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_1() {
    let value = ComplexTestStruct {
        a: 5814,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            13962, 12707, 37305, 29690, 1586, 45727, 61950, 20772, 19719, 25719, 17231, 18362,
            15853, 20434, 38643, 21832, 48266, 28050, 16461, 35483, 21070, 36426, 26843, 37063,
            29599, 43941, 32787, 12601, 3191, 22285, 16176, 2828, 22460, 12607, 63486, 46498,
            17365, 45108, 49196, 18556, 51020, 56080, 57156, 9575, 55047, 56617, 28081, 21914,
            57894, 40854, 34499, 2019, 6441, 5368,
        ]))
        .unwrap(),
        c: 119,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            102, 77, 222, 177, 5, 102, 36, 19, 54, 233, 99, 152, 177, 149, 249, 244, 12, 228, 46,
            133, 43, 161, 182, 8, 246, 63, 111, 96, 154, 243, 192, 201, 17, 217, 100, 241, 9, 85,
            77, 208, 62, 116, 104, 102, 176, 92, 191, 163, 217, 64, 188, 92, 62, 131, 239, 209,
            112, 201, 86, 238, 117, 7, 201, 224, 64, 132, 204, 100, 202, 132, 197, 135, 149, 209,
            63, 65, 184, 87, 187, 200, 127, 3, 181, 236, 230, 112, 222, 82, 16, 249, 136, 10, 178,
            98, 165, 93, 15, 90, 2, 156, 82, 116, 64, 141, 108, 175, 191, 115, 228, 31, 101, 113,
            116, 94, 119,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 20643,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                24432, 31000, 26551, 48958, 59465, 37221, 49385, 5297, 60151, 29078, 29381, 1492,
                43875, 45563, 42973, 52511, 58881, 52069, 39428, 60584, 10733, 3308, 2386, 64826,
                39065, 15484, 46142, 65500, 10836, 54553, 21066, 40395, 31722, 7161, 48257, 17154,
                31608, 281, 25940, 4970, 40714, 61842, 13324, 1670, 57026, 56879, 52250, 57375,
                58385, 14140, 31835, 59768, 25446, 40305, 12974, 26066, 48759, 54405, 14534, 34481,
                3101, 42322, 9332, 59487, 50121, 12682, 9469, 34002, 50966, 54082, 58409, 3786,
                9811, 21795, 54030, 40444, 18775, 34095, 57916, 11707, 14791, 26655, 14450, 51996,
                1777, 3224, 10094, 2629, 55221, 48140, 42224, 11432, 19361, 3321, 35053, 8401,
                2273, 39161, 26148, 31977, 31079, 26256, 41659, 59961, 28652, 34647, 26847, 18647,
                61024, 2268, 19711, 54337, 11766, 49521, 53736, 17218, 29199, 32355, 3279, 56966,
                48775, 45055, 28935, 41071, 24515, 9667, 27983, 48108, 47926, 64199, 27161, 27624,
                59075, 40208, 17835, 37120, 12903, 30200, 62955, 39882, 12060, 17752, 60770, 58730,
                51247, 64644, 36138, 38923, 5862, 5634, 5868, 46352, 43758, 2831, 56020, 3200,
                28803, 59381, 41185, 52261, 20856, 28228, 63365, 37438, 52823, 22385, 10264, 2861,
                45413, 43742, 52707, 2717, 26894, 10860, 49033, 64693, 1353, 47080, 36289, 9919,
                51143, 35733, 3378, 15802, 10978, 10639, 64393, 6938, 64653, 19201, 33104, 42728,
                40380, 45389, 29930, 53503, 7625, 65517, 2573, 32299, 44444, 39605, 27009, 31360,
                46941, 19910, 51663, 5980, 51219, 22987, 10550, 56290, 21636, 32666, 3940, 924,
                29928, 17145, 15264, 60642, 55460, 21013, 41733, 53443, 49732, 50946, 57058, 11348,
                64270, 26311, 46741, 20753, 57942, 46005, 57665, 20256, 3381, 43770, 6328, 6209,
                49020, 22578, 61069, 40660, 30888, 41083, 42403, 53815, 22703, 57138, 14131, 520,
                49899, 46139, 20052, 13215, 57675, 7353, 64530, 59611, 33996, 33742, 10764, 17928,
                16719, 25673, 15256, 6295, 18624, 49527, 20991, 49660, 51915, 49903, 57760, 38509,
                6904, 62126, 31505, 39387, 53013, 36553, 9954, 16030, 43080, 18505, 10842, 13414,
                40145, 6663, 60001, 26472, 45814, 50483, 5388, 53711, 40632, 58130, 14338, 45097,
                48096, 54630, 31410, 25007, 11888, 25047, 48599, 10417, 19112, 39310, 19828, 15298,
                41481, 61780, 1630, 21556, 12136, 62986, 24007, 42824, 45132, 11577, 51070, 53779,
                54469, 7919, 21349, 24081, 59211, 11588, 37427, 520, 37688, 15004, 31504, 41854,
                50785, 30026, 55964, 44296, 62307, 20467, 40657, 1182, 57988, 25388, 62804, 10337,
                57342, 38585, 28476, 48958, 47086, 26968, 19357, 54804, 44902, 9614, 51848, 54909,
                32835, 3825, 4655, 22391, 4267, 18033, 55228, 9788, 31219, 32601, 21059, 38955,
                63575, 63170, 29648, 31082, 55231, 6980, 56474, 60451, 16911, 18680, 40690, 30908,
                53134, 4489, 40021, 5444, 9962, 26556, 10311, 57673, 64726, 63722, 40638, 45932,
                35466, 48991, 14996, 36602, 24497, 15223, 49668, 2722, 23135, 40059, 13593, 40135,
                58804, 8281, 50056, 43734, 50092, 21072, 16673, 18863, 36749, 30483, 25693, 27198,
                11305, 58012, 13987, 34306, 55569, 18543, 52548, 20153, 17981, 49914, 61645, 43968,
                43722, 15335, 47324, 22424, 31269, 49779, 40004, 36308, 48244, 35335, 31116, 21746,
                34543, 39256, 40034, 44633, 34256, 49543, 2797, 5764, 49437, 9165, 15464, 3264,
                54751, 9861, 38827, 24811, 30707, 38906, 33948, 47310, 11395, 49920, 24827, 34594,
                1104, 39842, 31470, 8597, 7007, 14033, 25652, 760, 31964, 36751, 36870, 53715,
                21393, 22319, 59379, 41011, 18884, 61208, 20127, 64216, 13540, 16557, 28546, 44967,
                19112, 23500, 58070, 3103, 42839, 49593, 7283, 40615, 20105, 43813, 49155, 8442,
                5211, 7136, 59898, 23777, 19813, 4696, 18221, 18426, 52073, 14353, 26250, 43429,
                9223, 42994, 7143, 39547, 58525, 40331, 38803, 64156, 10885, 34626, 15605, 7415,
                49347, 40067, 24755, 44699, 25099, 19991, 39869, 8610, 44980, 32128, 34888, 31602,
                19785, 48516, 49778, 58042, 39777, 6429, 43793, 43071, 40097, 18219, 51431, 34290,
                22732, 44420, 29413, 5242, 63909, 24793, 8757, 50828, 63873, 12622, 32189, 51369,
                1981, 26269, 20001, 33613, 44387, 14805, 6683, 48211, 60443, 5193, 63745, 54620,
                54045, 21226, 12464, 27518, 26723, 19754, 62507, 51331, 38504, 31799, 15415, 55876,
                58630, 58797, 51550, 27594, 33391, 18290, 15074, 6978, 11804, 17318, 27594, 20432,
                31162, 53549, 51256, 28376, 21009, 6272, 4200, 43456, 15801, 64639, 63846, 59955,
                54036, 61995, 16424, 30499, 9057, 44349, 51922, 12362, 19137, 60663, 5055, 58249,
                43236, 40986, 7000, 27303, 42519, 40092, 43296, 2491, 34864, 36350, 14881, 11285,
                35881, 28205, 55859, 7054, 58109, 62425, 5021, 55059, 19112, 34836, 2775, 10318,
                64356, 42242, 62839, 53679, 61972, 2770, 46411, 23522, 63463, 59257, 39323, 24598,
                32390, 30290, 58001, 11844, 55921, 31958, 30949, 65113, 57256, 2694, 42579, 26079,
                31747, 26631, 4465, 50039, 6654, 14277, 56320, 9195, 64218, 46937, 58756, 29241,
                51581, 38680, 11557, 23516, 37954, 11326, 61525, 38210, 44523, 19785, 22838, 6127,
                31738, 33108, 63143, 10715, 7682,
            ]))
            .unwrap(),
            c: 100,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 205, b: 15576472011631444407, c: 451762384 },
            FixedTestStruct { a: 221, b: 7862905645334182024, c: 2134160115 },
            FixedTestStruct { a: 251, b: 105407048243073939, c: 4086775175 },
            FixedTestStruct { a: 51, b: 842555730410590159, c: 2534804099 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 10298,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    6987, 49582, 47687, 62142, 37195, 62731, 31735, 9827, 34916, 51352, 43611,
                    6164, 46044, 7612, 49989, 57300, 52986, 63206, 65425, 16884, 34083, 8430,
                    11452, 15034, 39033, 4436, 42271, 7402, 25152, 33038, 50771, 45409, 44303,
                    60404, 45417, 27781, 46630, 14994, 63902, 8388, 19609, 41230, 15432, 2395,
                    32745, 51857, 42262, 49462, 37073, 7550, 42554, 42141, 28991, 16876, 59786,
                    53726, 61574, 37970, 39251, 3129, 38477, 48215, 29612, 51906, 13237, 47443,
                    12538, 56389, 46101, 31949, 13627, 1682, 10308, 40009, 42032, 51869, 18173,
                    35513, 53224, 44511, 25150, 53404, 2122, 39998, 30304, 13182, 39770, 34305,
                    19528, 7772, 57337, 23440, 19993, 40587, 37556, 40991, 37167, 15172, 35145,
                    63717, 14234, 33152, 50015, 43748, 61170, 65378, 58462, 1077, 28332, 33634,
                    35849, 12743, 40613, 26921, 8577, 5136, 13847, 50324, 22796, 43957, 64843,
                    10431, 62460, 30856, 44590, 18822, 16489, 49557, 56682, 22599, 52931, 31452,
                    63160, 35789, 22893, 2179, 29415, 50457, 45765, 8422, 31047, 19837, 61946,
                    23437, 7875, 146, 4919, 48716, 6078, 56820, 3648, 34783, 24019, 15748, 23568,
                    17375, 18503, 53719, 57950, 28408, 27555, 30629, 53168, 10299, 33082, 64384,
                    11221, 64336, 44047, 53601, 58858, 63697, 53002, 6865, 20865, 6040, 62299,
                    50519, 29193, 7234, 32221, 6305, 39142, 39908, 6734, 45536, 34253, 32815,
                    33790, 36194, 34448, 56613, 55223, 64560, 55036, 58884, 51106, 36166, 23208,
                    47895, 14149, 10513, 21981, 25451, 53380, 30989, 14352, 38878, 64422, 32676,
                    39197, 8197, 23979, 59619, 9684, 25177, 60083, 43122, 8272, 40303, 29096,
                    15431, 44205, 58335, 10643, 2566, 58390, 51890, 55617, 14669, 41007, 4424,
                    13673, 57110, 57254, 3566, 16639, 51292, 53480, 50513, 14297, 32524, 47803,
                    15010, 38820, 46446, 64792, 14778, 39634, 23833, 8764, 31090, 29333, 6226,
                    62616, 49811, 16284, 24964, 65066, 57023, 23496, 65383, 15997, 7830, 55508,
                    59026, 38135, 28, 6207, 48963, 19773, 35509, 31820, 52720, 46826, 62562, 31729,
                    24554, 2904, 53630, 49288, 32552, 37497, 64788, 1808, 49770, 54076, 24253,
                    15974, 25448, 8359, 46872, 4151, 55822, 3487, 39415, 7090, 55166, 45061, 14507,
                    13210, 53149, 30058, 58909, 5334, 39638, 26640, 38014, 25015, 23818, 8313,
                    15266, 51063, 30024, 33582, 1022, 58617, 5717, 3131, 39875, 14124, 37384,
                    28711, 18219, 18157, 29646, 63212, 8283, 46996, 24680, 31833, 22627, 61467,
                    64452, 34957, 11755, 33716, 9670, 15125, 19169, 44009, 36711, 49680, 5412,
                    21638, 54693, 25765, 24450, 7734, 1818, 56397, 32410, 19, 43568, 64085, 64705,
                    60187, 17696, 60982, 57509, 25192, 2853, 6612, 26487, 33221, 21953, 50142,
                    3888, 52297, 4226, 54181, 54450, 65323, 49901, 31733, 63355, 59736, 2805,
                    30831, 5017, 54353, 3206, 39974, 51740, 35282, 7019, 17545, 36025, 42284,
                    41223, 31967, 35259, 23150, 27976, 56454, 34611, 19747, 37368, 433, 32388,
                    50505, 61526, 24312, 9660, 32251, 18391, 1401, 37250, 32168, 57069, 45014,
                    2002, 49596, 57170, 33720, 26172, 36789, 10427, 49974, 52538, 29780, 18439,
                    34416, 17237, 7497, 50074, 15465, 35359, 54392, 19983, 20111, 22858, 5051,
                    6545, 57437, 50969, 8528, 24262, 59312, 24515, 36718, 47197, 58962, 31790,
                    42665, 16445, 59603, 48505, 32555, 6951, 50572, 22224, 8940, 23887, 8110,
                    19497, 40585, 19188, 9199, 28058, 65172, 57001, 57948, 52533, 38482, 17902,
                    56435, 57614, 65235, 33314, 43045, 38631, 2514, 20459, 43865, 34604, 35112,
                    7858, 16123, 25205, 57679, 4584, 16379, 32166, 40434, 9628, 7050, 56118, 14150,
                    50349, 5899, 5721, 34903, 32441, 38963, 31056, 50352, 60559, 44517, 43804,
                    40428, 423, 20746, 27298, 62335, 42130, 34536, 37995, 10595, 57961, 15025,
                    53031, 39107, 4099, 23979, 10236, 61260, 53243, 1255, 27135, 26691, 7103,
                    41772, 24018, 19562, 15179, 3812, 33826, 53711, 54390, 54615, 45445, 58186,
                    1565, 37660, 60679, 6029, 14790, 4061, 38297, 63426, 7267, 51201, 26508, 63662,
                    39794, 14796, 51008, 60872, 10539, 16107, 61544, 14484, 43177, 9993, 50490, 56,
                    21463, 34077, 64095, 52160, 31645, 38462, 53550, 50495, 33083, 34812, 24862,
                    30438, 64424, 1797, 43080, 35597, 8346, 55352, 49059, 16591, 22075, 65320,
                    29314, 8808, 57206, 42609, 29876, 16656, 19969, 25616, 33972, 32121, 25619,
                    24502, 31507, 43034, 19442, 1148, 51048, 34445, 52750, 18118, 29129, 2471,
                    23860, 24712, 13906, 15225, 21996, 8751, 26673, 53714, 98, 50022, 59277, 23850,
                    61933, 57970, 63323, 40246, 8178, 8698, 52332, 48459, 52137, 19278, 3691,
                    10697, 38145, 2432, 5753, 45498, 17970, 35019, 52471, 39660, 7042, 25418,
                    32424, 29996, 55275, 26112, 13750, 4991, 25536, 31569, 176, 24423, 14000, 4374,
                    15940, 4543, 58677, 38192, 10291, 27013, 25245, 45960, 31662, 60867, 27754,
                    35166, 26955, 23168, 42154, 48111, 51062, 28215, 63411, 10599, 48798, 9981,
                    44981, 35445, 57532, 62414, 32331, 59055, 29925, 13505, 45525, 20918, 6693,
                    21915, 43765, 40092, 47072, 10373, 23564, 48277, 63791, 48451, 5148, 26064,
                    2325, 54198, 42144, 22055, 31395, 48771, 602, 60464, 65410, 54684, 10686,
                    45301, 8559, 60409, 36792, 3709, 5956, 7275, 61093, 49095, 61150, 23305, 16769,
                    46875, 38064, 37379, 36127, 47063, 12256, 59735, 32214, 54248, 7673, 37830,
                    20555, 60339, 28790, 40153, 64469, 35805, 38537, 27878, 35313, 63873, 25595,
                    14281, 6740, 60573, 40833, 18686, 50480, 33269, 58, 34612, 62347, 46093, 51400,
                    17526, 35823, 3326, 47088, 5613, 8689, 61300, 44550, 8830, 19441, 56156, 46454,
                    4049, 25493, 37046, 62058, 58793, 29674, 46739, 26886, 49496, 59863, 466,
                    21910, 18578, 52274, 47521, 19608, 32199, 19028, 59475, 32305, 51186, 42069,
                    54069, 35050, 28362, 54363, 16242, 62948, 35800, 3226, 11169, 26504, 11985,
                    19642, 5561, 2337, 43575, 64748, 45468, 33308, 52900, 1532, 22270, 1872, 28702,
                    48401, 47184, 15614, 10122, 54822, 2406, 47694, 44148, 45951, 26058, 49340,
                    19038, 50420, 52595, 28442, 21245, 55588, 43897, 61593, 51522, 56492, 27412,
                    34380, 62678, 59983, 47641, 65264, 1257, 41159, 16323, 36624, 47825, 48354,
                    19801, 56083, 53431, 47516, 17203, 28556, 64606, 1512, 19599, 53595, 40077,
                    6598, 46178, 8422, 57980, 56749, 28200, 55162, 40004, 16246, 50986, 10648,
                    30123, 17775, 53060, 40405, 45474, 50210, 27918, 13003, 43357, 43252, 7911,
                    16395, 31654, 20035, 12020, 5361, 12695, 61963, 64635, 38962, 54744,
                ]))
                .unwrap(),
                c: 179,
            },
            VarTestStruct {
                a: 29535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    34920, 29044, 2282, 5403, 19590, 47622, 32622, 13506, 28025, 17538, 31096,
                    58832, 33990, 54334, 33274, 6197, 40211, 29261, 16189, 27645, 41335, 27622,
                    53756, 57238, 16726, 46796, 18955, 17191, 43581, 50396, 33605, 4162, 28381,
                    5738, 62584, 34939, 43171, 10321, 14738, 60163, 4264, 64826, 17311, 32040,
                    40893, 4978, 45598, 26120, 14936, 43159, 42969, 6577, 61407, 12, 24231, 5284,
                    11584, 36634, 46751, 47742, 18894, 29608, 45459, 15448, 4371, 23609, 51974,
                    65036, 8730, 46289, 23470, 35081, 17172, 55918, 12356, 36378, 22974, 6110,
                    60290, 46523, 56952, 38325, 35933, 397, 44374, 17823, 60707, 49223, 16277,
                    23413, 50300, 65298, 25917, 13005, 33025, 43111, 63748, 33860, 11642, 63902,
                    5394, 1520, 43878, 65441, 6202, 26809, 45849, 37639, 46081, 38782, 48567, 6142,
                    16020, 38015, 36381, 56371, 9490, 62238, 37361, 53992, 1390, 11540, 7024,
                    27149, 34292, 48200, 42812, 55348, 56125, 6192, 26578, 9888, 23406, 25770,
                    14393, 38712, 8597, 9063, 14813, 22904, 28645, 59603, 30594, 61255, 60019,
                    43830, 56909, 7118, 1212, 32458, 42248, 7391, 46466, 2889, 41957, 15093, 37069,
                    14909, 7474, 63662, 16556, 10616, 8949, 40365, 13314, 55335, 50363, 8240,
                    62359, 39688, 34262, 47477, 47984, 61616, 44848, 12957, 60327, 18, 38326, 2745,
                    12850, 33913, 56843, 7479, 50339, 23174, 21308, 48737, 2566, 54712, 62702,
                    59327, 290, 31918, 21623, 28863, 61358, 11495, 45363, 18259, 41186, 54515,
                    11018, 31503, 40982, 8163, 15062, 36178, 50843, 46175, 43219, 6078, 28819,
                    9100, 59162, 46627, 38023, 1471, 65237, 23564, 7536, 10985, 9745, 57889, 39903,
                    51477, 17224,
                ]))
                .unwrap(),
                c: 7,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe32e03a987cb2baeadbc01e090ddf3d00edcffd93f93812fb192524585345e06");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_2() {
    let value = ComplexTestStruct {
        a: 30472,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            49312, 29633, 44804, 1208, 59965, 7626, 18533, 16651, 61231, 26530, 6559, 46253, 3629,
            53646, 21616, 60110, 12423, 44598, 61403, 20772, 16282, 40453, 55534, 12239, 18017,
            31444, 51462, 744, 23677, 44739, 54585, 48998, 16591, 15585, 55108, 29194, 769, 44523,
            25073, 39706, 29066, 24488, 17966, 23633, 34955, 62101, 51857, 61407, 34230, 19611,
            26816, 54204, 18661, 56852, 30591, 6214, 61434, 62058, 51051, 39819, 36900, 38931,
            56262, 3074, 55153, 55498, 8516,
        ]))
        .unwrap(),
        c: 84,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            19, 47, 126, 157, 223, 62, 177, 253, 11, 153, 220, 120, 95, 67, 137, 130, 1, 55, 92,
            68, 90, 98, 246, 22, 188, 72, 230, 36, 178, 26, 9, 214, 171, 191,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 35377,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                27302, 36840, 20173, 40214, 52795, 21658, 55606, 51358, 32699, 53616, 39807, 25590,
                623, 9440, 6050, 58378, 5000, 35871, 5214, 20704, 61592, 57382, 17168, 21764,
                43290, 6057, 42156, 44750, 23605, 36665, 27025, 15394, 43981, 2911, 7879, 1445,
                25235, 5647, 36923, 44412, 63652, 934, 8045, 41757, 29761, 63744, 23077, 60112,
                44499, 54419, 31602, 35909, 40106, 46986, 20871, 42020, 55308, 29708, 26132, 35777,
                63306, 29416, 3186, 40034, 50396, 59203, 49355, 64890, 51563, 49885, 12580, 45342,
                45157, 55212, 5027, 64849, 61394, 64895, 48287, 34615, 9372, 39697, 44671, 19061,
                51205, 46592, 14707, 64694, 63979, 36520, 20676, 31552, 17586, 60269, 61560, 60432,
                25505, 50105, 6625, 32858, 64649, 39464, 28539, 36736, 17429, 18505, 47968, 8997,
                5367, 11278, 15762, 49201, 27725, 40872, 6749, 20917, 65363, 52373, 55711, 26513,
                24831, 47680, 20765, 6527, 46435, 25733, 24390, 60748, 5459, 24758, 16969, 36561,
                2829, 43569, 19169, 42499, 18077, 9828, 37828, 55781, 33540, 31670, 25721, 64314,
                47955, 36728, 29279, 44298, 49585, 32103, 33404, 38633, 28831, 1002, 55548, 4295,
                21202, 51081, 60470, 47398, 34644, 41037, 19359, 42690, 61865, 38745, 8373, 12662,
                63677, 44747, 20729, 38916, 4625, 30786, 9785, 55645, 3578, 31271, 51958, 42699,
                40560, 38272, 11746, 31227, 52597, 1107, 49585, 6466, 24405, 11112, 22526, 52384,
                10598, 63891, 28437, 61450, 49464, 14070, 8558, 29331, 31241, 28094, 29861, 51526,
                42197, 38738, 48432, 32715, 19778, 51040, 23971, 30532, 10477, 23001, 33618, 38556,
                368, 45725, 48444, 33735, 260, 28487, 21771, 17373, 26994, 18729, 16045, 19632,
                2879, 3659, 4333, 4691, 60823, 64568, 36164, 36938, 41995, 738, 44671, 36895,
                48146, 25920, 43925, 11155, 26582, 58657, 35210, 22280, 4692, 30636, 58529, 40583,
                46503, 32367, 31444, 35553, 32327, 57254, 39017, 65293, 25680, 26718, 28711, 45709,
                36275, 4101, 20048, 46338, 4106, 5786, 10566, 58401, 46485, 1237, 17074, 22530,
                22611, 52257, 13923, 55377, 33883, 6392, 10995, 64467, 28395, 59341, 42377, 47079,
                50632, 56161, 38321, 13454, 737, 18405, 25244, 6408, 50506, 46780, 45005, 60788,
                11519, 59926, 37052, 17052, 50107, 2696, 20579, 34739, 27507, 42827, 54510, 16336,
                27825, 44546, 52107, 31783, 3170, 40647, 44638, 62135, 2238, 34650, 35468, 64379,
                26663, 47443, 40926, 54118, 4767, 63106, 58786, 53068, 2680, 62513, 23403, 6838,
                63133, 35601, 23714, 24163, 12017, 3115, 37840, 27516, 21100, 51461, 20195, 4079,
                43847, 58071, 20340, 29931, 34663, 27531, 47937, 49931, 53811, 3156, 16832, 5192,
                1208, 15984, 38414, 26709, 38697, 37723, 43504, 63825, 37628, 27949, 28649, 30779,
                26741, 7999, 47204, 23496, 46556, 11988, 37012, 44527, 41037, 2995, 25969, 13513,
                32940, 15656, 7241, 10182, 35917, 62152, 2350, 5252, 1376, 33410, 32216, 55911,
                41632, 48038, 43026, 17463, 25043, 25691, 54863, 4124, 9207, 23127, 1496, 24270,
                39146, 17457, 33010, 35796, 16125, 14818, 31247, 9582, 37167, 60345, 27423, 31850,
                24419, 134, 30137, 42526, 5533, 61911, 43742, 3151, 3568, 59927, 54767, 682, 14363,
                13064, 10753, 23819, 24559, 10599, 50147, 22424,
            ]))
            .unwrap(),
            c: 106,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 138, b: 9886663527817656713, c: 4021412526 },
            FixedTestStruct { a: 201, b: 16608817535862089726, c: 3940057156 },
            FixedTestStruct { a: 83, b: 8236622546912708855, c: 206191718 },
            FixedTestStruct { a: 44, b: 144792634101034853, c: 1103810226 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 22162,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    29338, 5324, 19239, 28996, 27978, 11495, 37322, 61214, 60518, 53692, 16162,
                    12007, 65394, 51581, 25195, 64768, 38120, 53233, 11522, 3270, 50521, 58336,
                    41072, 3369, 8807, 41699, 61695, 14649, 35360, 32608, 27106, 54000, 42333,
                    29146, 42069, 26012, 45646, 7677, 7521, 4859, 7316, 40522, 28403, 5648, 23517,
                    49669, 56245, 60873, 62433, 24602, 41910, 16340, 13351, 56608, 42398, 34357,
                    25422, 52636, 25170, 417, 7256, 33991, 18427, 43635, 3645, 4757, 36971, 48577,
                    19203, 30254, 57154, 13776, 15859, 24590, 25663, 16398, 10713, 23710, 64463,
                    823, 60595, 52016, 6003, 1742, 44991, 13081, 9523, 29960, 8780, 56274, 18449,
                    22438, 18441, 28444, 17105, 48310, 16396, 64228, 7447, 10484, 29183, 13342,
                    11614, 60915, 17828, 64706, 48130, 16611, 19641, 51069, 26638, 53977, 62047,
                    39282, 18482, 28789, 27542, 23231, 32929, 53047, 3158, 11554, 5914, 4712, 6191,
                    56695, 64901, 31029, 61644, 35931, 35065, 15166, 33621, 55023, 29535, 58116,
                    59766, 59912, 7073, 1628, 3989, 3011, 52377, 39337, 23248, 56146, 42298, 8311,
                    48064, 39448, 33221, 56886, 37886, 23117, 41820, 18514, 43084, 57571, 42801,
                    64705, 23064, 38965, 52318, 15321, 32045, 18007, 43595, 33995, 18948, 16935,
                    28610, 811, 38382, 40453, 51553, 14549, 6674, 7525, 48768, 20325, 22874, 49898,
                    50363, 458, 50296, 50416, 53963, 42730, 55707, 8585, 38755, 44274, 25992,
                    45332, 32627, 27195, 52705, 43169, 62862, 2972, 1050, 40036, 31973, 9792,
                    31252, 54336, 7102, 23920, 7027, 52957, 63020, 39772, 50605, 33707, 5270,
                    23862, 5273, 51305, 20562, 57447, 58369, 402, 52219, 23276, 13863, 55540,
                    57393, 41053, 37607, 19528, 24279, 61043, 60296, 54127, 22746, 1713, 35477,
                    20111, 41429, 43200, 10211, 29437, 25420, 48882, 28090, 47058, 41612, 46742,
                    60292, 51491, 18475, 12454, 41278, 34394, 35323, 7648, 45614, 52661, 58889,
                    12312, 52815, 34354, 31618, 41895, 52112, 11397, 22636, 33519, 8166, 26272,
                    27852, 7876, 15946, 24185, 16149, 14805, 10308, 53518, 43399, 55444, 27086,
                    61285, 3111, 41737, 59330, 22950, 23836, 31082, 17731, 55202, 16137, 9192,
                    23698, 27560, 21070, 52076, 40505, 2615, 20270, 58800, 38554, 44240, 20352,
                    40128, 36570, 36835, 39643, 39620, 39216, 25109, 14784, 41444, 21193, 2972,
                    40059, 37257, 34406, 21516, 62734, 62599, 28427, 11962, 6871, 54057, 16425,
                    58340, 19192, 49631, 60946, 40881, 10275, 57394, 55867, 48517, 3039, 13460,
                    13023, 31371, 14375, 25356, 17889, 45250, 30112, 62648, 50622, 35391, 32286,
                    47361, 48922, 55549, 28726, 3354, 3938, 19604, 61518, 34189, 60661, 29150,
                    58155, 21608, 43699, 19276, 42091, 1189, 14131, 51064, 26034, 60731, 15708,
                    58057, 46961, 15862, 45035, 29246, 32967, 23824, 42076, 10941, 55553, 24091,
                    34266, 27166, 9670, 28724, 2123, 45544, 4942, 48500, 62629, 34812, 54384,
                    11617, 11998, 60805, 13302, 12031, 12370, 35054, 6548, 49073, 37233, 47261,
                    55086, 50590, 22249, 42645, 49534, 31196, 37595, 46103, 6203, 31106, 7245,
                    26489, 17844, 23990, 24621, 29538, 33754, 37518, 35762, 8991, 11419, 53207,
                    46282, 1284, 35509, 20114, 36689, 58613, 5696, 3422, 22642, 57131, 19932,
                    33128, 41379, 28053, 61073, 11967, 57209, 34679, 62326, 10918, 21904, 14194,
                    2225, 56977, 30220, 10115, 63881, 43814, 7710, 8799, 11829, 22807, 4803, 25657,
                    3377, 1723, 12016, 40135, 5296, 50273, 242, 34377, 10341, 18796, 46874, 38375,
                    379, 18617, 15855, 5454, 44998, 35204, 62618, 62286, 44038, 65183, 39086,
                    40888, 34380, 28185, 61001, 57044, 47519, 29272, 25401, 3437, 47316, 54541,
                    2763, 32002, 60732, 9661, 6789, 62114, 59548, 23666, 7161, 44235, 41607, 36493,
                    27855, 34088, 17140, 30747, 31103, 59305, 29223, 33655, 21726, 36754, 8307,
                    40703, 51135, 15813, 20880, 6404, 32667, 8425, 59519, 18332, 18948, 25627,
                    45792, 58338, 33954, 33594, 23873, 13799, 31970, 46032, 33780, 18976, 4855,
                    18039, 22501, 22406, 64332, 11578, 60200, 4796, 20627, 5198, 9665, 21927,
                    58535, 15766, 41385, 6075, 59241, 552, 14657, 32652, 16013, 16029, 10856,
                    34036, 29905, 53576, 15550, 64833, 53891, 59673, 13528, 53561, 18531, 49798,
                    32272, 36758, 44806, 47467, 61081, 43536, 8198, 4170, 58183, 34343, 38198,
                    42480, 37755, 18937, 58967, 3199, 24466, 27268, 48745, 52115, 52721, 34639,
                    51648, 53110, 43853, 64855, 64729, 10939, 58916, 5459, 5033, 52767, 36858,
                    18914, 61433, 9316, 7380, 27525, 15665, 57200, 43569, 18467, 17025, 37654,
                    62171, 39351, 39862, 38001, 62430, 23042, 28186, 58116, 10544, 20580, 28645,
                    49998, 33692, 47575, 38594, 23800, 40033, 20470, 42262, 19159, 54426, 5745,
                    25626, 46213, 24322, 11728, 15439, 50694, 40192, 17666, 24334, 2874, 19884,
                    17855, 8428, 48459, 63581, 39729, 23958, 32635, 52995, 17374, 34609, 61448,
                    44243, 29247, 8962, 363, 35829, 61652, 58399, 27113, 44842, 28927, 59727,
                    45899, 9383, 33402, 59459, 63526, 20264, 49109, 42427, 20724, 19122, 22984,
                    15652, 49295, 11231, 9470, 11575, 51400, 19845, 52295, 6438, 13057, 18674, 647,
                    40418, 9938, 30171, 58704, 6455, 27941, 63398, 61967, 63456, 38324, 31057,
                    36752, 43326, 8609, 37027, 2575, 29213, 61093, 45116, 44805, 39165, 61302,
                    31229, 43180, 54284, 1557, 2608, 53008, 61009, 53177, 4301, 3693, 9319, 44616,
                    49357, 39931, 47370, 54760, 51922, 20368, 20896, 50774, 52674, 56214, 24732,
                    26686, 14896, 27795, 11325, 7210, 53181, 7999, 43370, 16462, 32422, 21029,
                    48630, 37161, 53799, 52386, 8978, 10691, 30417, 24351, 42183, 7800, 64842,
                    26405, 58252, 51219, 52176, 26003, 11120, 17181, 23312, 36368, 32038, 435,
                    1151, 33909, 46525, 21177, 49468, 54791, 1893, 37380, 31101, 61726, 29669,
                    35878, 48004, 25201, 12677, 7559, 6537, 15745, 18667, 11748, 37462, 45069,
                    62519, 36700, 31561, 38448, 60654, 55431, 40503, 34122, 20712,
                ]))
                .unwrap(),
                c: 166,
            },
            VarTestStruct {
                a: 39392,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    55581, 49397, 62572, 30724, 29040, 62494, 12425, 25717, 51809, 39771, 65479,
                    2580, 6646, 65271, 34779, 25945, 28351, 2503, 38629, 36565, 6771, 11388, 20433,
                    37634, 23150, 18954, 23982, 54839, 60034, 3811, 53668, 15579, 54351, 30460,
                    22734, 24817, 58067, 27093, 43172, 7583, 31508, 17987, 22578, 45349, 63406,
                    16953, 15482, 215, 55951, 50236, 65030, 17195, 34478, 56436, 39178, 13504,
                    10962, 26642, 35363, 34750, 65094, 34944, 52252, 52387, 18841, 40676, 39903,
                    2510, 26977, 51265, 865, 45298, 44314, 57523, 42380, 52460, 56453, 47329,
                    27505, 27818, 49198, 19391, 10041, 17106, 61847, 28903, 26794, 61417, 52975,
                    1800, 57350, 35440, 9709, 22868, 50054, 58390, 23066, 27877, 57177, 30799,
                    6053, 10140, 4418, 65064, 37772, 27086, 61234, 31150, 16384, 46863, 44847,
                    58711, 25933, 3389, 35522, 31063, 32912, 25682, 26834, 28911, 36410, 50641,
                    43417, 30597, 42842, 21182, 29256, 10153, 34902, 32427, 58349, 62223, 27817,
                    34853, 50982, 45197, 59236, 1996, 9004, 11384, 11541, 63527, 30766, 40467,
                    42520, 8912, 60430, 20150, 25536, 65294, 5125, 17995, 39235, 35005, 7350,
                    20710, 61776, 1880, 2940, 11965, 65143, 34863, 49497, 14358, 44776, 9451,
                    48433, 8716, 20077, 47328, 43717, 22914, 10005, 28557, 38053, 15351, 52972,
                    22782, 43274, 28356, 51947, 37963, 60391, 47578, 4287, 23994, 44505, 44934,
                    61230, 49164, 3936, 32468, 44164, 56406, 58254, 6835, 11535, 4888, 35811,
                    20663, 56733, 51351, 41242, 45061, 17495, 11422, 48485, 18148, 40703, 47411,
                    24408, 12055, 47056, 33116, 36155, 7088, 26258, 51512, 34631, 27428, 63827,
                    19019, 40833, 35267, 36822, 64670, 20630, 49114, 9801, 17713, 12879, 61862,
                    20393, 55395, 56465, 34567, 61459, 10839, 33516, 20547, 56018, 5179, 14587,
                    54128, 12301, 28810, 40312, 51016, 45480, 56751, 658, 48229, 15733, 31255,
                    22907, 63693, 22673, 42021, 41649, 27947, 21458, 1953, 35740, 56868, 53144,
                    1016, 15186, 49580, 7457, 17755, 5466, 50368, 30861, 17715, 21681, 14965,
                    31728, 61400, 49332, 32656, 6801, 1392, 19160, 61958, 17184, 11654, 59369,
                    53687, 12570, 39161, 59430, 3090, 17863, 22211, 2669, 50509, 59882, 22858,
                    49824, 20553, 9648, 49698, 5967, 21001, 65028, 10108, 39476, 59598, 34704,
                    8646, 37968, 37897, 31296, 60081, 62822, 47017, 17915, 5145, 11738, 54916,
                    25290, 43720, 20721, 6569, 33528, 10785, 29601, 8051, 4528, 38376, 50664,
                    53339, 30638, 20398, 3683, 56945, 15937, 36951, 31088, 1674, 41055, 35522,
                    4853, 4534, 5708, 40058, 15905, 13370, 36470, 25169, 20632, 21965, 15158,
                    12507, 882, 55238, 39589, 18301, 22884, 735, 58426, 8608, 30099, 34829, 18361,
                    4599, 43627, 49126, 22766, 41253, 20459, 13862, 17731, 24093, 43777, 20468,
                    20097, 41682, 62197, 46004, 12054, 14961, 64176, 46905, 29880, 4368, 18864,
                    30556, 15212, 9247, 59219, 51053, 44791, 26776, 60456, 53819, 56955, 1951,
                    42635, 43913, 16204, 40262, 28821, 46199, 55048, 5268, 38787, 26400, 35184,
                    22964, 42226, 16680, 11207, 32214, 34858, 9050, 61054, 31504, 57325, 26882,
                    48617, 1193, 9662, 22462, 40852, 60712, 31058, 12882, 65479, 64889, 56631,
                    28126, 31786, 24847, 23628, 109, 14430, 54867, 45293, 8339, 38662, 2381, 64710,
                    51029, 57378, 6786, 64775, 45346, 47054, 23888, 41221, 21552, 33824, 1854,
                    62580, 7749, 42902, 985, 56878, 52609, 52844, 17699, 10114, 9858, 34795, 63453,
                    2219, 6192, 16763, 10375, 31901, 31130, 20949, 62176, 61918, 8506, 2751, 21935,
                    19114, 13824, 52063, 33857, 52476, 33393, 45905, 1866, 6936, 59985, 31557,
                    6979, 11500, 49908, 61153, 20804, 26988, 1325, 60489, 34980, 48024, 10407,
                    6871, 27561, 54137, 56016, 50769, 65432, 46878, 20425, 35598, 46223, 26851,
                    43520, 11083, 30978, 5730, 63556, 35278, 25719, 55113, 5478, 48671, 62717,
                    63643, 20672, 56677, 65392, 59009, 45242, 17687, 17431, 11425, 5198, 63974,
                    52844, 49078, 60779, 21326, 54842, 9961, 20375, 49040, 20213, 45682, 19524,
                    45706, 7824, 16255, 16187, 58831, 30226, 10506, 12203, 64340, 57345, 13141,
                    32577, 27515, 18489, 51188, 40114, 2949, 48940, 26680, 49997, 18295, 26302,
                    59548, 31565, 16689, 11374, 31363, 28515, 45669, 28840, 15379, 39937, 54961,
                    9285, 53444, 54695, 18707, 57091, 28485, 27678, 13805, 55370, 15952, 50522,
                    2536, 55714, 20925, 62711, 53439, 57375, 53894, 42499, 33693, 35883, 55297,
                    30218, 60290, 7191, 62751, 24426, 56214, 34725, 28773, 26048, 40568, 45997,
                    18520, 2488, 26446, 57979, 64616, 6523, 39227, 39077, 10814, 27316, 4512, 3777,
                    37195, 31629, 56082, 8526, 59343, 21549, 19036, 37873, 65011, 19568, 11078,
                    7080, 45097, 44287, 51603, 17099, 4036, 16632, 50265, 35893, 43345, 50038,
                    21665, 3142, 44477, 55546, 9366, 55448, 29773, 29014, 28527, 34707, 59802,
                    53765, 27216, 28034, 3593, 8531, 34638, 28731, 14010, 32021, 4480, 40401,
                    23953, 56050, 29523, 9455, 31827, 34026, 17107, 43270, 7050, 63996, 38298,
                    1298, 48022, 38236, 35171, 6375, 41023, 32213, 50731, 24903, 15765, 10364,
                    40504, 5418, 52798, 32340, 4097, 51261, 30060, 40747, 36849, 52137, 3808,
                    19961, 32008, 30895, 54287, 52624, 47677, 12487, 50659, 64622, 32649, 5021,
                    55935, 59339, 45856, 42739, 42813, 414, 53430, 31005, 50609, 16418, 26268,
                    26848, 900, 43362, 1176, 44999, 21361, 3058, 3329, 61641, 55280, 38902, 43916,
                    1983, 52887, 63012, 58342, 51664, 62887, 46974, 34351, 48499, 49047, 18556,
                    11978, 7063, 61734, 57109, 65177, 12245, 5327, 39202, 55123, 40082, 6316,
                    45423, 54217, 10072, 6925, 53447, 18466, 27754, 47357, 53776, 13437, 31653,
                    13471, 21062, 56273, 50069, 44566, 47743, 37080, 57940, 38546, 13805, 39582,
                    11099, 30543, 40856, 8010, 58972, 39205, 10302, 18926, 34275, 20025, 64854,
                    58859, 22397, 16419, 5630, 48611, 27645, 9519, 58634, 33678, 59924, 11508,
                    36577, 20014, 24184, 2160, 37721, 10887, 43033, 26938, 14951, 25659, 17789,
                    20640, 16717, 62517, 33962, 53805, 2497, 46491, 5404, 48334, 65356, 52186,
                    48158, 26782, 44497, 23125, 63869, 38584, 21214, 46755, 9974, 44730, 34948,
                    4206, 42048, 16286, 25249, 42831, 58891, 10275, 20747, 43294, 17679, 54866,
                    12893, 20687, 64671, 33902, 35109, 24446, 21001, 22560, 28440, 31315, 34285,
                    6951, 59745, 35419, 41182, 32435, 31764, 31778, 46523, 51953, 15682, 28523,
                    53325, 50132, 38317, 46725, 18939, 55067, 56698, 39978, 53906, 14483, 35592,
                    32977, 31505, 28480, 19994, 25060, 46073, 11287, 40659, 37444, 10019, 20976,
                    42683, 56405, 15647, 2139, 27532, 23574, 3405, 10848, 29620, 9891, 49743, 3659,
                    53838, 12335, 64348, 14180, 23699, 54596, 24746, 11277, 34639, 62599, 27559,
                    54469, 7986, 24429, 63411, 51961, 25325, 27962, 45597, 43207, 59884, 37600,
                    47896, 23440, 28985, 17759, 15175, 20812, 44569, 11648, 2445, 2547, 10443,
                    26976, 64387, 48064, 62187, 42657, 64823, 17531, 5499, 62738, 4928, 60640,
                    12039, 52690, 64951, 55795, 39093, 24211, 31382, 983, 53152, 33889, 38780,
                    50039, 47730, 49479, 57141, 6027, 32006, 53012,
                ]))
                .unwrap(),
                c: 210,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x80f233ed450b080e645437eb00253f9000760d4e37788026fd7948b7329ade91");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_3() {
    let value = ComplexTestStruct {
        a: 51614,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            53782, 28969, 18301, 63374, 56984, 55478, 16687,
        ]))
        .unwrap(),
        c: 3,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            189, 151, 115, 63, 89, 44, 214, 209, 231, 80, 152, 192, 121, 70, 143, 7, 18, 31, 249,
            179, 202, 17, 236, 11, 96, 34, 41, 22, 242, 168, 73, 189, 72, 73, 88, 61, 178, 140, 33,
            1, 120, 93, 245, 20, 83, 177, 24, 235, 9, 231, 60, 8, 76, 22, 37, 231, 208, 95, 59,
            239, 179, 218, 108, 165, 47, 241, 44, 218, 176, 99, 125, 65, 191, 130, 174, 178, 73,
            227, 136, 248, 111, 23, 248, 38, 40, 202, 126, 185, 162, 144, 142, 50, 204, 145, 84,
            167, 232, 9, 163, 244, 7, 117, 181, 98, 210, 145, 51, 42, 53, 184, 186, 64, 20, 219,
            180, 53, 145, 102, 222, 8, 25, 45, 11, 149, 30, 216, 13, 57,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 16121,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                33835, 62976, 24294, 4236, 44277, 48144, 33708, 5260, 1125, 31974, 24100, 52755,
                57691, 33401, 55406, 35893, 39810, 40516, 31625, 48075, 16067, 10472, 2451, 29373,
                35575, 13384, 64609, 24827, 48314, 46332, 61496, 23730, 63986, 4446, 27749, 60825,
                27415, 60957, 53068, 36771, 39965, 56202, 9083, 63771, 46114, 48850, 49914, 57377,
                12698, 41935, 52264, 61566, 55021, 35163, 24740, 45998, 29660, 52828, 27484, 28787,
                61850, 54104, 35530, 7373, 56657, 40295, 14445, 57763, 47856, 53837, 18523, 45390,
                24388, 26471, 38936, 63502, 1791, 51251, 14292, 31815, 55645, 22124, 198, 31124,
                50124, 60554, 12197, 42194, 7215, 28703, 50953, 46197, 35764, 43501, 1505, 6640,
                63262, 51772, 56840, 25288, 27496, 38161, 51063, 32680, 23705, 12486, 13106, 23863,
                40240, 55526, 15361, 54764, 49655, 16975, 52821, 37487, 18022, 35656, 25004, 3798,
                23595, 9486, 30723, 53884, 57907, 13600, 23494, 34758, 6125, 52471, 59052, 20726,
                4456, 41166, 3445, 944, 30855, 3938, 39365, 60479, 46851, 25921, 23572, 44699,
                19690, 17601, 9294, 48025, 62309, 63039, 5945, 40147, 40248, 30163, 7883, 44262,
                53301, 40053, 55808, 44905, 61604, 669, 59464, 4273, 51298, 27900, 59252, 64228,
                35589, 43883, 62461, 22710, 55778, 19633, 58823, 28784, 16077, 22747, 8268, 63493,
                58144, 8674, 376, 43580, 63447, 7363, 65509, 31876, 38802, 51621, 60130, 53630,
                43744, 3769, 32622, 46635, 45858, 16491, 58299, 893, 9978, 43663, 30752, 39282,
                35577, 50070, 9185, 16642, 39582, 12262, 25045, 59891, 37727, 47173, 10716, 16822,
                5715, 29662, 35, 39780, 42432, 37969, 27245, 3570, 1346, 53054, 18591, 28480,
                50803, 27633, 2699, 13511, 59700, 40383, 39077, 56934, 41897, 10201, 12963, 45342,
                46010, 40780, 42470, 39053, 48233, 55776, 43951, 60952, 54600, 4599, 62155, 1892,
                47008, 3379, 36053, 54895, 32445, 63889, 44565, 5123, 47150, 29285, 61861, 51390,
                40000, 62525, 51618, 18566, 64093, 23108, 43640, 56069, 59767, 7343, 41024, 5390,
                27696, 34659, 46758, 43255, 289, 21562, 22475, 54438, 52396, 51954, 55471, 50963,
                58992, 1044,
            ]))
            .unwrap(),
            c: 128,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 148, b: 17897429674566788394, c: 859275185 },
            FixedTestStruct { a: 232, b: 15539700760261490019, c: 4035493988 },
            FixedTestStruct { a: 59, b: 10016516488423678935, c: 2807736859 },
            FixedTestStruct { a: 108, b: 8993043625242043626, c: 3245603181 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 31486,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    23508, 22649, 40233, 64909, 58136, 29268, 23491, 43831, 54614, 32649, 34803,
                    4503, 40920, 17028, 11498, 5441, 25244, 12038, 44684, 52919, 46024, 61494,
                    13879, 16946, 44122, 13281, 12881, 41775, 65006, 42076, 10505, 40143, 34603,
                    4030, 64491, 26608, 17982, 26953, 33797, 31453, 48743, 43486, 17025, 31087,
                    821, 52611, 9933, 17022, 10248, 53814, 63518, 30466, 44358, 6696, 61013, 45985,
                    65252, 52476, 20982, 23284, 61884, 51368, 5673, 15481, 19431, 3358, 11464,
                    4673, 42707, 52054, 61137, 46937, 51377, 21535, 15120, 48203, 25496, 32564,
                    12175, 9803, 46362, 30395, 40246, 36898, 44829, 8585, 19954, 64971, 25362,
                    9883, 19115, 8842, 58710, 42571, 11367, 29933, 45983, 11034, 59508, 24039,
                    5616, 23038, 30185, 61232, 64372, 41890, 19531, 42215, 57345, 43408, 8060,
                    24106, 25020, 52510, 38991, 61735, 38145, 46877, 27423, 3309, 21204, 8143,
                    5051, 51914, 46824, 21030, 6891, 26973, 11863, 28466, 27450, 2527, 51543,
                    14911, 21882, 19565, 54303, 19662, 25798, 31502, 9075, 62792, 49623, 23414,
                    14861, 65416, 4226, 2008, 49016, 29194, 19835, 51380, 5755, 40770, 31484,
                    43928, 10351, 11727, 25702, 58126, 37719, 52682, 42108, 59305, 7372, 289,
                    64507, 62580, 13835, 24241, 60477, 60121, 24444, 15733, 37288, 34648, 44120,
                    40895, 18533, 42645, 215, 56618, 1989, 63331, 56068, 60311, 10840, 8487, 18087,
                    44964, 48359, 57762, 1169, 6688, 54151, 39816, 52091, 43107, 21641, 56201,
                    25746, 19717, 15893, 654, 29840, 28169, 52558, 16703, 13994, 31133, 54566,
                    34082, 65437, 32360, 29933, 52655, 61439, 16938, 47562, 24921, 44634, 34257,
                    39447, 59598, 59472, 43706, 26065, 48002, 28380, 18207, 629, 43865, 3243,
                    51644, 54683, 44853, 29618, 57015, 26648, 49254, 9596, 21030, 41724, 46454,
                    23808, 10018, 50893, 46422, 5251, 39365, 30830, 20429, 38407, 8564, 28002,
                    53564, 48937, 33163, 15429, 15749, 2993, 24196, 1219, 5311, 50065, 44914,
                    37887, 59655, 61649, 53208, 54533, 47065, 59893, 19225, 39982, 44831, 41041,
                    46626, 64086, 36379, 48387, 16249, 40636, 36520, 37238, 30167, 36199, 42774,
                    22724, 31869, 20324, 40607, 44299, 24685, 32488, 1935, 59249, 28563, 49592,
                    29837, 28784, 26734, 48026, 40239, 4445, 52448, 6425, 2400, 38266, 30416,
                    15235, 30324, 2333, 42479, 53606, 59885, 9452, 2350, 24415, 3614, 61364, 48457,
                    1498, 9036, 8070, 20971, 3733, 22393, 60486, 6966, 6830, 61645, 34014, 45532,
                    21062, 4815, 40350, 8731, 10248, 32955, 47230, 14286, 31244, 49723, 64216,
                    12573, 12644, 44735, 19615, 42728, 40653, 8495, 6463, 17091, 11961, 30409,
                    57657, 38752, 13856, 15847, 62969, 4789, 15671, 33889, 40836, 46091, 47581,
                    35699, 1886, 64209, 196, 49619, 16402, 35657, 44018, 59823, 60110, 48784,
                    25695, 8509, 9033, 5485, 45987, 28498, 28543, 18362, 14544, 10102, 60514,
                    58998, 31860, 23063, 15291, 28445, 7425, 33623, 3575, 7521, 23322, 30292,
                    52055, 19063, 51342, 41872, 23888, 54621, 60424, 19240, 17936, 61444, 13973,
                    63622, 16994, 40654, 32290, 9233, 60248, 45059, 16571, 10451, 388, 41036,
                    60733, 34731, 1248, 40854, 34310, 32783, 54912, 62483, 10302, 21839, 25216,
                    44642, 39043, 44447, 12619, 33529, 5184, 62792, 32156, 16330, 55631, 2046,
                    23113, 33092, 1251, 49534, 32221, 23739, 39058, 2686, 32575, 18530, 19538,
                    30073, 22914, 63457, 21377, 62501, 19103, 22077, 61408, 30878, 60002, 2576,
                    61082, 56812, 35834, 16671, 26752, 32064, 23410, 15114, 33432, 36189, 7828,
                    64559, 51227, 39867, 6683, 13568, 64345, 40496, 1037, 52134, 37084, 9142,
                    43639, 47880, 16270, 29532, 10371, 22449, 44545, 41895, 55699, 59155, 21055,
                    65507, 1817, 5402, 41200, 38564, 21735, 59250, 15662, 29713, 1806, 54410,
                    31841, 3973, 44962, 40499, 22720, 30538, 11332, 34374, 37028, 61218, 33097,
                    38835, 1146, 26430, 35935, 14509, 60165, 50617, 12495, 8743, 64394, 26725,
                    42910, 1047, 62399, 45584, 2281, 62128, 54498, 8783, 12877, 32881, 3839, 19700,
                    18676, 19274, 2522, 48559, 34038, 20723, 24550, 7503, 35805, 28985, 33951,
                    54134, 51404, 57864, 65463, 43076, 46714, 56641, 63660, 8794, 61384, 60531,
                    9664, 38903, 10161, 15870, 30598, 13795, 16437, 40506, 28740, 6154, 60428,
                    49781, 57444, 43731, 19968, 28634, 55137, 13786, 6134, 1519, 40282, 35940,
                    25174, 50285, 41906, 61046, 21095, 47444, 36991, 31116, 43711, 61524, 39282,
                    17378, 17051, 12921, 38646, 35919, 44758, 16522, 21515, 10094, 24938, 23822,
                    15701, 3835, 52747, 29305, 17662, 8633, 56088, 3070, 3360, 17883, 20682, 46010,
                    646, 26974, 31499, 43764, 25366, 25701, 28938, 37614, 58246, 28876, 56429,
                    48124, 26057, 3323, 34945, 29008, 40465, 40907, 28642, 52930, 44602, 5221,
                    27830, 3138, 31935, 21989, 14863, 17154, 4971, 400, 25004, 25841, 9157, 26822,
                    30926, 1715, 4031,
                ]))
                .unwrap(),
                c: 168,
            },
            VarTestStruct {
                a: 25072,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    38596, 24388, 64715, 61618, 40439, 30437, 57693, 15064, 12610, 26813, 62837,
                    60826, 22328, 15650, 51738, 11278, 22588, 8096, 47194, 40188, 12709, 40663,
                    24962, 47915, 3999, 26531, 25148, 55305, 10590, 2934, 50982, 63596, 30391,
                    1241, 56272, 49079, 28504, 30694, 64376, 45874, 38405, 52669, 31784, 9810,
                    38049, 61769, 17896, 39815, 33058, 36507, 30802, 43174, 13842, 9532, 3986,
                    30556, 9170, 58461, 60882, 9645, 2747, 61918, 9507, 35029, 14685, 25016, 4132,
                    2229, 10158, 61199, 45253, 17766, 13821, 58966, 21249, 49476, 15232, 27071,
                    45929, 7407, 48478, 16799, 56816, 7577, 13357, 51450, 51323, 36165, 7604,
                    60233, 14632, 22801, 63658, 61743, 57000, 45560, 12439, 50497, 1737, 661,
                    60834, 3218, 11662, 63660, 22961, 38192, 32605, 35503, 20075, 51982, 55188,
                    50737, 48657, 2448, 43453, 25893, 40412, 20129, 29870, 50190, 38953, 27855,
                    30688, 20362, 808, 30355, 53214, 4536, 29502, 36597, 50964, 2098, 56085, 15741,
                    3210, 4346, 45395, 48777, 64625, 25194, 43703, 15077, 29871, 16452, 15502,
                    22278, 6070, 36034, 34465, 33077, 56059, 34837, 65063, 9523, 59050, 25322,
                    10260, 47546, 36821, 23635, 22743, 3881, 25441, 41951, 56260, 36813, 30884,
                    9080, 53639, 29467, 62037, 59505, 10290, 41577, 21843, 22248, 19168, 61051,
                    12845, 12552, 22163, 18666, 56439, 63015, 6673, 57774, 2087, 2859, 7621, 53684,
                    8000, 8837, 39627, 2328, 35823, 30843, 17826, 60431, 10991, 40223, 5530, 61596,
                    4337, 11434, 54912, 33118, 35117, 31593, 34435, 20067, 28565, 57213, 2946,
                    48275, 63039, 30883, 26791, 4894, 61034, 60199, 38558, 24715, 14570, 61617,
                    17923, 4570, 57095, 41794, 32421, 32162, 1552, 29918, 30492, 9783, 8326, 17119,
                    2817, 25380, 786, 54780, 32247, 32633, 29672, 25028, 38667, 30829, 44200,
                    56739, 43971, 43486, 51603, 61797, 1846, 22999, 30932, 30404, 52770, 24960,
                    1720, 20527, 2063, 63381, 8403, 23610, 27404, 31122, 46604, 40343, 61974,
                    29104, 13733, 15144, 18222, 7145, 44018, 202, 53993, 43841, 18802, 10973,
                    46184, 36611, 36570, 11686, 20815, 12120, 55460, 62963, 58393, 19002, 14194,
                    61571, 1966, 37737, 877, 43509, 50443, 51770, 28544, 30703, 22948, 14718,
                    33988, 37425, 29980, 28674, 62494, 25223, 34219, 31488, 46045, 29638, 2399,
                    11514, 14584, 64887, 56279, 22625, 8510, 42610, 12916, 48421, 36341, 21345,
                    62956, 26679, 35104, 56011, 52969, 33573, 59036, 62433, 9469, 56295, 39373,
                    46865, 56408, 61365, 9279, 903, 31115, 9775, 20507, 30317, 59362, 20743, 16552,
                    36108, 22961, 29672, 19552, 7599, 53970, 10548, 44814, 26173, 34010, 47860,
                    51321, 6361, 25857, 31826, 39286, 47620, 11766, 56215, 4605, 10337, 62081,
                    24409, 53653, 40085, 41398, 63566, 64952, 7760, 50321, 44674, 37374, 56430,
                    59559, 57198, 49443, 34044, 35741, 161, 43887, 52933, 62906, 43096, 51604,
                    15862, 51233, 15259, 21807, 57071, 3441, 1511, 31170, 41454, 8954, 9172, 57618,
                    43042, 3033, 44658, 9027, 36312, 19295, 17776, 28204, 35318, 46442, 58706,
                    36036, 55999, 5093, 43984, 965, 9625, 7709, 63228, 20605, 37067, 6769, 41433,
                    53186, 34211, 50131, 39599, 2251, 63553, 37999, 43484, 55553, 53746, 18529,
                    59223, 38433, 59691, 38064, 12606, 65327, 33034, 7029, 24552, 44816, 41365,
                    51567, 64669, 19201, 42688, 38528, 39033, 48477, 12300, 5379, 9857, 17916,
                    19525, 42405, 52703, 3852, 46739, 9812, 17890, 5110, 19733, 51544, 31208,
                    52707, 55511, 18006, 56766, 64208, 25867, 47373, 3584, 14260, 61945, 36972,
                    59330, 2192, 32828, 57735, 34283, 26208, 9812, 40824, 53320, 39120, 42817,
                    37540, 16163, 23237, 10288, 56744, 12702, 48690, 20825, 63661, 48530, 35032,
                    17795, 38732, 17563, 31140, 32650, 13005, 47348, 42202, 18107, 37143, 37550,
                    36987, 42833, 39673, 45124, 29712, 57705, 65523, 11334, 8638, 63758, 1347,
                    23256, 61794, 28643, 7932, 53994, 48123, 15101, 32415, 11693, 44867, 4018,
                    20981, 56304, 18567, 46173, 42624, 62493, 17947, 11444, 31601, 63509, 53688,
                    26705, 34780, 59441, 4223, 1165, 22437, 24073, 38315, 35752, 6247, 21960,
                    41883, 2717, 2748, 15746, 65014, 25763, 32571, 38705, 6829, 57172, 74, 14509,
                    10460, 31342, 29941, 8177, 59076, 34973, 3263, 11501, 30166, 24257, 38183,
                    63535, 50092, 32889, 36441, 63354, 38305, 53303, 3213, 23681, 5572, 35388, 462,
                    46461, 43912, 1274, 7902, 55595, 37884, 60574, 25109, 2975, 33298, 19114,
                    31205, 2818, 34665, 3779, 30793, 44724, 9318, 36591, 27289, 52378, 61104,
                    14355, 55356, 44330, 48788, 876, 51257, 12199, 13437, 8114, 60774, 45122,
                    40045, 36910, 24480, 56455, 10682, 17842, 11909, 41220, 6856, 41577, 49591,
                    12315, 25184, 35994, 22365, 39470, 10816, 5525, 37553, 59359, 33060, 55583,
                    39312, 14458, 47779, 26227, 36099, 51332, 40196, 53651, 35193, 9747, 43226,
                    16553, 44826, 53065, 53981, 42011, 20347, 9362, 22629, 23709, 31994, 56931,
                    58737, 25703, 2646, 16284, 49768, 24647, 29236, 60764, 58527, 56369, 4809,
                    23250, 27806, 35791, 11102, 53887, 25276, 2069, 9642, 20266, 65073, 43662,
                    20761, 88, 18462, 18770, 36031, 4105, 46450, 40725, 27026, 45763, 20160, 429,
                    5378, 62493, 27072, 27921, 9339, 41361, 26215, 25124, 12275, 53621, 31447,
                    54567, 13015, 12057, 11482, 25284, 26461, 19772, 14671, 60076, 42970, 20545,
                    39285, 48806, 18526, 46229, 44984, 21961, 27652, 30916, 43254, 1353, 27819,
                    2085, 31258, 30774, 20656, 50391, 34354, 27482, 8365, 30907, 49104, 37886,
                    26300, 58764, 63180, 51505, 51538, 48915, 58450, 43428, 23072, 907, 20856,
                    56490, 24597, 51995, 31526, 57710, 5956, 61340, 16289, 45515, 27164, 40244,
                    39283, 52718, 60463, 51324, 40090, 50027, 6180, 40208, 64746, 3223, 15740,
                    6757, 28504, 55684, 36883, 55243, 12637, 34100, 37747, 30475, 57033, 12707,
                    20514, 64054, 58313, 63005, 7186, 18098, 52147, 31769, 58224, 10269, 47788,
                    33651, 60201, 53800, 60066, 4852, 10085, 16673, 45807, 50849, 15683, 16611,
                    20278, 55287, 13271, 35013, 1689, 26596, 8575, 13853, 54389, 26815, 63362,
                    1162, 45603, 12844, 15331, 44479, 62876, 15124, 42689, 64522, 5962, 52582,
                    65003, 7455, 17444, 9843, 2507, 47649, 12074, 53249, 48525, 48339, 22658,
                    62104, 56643, 8052, 1926, 57580, 27728, 59257, 25315, 55397, 54876, 34273,
                    28664, 36367, 11384, 55072, 22230, 28482, 45237, 11017, 50303, 19031, 43158,
                    60141, 5823, 43913, 48924, 11649, 60267, 41252, 7662, 40135, 15391, 47957,
                    6024, 48096, 49336, 16173, 218, 8025, 38298, 1174, 44144, 40840, 62862, 12391,
                    23517, 25079, 28163, 3556, 65389, 10016, 11329, 5151, 64198, 3087, 47921,
                    61681, 59733, 4636, 14097, 46441, 26571, 48353, 19188, 40806, 39466, 23284,
                    2134, 25586, 18548, 28201, 42970, 24783, 8710, 28849, 39846, 14968, 1740, 1999,
                    10183, 36907, 20290, 7701, 39671, 38204, 26550, 37541, 49517, 40336, 10442,
                    15375, 11919, 23004, 52051, 44718, 35874, 49033, 59164, 36017, 14593, 57643,
                    23764, 37436, 24119, 27665, 14245, 45119, 1851, 37551, 21221, 10187, 60022,
                    10133, 45798, 9089, 64769, 64484, 59298, 9143, 57804, 60470, 40461,
                ]))
                .unwrap(),
                c: 66,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x8fc069cc0b3cf9d3b5a2ba1ed9668ceb7538a3814b045b6743a861a69c65ef58");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_4() {
    let value = ComplexTestStruct {
        a: 46515,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            19362, 29937, 37197, 17341, 19247, 46329, 65029, 59777, 12984, 1102, 20472, 52710,
            55114, 40355, 38902, 39954, 15988, 42346, 50944, 3324, 14443, 56291, 56624, 51149,
            4837, 45824, 908, 10990, 43762, 47420, 36392, 32029, 63092, 935, 60270, 674, 32785,
            43706, 21294, 63739, 5275,
        ]))
        .unwrap(),
        c: 21,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            188, 166, 206, 166, 254, 25, 164, 88, 255, 30, 181, 69, 224, 99, 28, 60, 135, 54, 218,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 20382,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                53357, 54641, 12664, 38116, 19877, 29424, 23640, 48978, 23960, 25192, 8992, 32128,
                52536, 12631, 18256, 37548, 3018, 7890, 18852, 39566, 51167, 43999, 30760, 36030,
                61600, 17772, 2949, 15782, 38531, 47300, 33921, 33352, 42288, 59053, 52902, 7250,
                8833, 7777, 61704, 55278, 63261, 27673, 54921, 10021, 20363, 65048, 31217, 7995,
                12296, 15459, 52384, 42841, 20855, 34718, 17523, 58745, 19668, 51517, 4777, 49166,
                381, 13850, 47185, 10574, 64896, 55259, 51528, 16563, 13922, 23108, 38405, 6296,
                64938, 41784, 62733, 62107, 9510, 11039, 14394, 5439, 1153, 11329, 65097, 4409,
                39356, 44464, 50017, 43656, 55395, 5742, 37521, 59587, 53723, 22784, 1127, 54952,
                40911, 46916, 11831, 24047, 58220, 49096, 45647, 53394, 12747, 6050, 12594, 58420,
                6597, 57068, 39976, 64932, 22677, 17311, 46285, 35171, 57310, 41922, 37499, 58495,
                22969, 8233, 12616, 35337, 26983, 30778, 33390, 12639, 49801, 12443, 49862, 37771,
                48668, 51982, 60969, 2628, 3656, 24376, 58479, 39986, 63823, 58562, 61111, 49358,
                55661, 6518, 23302, 46538, 35358, 44050, 7160, 44683, 16253, 51841, 29263, 59470,
                42534, 51112, 24861, 20943, 58256, 36589, 29060, 14946, 57182, 52842, 16995, 42106,
                62456, 35985, 43770, 37744, 26814, 58578, 34821, 792, 18721, 56167, 56742, 36183,
                3291, 52187, 11146, 3258, 6269, 37280, 37380, 5210, 38307, 30216, 56248, 5148,
                12622, 24405, 9245, 28641, 45672, 50254, 12575, 41018, 535, 28169, 50367, 42967,
                25699, 28077, 10543, 23062, 15460, 20931, 61126, 6882, 43584, 24209, 38474, 50295,
                15269, 25181, 28497, 30970, 36289, 35570, 59075, 6754, 19579, 24441, 50140, 29369,
                49749, 35394, 37385, 35815, 65098, 8346, 3282, 5740, 57943, 55153, 3379, 48142,
                43368, 49308, 20920, 30512, 20610, 59534, 6691, 40086, 10580, 504, 24654, 50764,
                1371, 29697, 28480, 27015, 6049, 14438, 57976, 33254, 14479, 17454, 43424, 39540,
                48248, 11454, 52970, 57139, 47794, 54891, 43472, 5952, 46945, 37107, 41072, 18540,
                36831, 22311, 12116, 58498, 50420, 1411, 1555, 47045, 44841, 58799, 25178, 24602,
                33537, 29722, 42746, 61795, 5564, 34873, 6131, 26533, 26502, 43907, 26850, 1951,
                26625, 9509, 58079, 50170, 52887, 1611, 65082, 3664, 32566, 10237, 12375, 22764,
                49728, 17285, 50663, 56437, 11507, 17281, 42379, 34309, 25175, 60147, 20043, 1121,
                36641, 11215, 56020, 63529, 49110, 52642, 8241, 14382, 26558, 9404, 42074, 34281,
                30521, 53934, 10757, 35890, 12515, 50368, 25758, 35190, 25950, 21021, 49712, 38881,
                38680, 30011, 4064, 55981, 47138, 59921, 45521, 20265, 14741, 11262, 8367, 64030,
                10448, 40723, 62505, 3639, 55780, 61641, 41167, 16656, 8119, 15105, 15914, 52091,
                53317, 33987, 58752, 30803, 35976, 39145, 11730, 61249, 44559, 6939, 27626, 52987,
                15022, 18764, 12586, 35713, 15780, 13105, 12997, 55555, 36315, 58098, 28815, 12879,
                22618, 32975, 28616, 6821, 42723, 10854, 41342, 4193, 26184, 2580, 21194, 47861,
                65451, 45510, 62093, 62855, 20637, 29736, 3043, 145, 54436, 43015, 52293, 50082,
                36481, 59583, 21178, 17853, 11801, 12943, 3584, 45978, 54013, 37949, 39997, 32388,
                36428, 17725, 39198, 7599, 60281, 29528, 14864, 19332, 48578, 40088, 27335, 42630,
                8360, 35401, 58522, 18576, 20625, 6665, 50698, 46374, 18421, 37370, 48564, 42619,
                27550, 29524, 19179, 34087, 9549, 56589, 23552, 35125, 45204, 35582, 53926, 13960,
                4365, 8599, 57995, 14930, 34411, 14329, 43497, 58885, 65175, 36608, 54883, 13243,
                18208, 51077, 12292, 41069, 3731, 20681, 57910, 9307, 27243, 44567, 23823, 46083,
                62636, 6024, 44838, 23253, 10684, 53765, 33346, 8556, 32857, 36900, 3666, 2337,
                24289, 56452, 14161, 16905, 44584, 24998, 54902, 36366, 27581, 26822, 44583, 34030,
                37746, 46120, 49704, 64644, 16532, 23642, 27098, 18203, 22843, 11732, 36518, 53914,
                50817, 31350, 51220, 17446, 12211, 30776, 7291, 5500, 31937, 30747, 33766, 40290,
                64260, 27403, 14975, 38243, 22635, 59436, 51014, 35609, 51799, 38048, 39700, 20989,
                64789, 41944, 34753, 782, 40287, 26408, 57184, 44808, 9012, 58164, 37533, 9126,
                24268, 35449, 39078, 57727, 58096, 58728, 24220, 51868, 12608, 2597, 60775,
            ]))
            .unwrap(),
            c: 20,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 222, b: 3285014904460612112, c: 2292550353 },
            FixedTestStruct { a: 18, b: 4708385985138864212, c: 3114459384 },
            FixedTestStruct { a: 128, b: 6028494756027944860, c: 957913575 },
            FixedTestStruct { a: 98, b: 9127365913024181663, c: 2786870526 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 61672,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    55637, 15465, 39650, 34754, 53723, 27041, 2418, 49600, 61775, 21387, 44317,
                    23608, 33906, 31434, 61720, 30487, 61629, 62489, 53183, 6739, 42206, 33620,
                    45146, 52617, 4696, 23207, 42706, 44091, 3309, 22826, 24081, 38684, 15934,
                    50964, 32181, 34184, 32606, 21759, 38223, 19125, 44609, 57140, 58834, 4801,
                    50545, 10086, 29252, 54060, 12525, 58780, 1300, 24995, 62135, 31105, 41613,
                    20832, 29299, 18164, 36172, 15004, 58376, 64230, 64055, 49875, 40591, 58249,
                    40585, 37618, 60025, 11635, 34482, 49751, 8496, 28883, 64002, 45259, 8948,
                    60117, 1663, 45342, 23917, 13786, 34365, 32563, 24011, 1086, 45351, 25791,
                    60747, 61720, 19428, 22802, 27246, 7015, 65338, 40548, 12277, 35081, 41459,
                    27326, 50564, 47023, 54679, 2804, 38190, 51806, 21795, 12182, 36428, 477,
                    65070, 25644, 38394, 63283, 36261, 61914, 49964, 55277, 33547, 39696, 31036,
                    31006, 52697, 45745, 56971, 37404, 39118, 802, 29699, 960, 25552, 30653, 48998,
                    7044, 10608, 31466, 22372,
                ]))
                .unwrap(),
                c: 199,
            },
            VarTestStruct {
                a: 35007,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    37771, 19875, 34121, 44743, 27521, 6023, 58913, 23733, 15861, 48487, 50859,
                    52867, 39431, 50481, 18607, 20243, 34343, 4791, 26930, 60013, 20925, 10993,
                    33913, 6035, 2216, 19581, 7814, 40614, 7809, 51781, 33924, 5514, 36179, 62600,
                    56435, 65313, 10400, 15626, 15213, 48139, 12755, 11544, 39989, 27381, 51889,
                    31306, 49777, 9775, 34623, 44564, 54900, 53268, 16176, 17332, 636, 638, 43044,
                    26962, 35851, 64215, 54835, 30082, 62363, 44934, 4784, 11795, 17119, 38379,
                    45660, 12506, 60110, 57183, 6478, 24047, 19342, 2734, 19217, 16219, 31026,
                    15411, 13410, 43181, 35809, 32686, 18376, 2496, 23904, 57206, 11820, 19397,
                    7919, 33029, 60772, 23086, 40602, 62917, 41786, 16865, 42189, 38226, 55964,
                    51785, 61186, 52845, 32595, 4578, 15050, 3346, 6267, 48040, 54333, 16786, 7318,
                    48790, 32131, 49916, 28357, 47765, 10234, 25577, 45201, 3885, 18658, 58845,
                    20671, 56205, 35710, 51446, 33175, 23613, 35948, 26876, 64975, 63149, 60613,
                    6858, 39184, 21414, 7663, 5463, 26004, 8483, 44214, 43087, 12121, 47589, 64373,
                    28854, 16934, 31237, 47624, 7826, 19932, 1499, 46533, 56395, 57458, 64746,
                    42487, 53463, 10681, 49246, 48813, 11075, 23221, 58349, 42103, 42718, 15360,
                    44046, 17004, 1319, 5765, 47678, 14993, 11717, 48410, 3705, 64362, 18796, 6586,
                    11188, 17916, 43055, 42968, 54055, 20005, 3349, 8986, 40001, 22986, 40893,
                    31454, 60828, 10778, 11000, 49999, 19184, 24204, 38294, 56925, 35888, 18647,
                    63133, 15852, 12811, 55156, 63081, 30560, 10613, 578, 21423, 15344, 46588,
                    9781, 10799, 18863, 29416, 14697, 41097, 15992, 24999, 43217, 53357, 58056,
                    19815, 14798, 23451, 1325, 52924, 43188, 56101, 1866, 59895, 55056, 14423,
                    3204, 50262, 53377, 29041, 59013, 2239, 3975, 23459, 61255, 8540, 29151, 45468,
                    55815, 41237, 24387, 41098, 33582, 53984, 22224, 17212, 19913, 35416, 27613,
                    38630, 47795, 20106, 12203, 1227, 62979, 24822, 10594, 3270, 2988, 13821,
                    44678, 35836, 47672, 55189, 38775, 5634, 38167, 7523, 31434, 19651, 14798,
                    62148, 1011, 27738, 40121, 31530, 63368, 36038, 53762, 2928, 19322, 44731,
                    9120, 22974, 51100, 48553, 62294, 63199, 20763, 5382, 18465, 18901, 12548,
                    10022, 56028, 16244, 9669, 48181, 9509, 30835, 46120, 57911, 42047, 831, 2898,
                    45462, 18104, 3849, 43064, 63549, 50179, 32631, 9473, 62641, 61487, 53746,
                    51999, 26268, 35895, 50248, 25364, 7762, 9668, 36186, 35147, 31511, 684, 50919,
                    5139, 40201, 15114, 36926, 25951, 15206, 56822, 12517, 17423, 22233, 40624,
                    45201, 47729, 30568, 23114, 27258, 58340, 17070, 12023, 46841, 7164, 25449,
                    32079, 65305, 63254, 63226, 7971, 32989, 42042, 45422, 63513, 31462, 12250,
                    30917, 24784, 38444, 31772, 35021, 10283, 12408, 36924, 6582, 60677, 50199,
                    894, 8593, 59585, 12766, 20020,
                ]))
                .unwrap(),
                c: 180,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2ea25cba8117cccb157ba87fae135ce7c9664164e9dcd6ef18bb0bac068b2d4a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_5() {
    let value = ComplexTestStruct {
        a: 23283,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            18483, 29026, 38069, 48164, 17418, 12521, 41392, 25184, 18692, 37690, 63055, 14440,
            17753, 19065, 14596, 55031, 43079, 28846, 59284, 55501, 30972, 37270, 61187, 47350,
            17190, 58159, 12954, 32122, 57852, 28912, 16187, 26695, 53193, 59891, 65426, 40778,
            63816, 32093, 59086, 38586, 5939, 57907, 44873, 44620, 64060, 57814, 60855, 34191,
            20549, 44740, 7974, 27397, 3237, 43493, 17244, 8347, 54782, 35280, 51977, 27761, 46352,
            49620, 16987, 24423, 53386, 58077, 30375, 14266, 65325, 34235, 23281, 4424, 63614,
            1398, 64361, 2930, 32803, 57336, 10316, 45895, 32190, 59305, 41692, 20841, 40889,
            59867, 50962, 14147, 51709, 59810, 39868, 4328, 36406, 43028, 48452, 56791, 5163,
            63020, 46371, 9780, 18302, 60260, 15493, 16110, 558, 59687, 29486, 31673, 9047, 32328,
            37263, 49000, 7374, 62590,
        ]))
        .unwrap(),
        c: 214,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            1, 81, 31, 80, 128, 181, 27, 185, 248, 146, 158, 155, 192, 103, 142, 139, 164, 222,
            200, 227, 97, 10, 144, 108, 157, 2, 169, 72, 78, 165, 202, 237, 133, 217, 122, 80, 109,
            31, 25, 216, 121, 206, 31, 20, 181, 93, 83, 21, 145, 31, 171, 67, 91, 205, 143, 96, 90,
            65, 239, 149, 65, 44, 168, 77, 241, 112, 73, 27, 77, 55, 204, 204, 142, 252, 238, 162,
            240, 220, 43, 114, 151, 30, 89, 235, 75, 205, 145, 111, 44, 114, 2, 147, 169, 154, 158,
            22, 56, 101, 120, 108, 44, 40, 69, 224, 238, 8, 175, 135, 89, 23, 97, 120, 44, 214, 15,
            221, 114, 249, 108, 66, 106, 179, 105, 123, 62, 177, 184, 17, 172, 112, 244, 185, 71,
            229, 216, 56, 157, 41, 128, 149, 191, 17, 183, 99, 116, 215, 146, 218, 66, 140, 72,
            166, 20,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 42946,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                21471, 15339, 4882, 47573, 63689, 8183, 35091, 33854, 41940, 37328, 30004, 46,
                39520, 50311, 2019, 19361, 30508, 15455, 56175, 16580, 26561, 9424, 11380, 30991,
                59904, 59351, 20741, 8092, 28568, 46740, 60735, 35372, 26709, 13410, 23177, 37215,
                52392, 54816, 26853, 14321, 3497, 21829, 33036, 41828, 48725, 44004, 25457, 20071,
                2832, 43006, 40076, 2831, 19795, 60767, 24095, 5464, 52362, 14626, 7906, 42281,
                33382, 37535, 9845, 50087, 51061, 16326, 2966, 18477, 31622, 22862, 53792, 59073,
                36607, 26508, 42679, 29438, 50147, 37839, 37789, 53749, 64892, 62089, 39303, 44226,
                64146, 12180, 50464, 34574, 25638, 59428, 44739, 45407, 55871, 17483, 47212, 23559,
                31276, 12088, 24447, 49736, 37119, 178, 37733, 13581, 44009, 42689, 26041, 61992,
                24926, 60496, 5190, 15508, 36716, 35107, 42640, 63819, 3139, 63830, 38695, 29625,
                1495, 4701, 12714, 26079, 14941, 50193, 48948, 8626, 2927, 60193, 5945, 9252,
                49455, 4491, 8887, 50812, 50950, 42731, 54203, 11022, 65374, 47568, 22996, 58943,
                50798, 47748, 44712, 61317, 14239, 14982, 25532, 15777, 18016, 46939, 36344, 41507,
                36395, 18903, 52701, 53037, 42966, 58023, 23187, 26511, 55852, 36291, 54467, 52751,
                65345, 23386, 26948, 837, 13627, 44343, 63452, 26625, 16973, 10977, 23075, 39897,
                53958, 35031, 51629, 24041, 25322, 65323, 62018, 31668, 51181, 17327, 50232, 10722,
                29459, 51347, 4304, 16115, 16914, 34935, 7618, 61680, 55410, 34603, 61463, 30787,
                15002, 38827, 47707, 22085, 21440, 64953, 64680, 4762, 65362, 13508, 63308, 38718,
                33205, 47217, 55917, 21394, 40123, 51619, 13265, 1655, 39793, 32247, 46747, 61114,
                48189, 2827, 35637, 39573, 14265, 26559, 55485, 6884, 28471, 22006, 5827, 56990,
                50066, 19927, 21504, 28651, 22878, 51866, 29949, 13774, 58907, 7674, 41774, 10103,
                7828, 33439, 33884, 52414, 1987, 36590, 15359, 21499, 51277, 17036, 51875, 39252,
                32361, 6432, 61861, 51531, 6703, 20282, 44149, 27813, 59030, 23429, 9187, 52354,
                36805, 60491, 51507, 2868, 60113, 29276, 42840, 12913, 22033, 33483, 27810, 48477,
                62416, 20777, 36435, 36355, 31295, 4141, 54671, 1240, 38977, 29878, 26934, 9969,
                12291, 19161, 4876, 9705, 36176, 536, 8148, 4995, 46685, 13858, 37184, 12446,
                15404, 15570, 55717, 46515, 49626, 39964, 12074, 4934, 54694, 38237, 48878, 11635,
                53165, 6718, 20766, 14820, 59830, 64076, 21346, 55729, 17710, 34569, 6860, 45893,
                13120, 4360, 55487, 20414, 48377, 37529, 60816, 59161, 51738, 62436, 16499, 36346,
                61626, 11312, 30079, 3908, 32685, 29800, 12319, 53079, 4783, 12951, 9381, 26404,
                46253, 7097, 13892, 58201, 29290, 20151, 13171, 5943, 48808, 7863, 27595, 6052,
                15836, 25578, 64201, 49565, 41764, 64021, 13416, 35879, 37380, 4152, 28870, 13809,
                36608, 43312, 45826, 38751, 30035, 20209, 1513, 15368, 52, 53582, 1634, 65265,
                23319, 61552, 44351, 64529, 7629, 8381, 55960, 17379, 33327, 8448, 58496, 55537,
                50325, 59683, 14943, 30774, 13494, 24729, 2253, 62366, 11658, 28156, 42344, 36493,
                30327, 9105, 45217, 56937, 46142, 27857, 22758, 2149, 46376, 37326, 36776, 55256,
                9566, 19126, 65431, 180, 32920, 39282, 31627, 1234, 14888, 32282, 23998, 31426,
                33643, 61080, 24568, 14367, 64932, 45654, 5, 26562, 8380, 38796, 31705, 4012,
                28955, 64850, 39336, 48006, 63871, 55211, 20911, 7738, 52893, 21033, 11005, 48726,
                28838, 62972, 12894, 987, 37916, 27690, 23552, 28446, 50146, 13232, 55186, 37230,
                37444, 23573, 18586, 48966, 36859, 10111, 63302, 4883, 58074, 8836, 50497, 60085,
                37125, 58548, 43025, 44626, 21106, 64120, 20408, 16007, 60461, 24878, 19496, 10742,
                63469, 19153, 49807, 64162, 6240, 40614, 14836, 37095, 51531, 28732, 38254, 34111,
                4801, 58014, 59475, 64322, 7434, 10306, 52732, 29774, 36313, 36946, 42500, 53889,
                63589, 14154, 20354, 50076, 44269, 22016, 61591, 35445, 60025, 26280, 14817, 33670,
                18803, 33951, 31132, 55781, 36044, 60000, 30597, 43379, 44867, 3720, 46920, 40112,
                42926, 25431, 32604, 62818, 58111, 24570, 26096, 61012, 15505, 43951, 25519, 23411,
                7418, 43737, 48034, 61324, 19722, 9646, 12812, 10140, 13080, 18517, 63701, 29981,
                47551, 18921, 50264, 38966, 56666, 3422, 50582, 46737, 26071, 48063, 61399, 27778,
                31715, 44789, 22740, 17824, 36595, 44829, 41886, 26313, 34706, 36220, 32710, 55364,
                60115, 10437, 7211, 29547, 14610, 24825, 43007, 21894, 48846, 40561, 37469, 54908,
                46762, 59989, 4442, 28636, 51371, 45360, 24808, 29620, 40473, 18907, 6612, 9928,
                39344, 9616, 15770, 57010, 14238, 34091, 23123, 9022, 62424, 1565, 34601, 28936,
                64277, 43487, 27144, 35399, 18155, 53100, 34713, 39842, 28753, 11949, 48775, 35585,
                10151, 42054, 15682, 28799, 40731, 42710, 34852, 21278, 35020, 1417, 3560, 63512,
                6320, 52618, 18648, 34719, 7477, 21595, 62500, 62043, 20086, 36801, 40530, 42115,
                28552, 56828, 35653, 40600, 60498, 26134, 32103, 6484, 35279, 9109, 34600, 30291,
                47320, 45590, 18939, 53431, 20916, 16399, 8768, 24243, 18736, 11885, 48902, 49270,
                62088, 52641, 28567, 29173, 46295, 21756, 23071, 42775, 38423, 19547, 54813, 195,
                4369, 51618, 7740, 35924, 14277, 25893, 62404, 52613, 18656, 65439, 4429, 48610,
                20695, 973, 50910, 37798, 24494, 60853, 21339, 11997, 59336, 60159, 32938, 61256,
                17650, 13239, 19863, 52072, 36424, 17566, 45213, 41180, 15657, 21407, 29689, 38001,
                20271, 45516, 41189, 35126, 20451, 17166, 54269, 19783, 37825, 33414, 46326, 18798,
                32797, 26179, 16184, 8377, 47574, 24652, 22196, 10970, 413, 23454, 10801, 61585,
                25724, 26688, 47203, 58044, 26066, 17483, 51713, 43792, 32016, 4633, 26837, 59405,
                53529, 20699, 20321, 44187, 51404, 2085, 597, 24249, 38146, 48587, 42722, 6065,
                51702, 43347, 38180, 17008, 60621, 9793, 31717, 51615, 19528, 8683, 14400, 16783,
                20228, 33069, 24397, 38745, 19647, 35035, 50954, 37156, 47476, 41210, 3413, 21037,
                27554, 14889, 1532, 35033, 62444, 36799, 2783, 838, 6099, 46651, 62123, 34504,
                23406, 54380, 13583, 33071, 14865, 18419, 11299, 26802, 17840, 17038, 46241, 43872,
                31433, 7732, 2345, 42567, 41807, 6265, 57057, 6051, 28148, 25652, 36473, 38887,
                1510, 28090, 52193, 44188, 35510, 51786, 51768, 65142, 61963, 14007, 1828, 27792,
                57811, 34088, 34844, 52454, 57232, 4213, 45150, 51313, 12770, 8662, 4778, 23208,
                45466, 38227, 51430, 43235, 7226, 9949, 37142, 44588, 5091, 56674, 50673, 101,
            ]))
            .unwrap(),
            c: 63,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 2, b: 4452037252625340317, c: 918540270 },
            FixedTestStruct { a: 66, b: 8050005114832850407, c: 2356466240 },
            FixedTestStruct { a: 55, b: 13195893135867135765, c: 3900659833 },
            FixedTestStruct { a: 34, b: 3797363610825604519, c: 2013508706 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 45923,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    56412, 1793, 61104, 19880, 61448, 56653, 41307, 2792, 29971, 23997, 60802,
                    51355, 51703, 55428, 36714, 4512, 18965, 6538, 12623, 30896, 49689, 15962,
                    47357, 46504, 47876, 5527, 58170, 28811, 26318, 45422, 63328, 58721, 56469,
                    63666, 38916, 32398, 45318, 13324, 36821, 60578, 19520, 57030, 25331, 62060,
                    60314, 2751, 55842, 11443, 16102, 13636, 22043, 53734, 53694, 14873, 11874,
                    59020, 47559, 57789, 9133, 43404, 34484, 55130, 56303, 23712, 52322, 64794,
                    51147, 27246, 44364, 40162, 38216, 51182, 26272, 52226, 64754, 49870, 35234,
                    48217, 34623, 38284, 26758, 11559, 53855, 19915, 25582, 34576, 57609, 22166,
                    28529, 8406, 36437, 22579, 31231, 17741, 21566, 33381, 45392, 59941, 47572,
                    9084, 47960, 16268, 54092, 48547, 48173, 47050, 58826, 57834, 60390, 21539,
                    30384, 27423, 28631, 17538, 1919, 11678, 40176, 12221, 57455, 3415, 64976,
                    7784, 13142, 5135, 10363, 35939, 55256, 36084, 32458, 56916, 47686, 13126,
                    35937, 13981, 48239, 39386, 17994, 12356, 32424, 41451, 40186, 47130, 1633,
                    12743, 31677, 2348, 27612, 51827, 33413, 63356, 36873, 50163, 59464, 26570,
                    13655, 58323, 8184, 65138, 23863, 51077, 59809, 56034, 28676, 24945, 49436,
                    53241, 44969, 29407, 18563, 39895, 6413, 39172, 31183, 22717, 38407, 14125,
                    16230, 4314, 56423, 65533, 53850, 7746, 40819, 13105, 6439, 58546, 33068,
                    35449, 55381, 60949, 12787, 44022, 22215, 26398, 26577, 1716, 38292, 16636,
                    51111, 17755, 49493, 13319, 12119, 47558, 14492, 23299, 29548, 36423, 44967,
                    18869, 32662, 47198, 58113, 1963, 22830, 19434, 10325, 26056, 9260, 29268,
                    62712, 51200, 16017, 41592, 2624, 39311, 1606, 40625, 54131, 14988, 12292,
                    51985, 43324, 37507, 9541, 36074, 52634, 44567, 28070, 39581, 38146, 14437,
                    50290, 40726, 59237, 36159, 42801, 52944, 44553, 61963, 15616, 54155, 57187,
                    3206, 57208, 63995, 42417, 41421, 15066, 21556, 39572, 3384, 50733, 49191,
                    54752, 54999, 14293, 48240, 8802, 48593, 31186, 63826, 53208, 23282, 14878,
                    41342, 49485, 42483, 49150, 53149, 35581, 9333, 4012, 39131, 16449, 37729,
                    33085, 57826, 40450, 51658, 11329, 11923, 47144, 62755, 7911, 33062, 22900,
                    5009, 50952, 19534, 3376, 6194, 11780, 1144, 38488, 1845, 26823, 22325, 37958,
                    2496, 64977, 7222, 48241, 30421, 14307, 62969, 1302, 26238, 4776, 46833, 50476,
                    38185, 50134, 56678, 11996, 27896, 16629, 4505, 52725, 11765, 36849, 31918,
                    28720, 35950, 63890, 58878, 44497, 5300, 51268, 4198, 684, 62950, 1547, 10981,
                    39085, 39614, 25165, 32453, 55547, 44661, 11817, 36840, 60803, 19879, 13658,
                    28470, 20998, 17194, 2865, 43762, 22654, 52015, 26238, 25520, 45790, 15056,
                    33898, 2334, 1000, 46533, 16232, 32456, 39076, 13816, 24479, 34018, 40077,
                    26717, 1616, 30018, 62745, 51080, 64661, 31437, 61329, 56305, 8017, 7852, 1116,
                    49128, 2608, 42887, 3825, 52467, 32047, 16697, 55063, 24078, 27588, 52664,
                    12973, 40564, 20274, 52527, 43345, 14030, 16870, 54646, 36576, 48234, 5826,
                    55013, 36907, 12870, 61223, 53567, 22395, 47737, 65446, 4073, 10489, 7907,
                    34836, 58056, 51491, 60814, 24937, 10756, 42219, 24107, 37621, 24232, 42496,
                    14847, 58538, 25681, 29941, 22502, 22979, 34881, 32187, 16254, 50572, 35610,
                    1393, 45764, 48415, 7024, 27130, 3832, 25356, 54457, 15552, 12775, 56882,
                    49252, 64698, 5033, 18586, 33923, 36894, 52083, 11860, 3362, 16465, 36764,
                    47012, 15220, 32358, 947, 7971, 15456, 27763, 36543, 13811, 37594, 54761, 2363,
                    22764, 54391, 64781, 50408, 16759, 38786, 10291, 54478, 7690, 61409, 50842,
                    31783, 33973, 34851, 3146, 26729, 36068, 13234, 65246, 62603, 59467, 21162,
                    16544, 20322, 25031, 22790, 12246, 2951, 19790, 37501, 37220, 24165, 7378,
                    39493, 16270, 8348, 5770, 57364, 7865, 27077, 2557, 52374, 34498, 36642, 62252,
                    1884, 25071, 38098, 44332, 34823, 47301, 43519, 48796, 37815, 42924,
                ]))
                .unwrap(),
                c: 111,
            },
            VarTestStruct {
                a: 39202,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    36073, 8703, 14534, 64305, 53457, 29141, 6537, 294, 55189, 61383, 11765, 11998,
                    3567, 1737, 24684, 169, 49141, 23410, 34481, 40491, 36983, 29196, 26295, 47744,
                    36336, 28684, 64967, 4406, 48422, 1675, 43516, 30238, 1670, 35241, 1543, 58139,
                    22033, 12138, 36107, 18875, 56198, 8796, 40617, 58996, 25208, 25255, 37993,
                    24515, 7204, 59780, 20815, 10031, 21314, 49948, 32631, 23055, 42546, 53627,
                    39514, 55372, 2441, 7809, 62982, 65532, 21494, 5155, 50622, 9372, 57134, 19934,
                    24239, 6328, 40351, 47426, 19361, 42924, 20650, 46081, 33070, 57884, 40873,
                    36835, 20886, 31848, 18752, 18589, 54545, 12648, 938, 30510, 9543, 20168,
                    59503, 48498, 42324, 31078, 11648, 30086, 11620, 17115, 64743, 60786, 47981,
                    18048, 3253, 62452, 52766, 52786, 41619, 9776, 28891, 1682, 54912, 59322,
                    28204, 15079, 15855, 5396, 49941, 16980, 35866, 35930, 8021, 22388, 40194,
                    21743,
                ]))
                .unwrap(),
                c: 107,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xfd4e05bd4a5888d4313babf3e7ce4b74c7660cdec611af2ccdd5f1d65a13d761");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_6() {
    let value = ComplexTestStruct {
        a: 32343,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            13118, 45070, 36699, 34426, 53562, 47965, 49426, 8279, 16168, 5347, 61069, 52341,
            32099, 63276, 31165, 51645, 3034, 39386, 11791, 22899, 22849, 33262, 22920, 48837,
            51427, 42360, 30638, 19984, 60587, 19317, 49654, 59834, 62933, 11291, 37749, 62099,
            62438, 19002, 4806, 44298, 32119, 13632, 33145, 3633, 19413, 60254, 28564, 34894,
            20214, 53435, 47842, 50325, 31787, 28932, 27805, 24174, 31376, 37456, 36981, 13874,
            26630, 9779, 12253, 24259, 60754, 27154, 62609, 64757, 3358, 47415, 64565, 19723,
            53161, 26018, 19433, 18927, 33639, 19459, 32975, 35798, 4395, 25466, 35857, 41950,
            51538, 15204, 63521, 64953, 26296, 63100, 10863, 14419, 13810, 28796, 17242, 11867,
            13365, 64098, 18375, 56141, 53959, 27113, 11270, 31369, 16624, 27887, 11158,
        ]))
        .unwrap(),
        c: 23,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            17, 135, 124, 93, 153, 229, 184, 111, 94, 97, 66, 86, 130, 127, 13, 221, 138, 239, 165,
            181, 140, 138, 19, 50, 92, 121, 150, 80, 207, 195, 195, 69, 161, 96, 243, 7, 182, 248,
            51, 169, 37, 169, 228, 149, 221, 217, 40, 237, 161, 165, 9, 177, 24, 160, 105, 121,
            246, 105, 237, 58, 117, 181, 202, 62, 13, 93, 12, 158, 222, 211, 145, 120, 174, 203,
            182, 4, 22, 112, 114, 34, 202, 36, 50, 212, 156, 108, 160, 107, 74, 228, 41, 34, 18,
            156, 202, 214, 44, 120, 102, 21, 199, 161, 62, 225, 225, 156, 50, 196, 71, 69, 41, 169,
            214, 112, 187, 106, 172, 42, 201, 0, 223, 100, 21, 48, 20, 171, 242,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 51150,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                25401, 12435, 64429, 4092, 27883, 28390, 33032, 4668, 7279, 56920, 5785, 24906,
                17070, 18396, 49464, 49600, 50923, 10600, 33756, 38149, 21778, 32591, 52915, 22860,
                20451, 46082, 20516, 42458, 2357, 38327, 50404, 27314, 63264, 57870, 57469, 30302,
                28872, 26097, 3694, 8998, 63552, 56273, 55784, 34375, 691, 11573, 10144, 46115,
                24406, 47019, 37406, 37440, 29021, 13206, 62481, 32155, 18048, 41130, 36245, 21864,
                18218, 58215, 28254, 33122, 26440,
            ]))
            .unwrap(),
            c: 228,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 178, b: 2680371033031428900, c: 4080843220 },
            FixedTestStruct { a: 9, b: 17471498240278285755, c: 2399459064 },
            FixedTestStruct { a: 4, b: 3380463200227305815, c: 1402115884 },
            FixedTestStruct { a: 14, b: 13368992170959406169, c: 571886682 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 42368,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    56662, 45608, 26502, 48845, 115, 19921, 44621, 5600, 9830, 49016, 33291, 8514,
                    52405, 2018, 27029, 36321, 14717, 52609, 55786, 57442, 41050, 56066, 62599,
                    47814, 13674, 27014, 26062, 15795, 21844, 50474, 31425, 5718, 18600, 29578,
                    27543, 56480, 2084, 25609, 3346, 11323, 64892, 33651, 48503, 44096, 63310,
                    7971, 53178, 25402, 8941, 60258, 42846, 57452, 34495, 33959, 57140, 45959,
                    39073, 42359, 52995, 8811, 49473, 59595, 15806, 34387, 38872, 23551, 11109,
                    37029, 54649, 7910, 5350, 40225, 52062, 49557, 59641, 35104, 1590, 12506, 1374,
                    17264, 7760, 7191, 10454, 58614, 11093, 33355, 17137, 25479, 52989, 48616,
                    7044, 19832, 29979, 1958, 19366, 54926, 27182, 12829, 57431, 58346, 4477,
                    23798, 37981, 45139, 58204, 28798, 21503, 33832, 5437, 1180, 16715, 47904,
                    62541, 60161, 55616, 14525, 41270, 1024, 53409, 13231, 50614, 48034, 59952,
                    57965, 16307, 22690, 3291, 64512, 55125, 26446, 36308, 35663, 56226, 5418,
                    39852, 15852, 5128, 5356, 5647, 9012, 9569, 41602, 21914, 46837, 23047, 39658,
                    3843, 7508, 64995, 47928, 5266, 42361, 53158, 57356, 58714, 41365, 23696,
                    22956, 57755, 4786, 2340, 51870, 13297, 26497, 32240, 48833, 51415, 61197,
                    31947, 37909, 21642, 47429, 17622, 63162, 8840, 53401, 39773, 24112, 42047,
                    52537, 10444, 16449, 64593, 62703, 49366, 26563, 14770, 39879, 28290, 35719,
                    57668, 52367, 56191, 8922, 51542, 2708, 29891, 60823, 12846, 5432, 57932,
                    40927, 2361, 26263, 22626, 13192, 49418, 48717, 11532, 29796, 44526, 59836,
                    63910, 4689, 1505, 15054, 13338, 47019, 30664, 31988, 18955, 39506, 5087,
                    63233, 33926, 57646, 31533, 36782, 34028, 20146, 64464, 62254, 54304, 35579,
                    39579, 57572, 20024, 37107, 64157, 30133, 14295, 45761, 34388, 57113, 10521,
                    46045, 14654, 46585, 63613, 12473, 10419, 40606, 61218, 61470, 63120, 24372,
                    46249, 61875, 17061, 35381, 40624, 32980, 59834, 44946, 14848, 19058, 59011,
                    4945, 28552, 57500, 33800, 32371, 53874, 62530, 37510, 49164, 2190, 57318,
                    32510, 48519, 19125, 35991, 37519, 54749, 18777, 63646, 58422, 9190, 5990,
                    33319, 36453, 24008, 61028, 48651, 13421, 61048, 30274, 39542, 9980, 41775,
                    54104, 43876, 7626, 11925, 2836, 8117, 34713, 60946, 20986, 33832, 15720,
                    15270, 58244, 33060, 46134, 33320, 47969, 2690, 2479, 30235, 37560, 43812,
                    25814, 55962, 42326, 48411, 12860, 43030, 24047, 32035, 47386, 16188, 15323,
                    17579, 54580, 45541, 12172, 56210, 40972, 48365, 2913, 64322, 44268, 63899,
                    45091, 13020, 21535, 44618, 16196, 60860, 18780, 30909, 37726, 23854, 9196,
                    18403, 46833, 51176, 57974, 24116, 1815, 25984, 57692, 6591, 59680, 11356,
                    52518, 10222, 21414, 62589, 27083, 55445, 65268, 49282, 32584, 52143, 47818,
                ]))
                .unwrap(),
                c: 225,
            },
            VarTestStruct {
                a: 33115,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    3728, 64349, 34303, 61415, 44515, 19738, 36960, 13078, 9560, 25024, 37541,
                    32625, 41533, 43929, 16782, 6315, 10022, 34116, 17224, 47095, 43216, 23780,
                    37087, 44743, 59211, 48291, 52677, 16326, 10432, 47573, 33551, 36363, 6217,
                    22373, 6482, 5739, 37867, 6330, 50427, 35477, 53711, 38864, 34681, 62823, 7141,
                    47001, 34490, 60680, 64803, 23574, 16860, 24014, 47457, 37738, 9398, 22680,
                    1112, 36095, 57678, 13673, 30265, 956, 26267, 45095, 3738, 30444, 9121, 39042,
                    15809, 52989, 30638, 27954, 19823, 15864, 4720, 43622, 4361, 16789, 43755,
                    6382, 34963, 63158, 41522, 4943, 57944, 1045, 14950, 19627, 1426, 25140, 15415,
                    63297, 16395, 34702, 19603, 36802, 9949, 36749, 41228, 23609, 44648, 31472,
                    56689, 38769, 42373, 28243, 21125, 55941, 17313, 6664, 17972, 46653, 42144,
                    61639, 19451, 32778, 47092, 15325, 25443, 9602, 39685, 22793, 36698, 52024,
                    64103, 20444, 5585, 2219, 37095, 42077, 3375, 11188, 27240, 57631, 23837,
                    34780, 20844, 63314, 14055, 6938, 13815, 49308, 61189, 17189, 17835, 30630,
                    2906, 44540, 22967, 37050, 11736, 42100, 13920, 63261, 51263, 55799, 54238,
                    54753, 37249, 34854, 38661, 38555, 12747, 13275, 52616, 16789, 52568, 33771,
                    19399, 10488, 22032, 62371, 21788, 9932, 54144, 27131, 3242, 54591, 47647,
                    13046, 29529, 13141, 13151, 65437, 479, 12807, 8406, 19308, 58331, 12475,
                    60877, 648, 47633, 54804, 53138, 32889, 14147, 49208, 62814, 28632, 16541,
                    28011, 29384, 46093, 25628, 4212, 1275, 34893, 33063, 15710, 28029, 21874,
                    32187, 860, 44718, 5406, 21494, 51195, 39418, 53687, 3242, 57475, 43017, 14479,
                    9464, 21638, 46818, 26768, 60783, 62698, 45868, 38771, 21489, 41619, 36701,
                    55099, 15797, 11487, 7063, 46591, 9249, 33310, 18093, 8741, 52420, 11068,
                    11526, 60206, 4998, 63015, 36848, 23591, 28844, 26898, 36240, 32994, 5319,
                    41353, 26402, 10342, 6770, 31168, 13710, 24788, 39775, 41401, 46666, 55851,
                    25958, 62625, 61587, 8989, 63624, 7883, 42031, 42898, 2138, 29944, 44939,
                    49024, 59647, 5306, 49764, 45165, 61638, 13884, 58920, 35065, 62325, 44582,
                    53512, 54047, 21337, 1998, 58010, 2841, 47024, 38382, 41438, 49362, 32615,
                    21462, 1642, 2187, 9092, 27384, 12294, 10445, 7218, 22469, 35836, 55663, 6571,
                    40260, 41264, 23161, 33451, 34821, 6888, 62809, 33787, 41880, 46602, 34014,
                    60750, 12491, 42309, 7828, 26426, 10640, 25648, 6457, 25594, 62075, 9356,
                    13269, 1458, 16363, 56556, 56932, 10572, 54897, 23365, 22665, 32193, 15204,
                    52616, 18619, 7329, 8740, 42315, 13963, 7157, 2387, 51959, 15415, 17911, 38192,
                    6210, 29163, 53606, 19958, 40624, 20612, 20536, 20650, 10215, 42039, 32701,
                    9840, 53687, 12919, 25413, 24217, 11144, 51161, 44924, 25047, 16772, 35831,
                    60723, 43200, 17714, 40628, 24307, 15922, 63598, 518, 19935, 50002, 59649,
                    33127, 50964, 32472, 34552, 52869, 45871, 64476, 2749, 18371, 61659, 4060,
                    15750, 2114, 35089, 7904, 31586, 54839, 13983, 10299, 58594, 56310, 21388,
                    7764, 25726, 63792, 37563, 50334, 35629, 32596, 64404, 40761, 50822, 53487,
                    218, 11457, 62680, 59808, 6329, 29782, 25436, 7336, 62178, 17478, 61419, 65325,
                    44191, 30048, 58349, 46880, 10909, 55045, 26538, 17437, 34657, 29113, 45580,
                    13831, 34004, 9692, 37147, 16086, 16226, 40707, 18063, 41603, 17459, 19073,
                    26070, 11990, 62242, 42024, 25124, 63881, 40618, 43700, 51045, 50416, 23397,
                    47943, 56472, 35909, 23410, 50852, 9601, 750, 31943, 57458, 16369, 31237,
                    41361, 13475, 41287, 63964, 42328, 63898, 52363, 42923, 56981, 27517, 29978,
                    56193, 39554, 15609, 55036, 7362, 38879, 3179, 4044, 11912, 63382, 14604,
                    17907, 40233, 53000, 28437, 24397, 43730, 7157, 51311, 44475, 60273, 20925,
                    3965, 10808, 55387, 21071, 7898, 11510, 15975, 9816, 64308, 23540, 63783,
                    54045, 10035, 49185, 24817, 54807, 3524, 42225, 53517, 44493, 55722, 25776,
                    26177, 43607, 65477, 40066, 6723, 40868, 17393, 26362, 21983, 48536, 13206,
                    9864, 45301, 64780, 35891, 12873, 14177, 50199, 55108,
                ]))
                .unwrap(),
                c: 5,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xbd149483bde62bcbc37fad5a43ea14579623cec6435387a0578d19bbb3f08503");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_7() {
    let value = ComplexTestStruct {
        a: 53455,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            28472, 20013, 10186, 52619, 37505, 32299, 35612, 7194, 25051, 43900, 20431, 58627,
            58768, 62735, 5933, 31418, 44215, 33743, 24127, 22392, 14672, 24741, 42508, 60128,
            50020, 53547, 64562, 26813, 64776, 17591, 5090, 61409, 25558, 27318, 50386, 62745, 521,
            57775, 44451, 31660, 55112, 31714, 21674, 48412, 21524, 1619, 61860, 31479, 37834,
            19947, 16131, 62554, 16291, 51959, 26042, 7931, 58821, 26949, 19690, 28748, 63858,
            39231, 20265, 15035, 2880, 6254, 51835, 32100, 52733, 30361, 15407, 39475, 29228,
            20494, 62922,
        ]))
        .unwrap(),
        c: 82,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            216, 93, 131, 94, 71, 198, 68, 104, 60, 77, 163, 102, 76, 7, 12, 254, 126, 213, 101,
            37, 75, 210, 146, 15, 32, 251, 193, 9, 42, 187, 115, 63, 136, 69, 215, 230, 67, 98, 83,
            96, 34, 164, 192, 24, 43, 122, 166, 250, 38, 1, 19, 123, 114, 234, 125, 11, 199, 237,
            131, 71, 197, 166, 4, 16, 41, 85, 63, 24, 189, 114, 88, 7, 223, 224, 63, 193, 78, 148,
            105, 69, 220, 56, 32, 78, 219, 58, 56, 245, 239, 253, 27, 71, 63, 209, 71, 66, 21, 232,
            223, 249, 190, 121, 255, 173, 143, 204, 114, 107, 233, 53, 189, 210, 239, 31, 211, 72,
            44, 47, 148, 71, 114, 29, 32, 114, 146, 0, 68, 166, 149, 216, 164, 108, 143, 44, 82,
            52, 104, 75, 153, 182, 141, 79, 11, 76, 35, 75, 119, 45, 163, 14, 229, 99, 121, 136,
            105, 217, 97, 255, 208, 84, 209, 210, 49, 143, 226, 251, 136, 41, 154, 77, 148, 29,
            197, 66, 206, 199, 73, 27, 74, 2, 20, 150, 87, 161, 206, 5, 228, 171, 46, 253, 246,
            154, 49, 40, 94, 156, 133, 62, 73, 27, 214, 25, 53, 168, 60, 87, 137, 104, 71, 98, 85,
            109, 36,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 54920,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                8283, 41162, 26131, 65481, 6861, 19735, 54259, 30296, 50181, 49063, 39620, 16660,
                38372, 6459, 43312, 31515, 59272, 7259, 64256, 24854, 11177, 56777, 15450, 28203,
                63054, 64693, 49598, 37319, 13387, 9246, 40913, 30771, 3264, 44803, 62582, 23541,
                44718, 34039, 42083, 303, 253, 33194, 40429, 54695, 9674, 12120, 49448, 25608,
                49721, 60824, 53598, 56004, 33545, 39773, 59495, 15350, 23979, 51627, 40387, 25073,
                34784, 61876, 57106, 51348, 28923, 41304, 10857, 50146, 65379, 30695, 17971, 41744,
                11146, 34990, 479, 52741, 6890, 31938, 39130, 2536, 19400, 21845, 21008, 30654,
                11337, 29341, 60894, 45192, 26002, 9569, 54625, 10406, 45140, 64176, 51767, 26635,
                1122, 11798, 58056, 25133, 57236, 64479, 64437, 5302, 17830, 20249, 49475, 62507,
                1795, 15734, 500, 33544, 59497, 5496, 3368, 11549, 7228, 55517, 29253, 20634,
                53393, 10906, 11293, 36718, 317, 60715, 28315, 18621, 43582, 64973, 31663, 58821,
                15268, 61881, 14365, 12810, 42708, 51000, 37963, 4864, 61957, 13079, 59497, 56703,
                55835, 40235, 27024, 17929, 1511, 56539, 37467, 21711, 64844, 28363, 44905, 41421,
                44516, 62254, 54502, 51479, 29761, 64230, 50596, 13109, 21224, 26807, 12448, 43495,
                60388, 59715, 473, 36658, 49627, 30353, 56362, 9880, 9633, 19766, 62295, 30356,
                31539, 23876, 64274, 20158, 47999, 13805, 63364, 1003, 60748, 20622, 434, 9671,
                51617, 6670, 25108, 25448, 54252, 10992, 26174, 15946, 39405, 26233, 10029, 6884,
                22168, 63607, 10426, 59256, 23770, 24589, 9388, 57735, 38410, 6536, 55379, 53875,
                60650, 2470, 59633, 41118, 44739, 15034, 40804, 65394, 41152, 8352, 54576, 39269,
                55190, 50381, 36079, 62403, 54174, 53182, 15299, 60549, 22194, 22613, 62418, 23254,
                49169, 60338, 20867, 12336, 48695, 42542, 63685, 60822, 17256, 53642, 32927, 52750,
                63579, 48217, 52827, 8942, 1820, 53705, 38661, 46378, 22593, 45865, 5546, 59305,
                32426, 41477, 39242, 46610, 30368, 11897, 27846, 2935, 57576, 30339, 6867, 50591,
                59892, 46091, 27934, 29857, 40968, 14152, 34791, 18667, 28592, 63015, 5117, 37517,
                28058, 49615, 41789, 31123, 49393, 38631, 47365, 60174, 12964, 61246, 45455, 57146,
                65109, 9377, 65349, 25623, 39940, 5182, 19212, 13028, 38051, 43591, 31201, 19227,
                41021, 26111, 35711, 62505, 18766, 29094, 34824, 11222, 43928, 34425, 5123, 45548,
                59900, 35932, 11515, 15753, 49829, 38431, 18619, 63220, 62040, 6111, 16210, 4041,
                40369, 54872, 2832, 1421, 8037, 57206, 65520, 11245, 32220, 43416, 34493, 39888,
                27635, 28942, 40642, 8084, 21367, 8160, 30884, 15410, 21259, 46394, 48598, 31984,
                49363, 42888, 30141, 40299, 11737, 33312, 29661, 28618, 21502, 14733, 53935, 19345,
                47585, 7586, 43724, 55831, 12080, 28193, 6653, 8308, 40106, 7425, 63203, 47731,
                41340, 26308, 45329, 48025, 51108, 47007, 47731, 63782, 53350, 4015, 38980, 34920,
                48449, 31705, 1488, 22457, 23347, 16992, 56681, 14429, 33527, 12765, 20151, 46112,
                1421, 62834, 22748, 59314, 11327, 2312, 58302, 63363, 3265, 21926, 40114, 55177,
                60244, 37620, 61488, 10287, 460, 29068, 60999, 713, 16091, 15827, 41058, 1319,
                47520, 5215, 40565, 1972, 1914, 30861, 19560, 2811, 59072, 29824, 44862, 213,
                24992, 20911, 37795, 26367, 53655, 60881, 7032, 28945, 60539, 56890, 62146, 44351,
                6870, 20189, 63384, 32285, 57301, 648, 563, 58096, 56614, 58411, 62965, 36263,
                29863, 53991, 55456, 32311, 1858, 6415, 54413, 5093, 41786, 44133, 14979, 64800,
                20978, 3362, 51659, 13409, 19106, 35229, 14345, 59318, 19729, 27374, 24663, 55933,
                50009, 35921, 63536, 22827, 47812, 3723, 54976, 46414, 58598, 11684, 45054, 812,
                62649, 20744, 37795, 8765, 35736, 58821, 62209, 43607, 21883, 60853, 63978, 30960,
                14803, 28167, 54300, 5881, 42380, 39608, 15000, 23000, 18951, 63061, 29707, 51018,
                14327, 18279, 3314, 21816, 32286, 29796, 7826, 44839, 39968, 37867, 18933, 31217,
                10616, 59625, 52633, 48450, 30414, 24235, 55644, 34702, 59985, 48635, 22363, 24614,
                64551, 42264, 18409, 33734, 33026, 27273, 45394, 6127, 42392, 45504, 34704, 23929,
                48967, 58934, 14363, 25931, 47902, 10533, 43411, 50746, 57932, 51160, 31082, 35878,
                30010, 56605, 19720, 44354, 39172, 39200, 57353, 11481, 58175, 21891, 59976, 43980,
                50141, 58864, 10561, 47808, 11169, 15212, 27778, 37923, 5259, 57695, 33586, 39994,
                32675, 36275, 8804, 39037, 14981, 12489, 17535, 8063, 48736, 3439, 22024, 20693,
                59623, 43521, 58628, 3481, 57705, 39685, 2332, 55301, 54418, 1314, 9560, 28195,
                56031, 37832, 39137, 11587, 35239, 20294, 4100, 48208, 61011, 10064, 60853, 47593,
                45743, 58509, 3262, 19525, 33613, 24319, 25901, 4039, 28446, 5427, 4414, 43548,
                26445, 9292, 12857, 46585, 33407, 3372, 42337, 57182, 32368, 47528, 30472, 63534,
                28991, 48686, 47536, 20132, 49451, 53621, 58534, 49758, 45621, 37990, 29719, 60278,
                28229, 43190, 32291, 21405, 55830, 3506, 6235, 9749, 33643, 53436, 28877, 35078,
                35442, 59688, 21100, 2558, 4565, 4518, 56115, 52624, 33536, 56474, 42358, 63979,
                53034, 56954, 49361, 53202, 18731, 40197, 61169, 10501, 10314, 11434, 64521, 23494,
                48190, 62191, 8719, 61871, 52371,
            ]))
            .unwrap(),
            c: 16,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 205, b: 13598451451356812721, c: 2959517131 },
            FixedTestStruct { a: 250, b: 7415187047605175804, c: 50280314 },
            FixedTestStruct { a: 231, b: 11985158951620431323, c: 1940656852 },
            FixedTestStruct { a: 2, b: 16981781429297261864, c: 4168412063 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 28537,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    43425, 24290, 51422, 42353, 22866, 15031, 20485, 18453, 16848, 18829, 55314,
                    15976, 46459, 61304, 51311, 29694, 44125, 8044, 35035, 19778, 28952, 6615,
                    56411, 7175, 14170, 43580, 37804, 64459, 38963, 47485, 34326, 43429, 63311,
                    26647, 51254, 59880, 2699, 92, 20450, 40570, 9076, 20341, 23477, 26050, 59964,
                    16179, 24878, 55637, 444, 46119, 31445, 47989, 27081, 1149, 28156, 32773,
                    41560, 17593, 45182, 6245, 43914, 64624, 44185, 51507, 62888, 30346, 46118,
                    46020, 29434, 54053, 47382, 5611, 38004, 52540, 44300, 60777, 60559, 26005,
                    5822, 10987, 30633, 20032, 53531, 9222, 16509, 14044, 43208, 58186, 59793,
                    54138, 50848, 44015, 52862, 61238, 36472, 154, 5098, 48827, 18839, 4924, 35578,
                    3152, 60672, 31754, 41505, 3816, 63901, 11147, 48009, 62726, 20766, 15846,
                    22382, 31535, 53123, 44009, 30832, 30365, 34949, 62007, 23094, 6962, 56549,
                    19702, 36142, 38995, 46783, 60666, 52898, 23448, 50759, 38035, 54340, 41776,
                    24211, 37750, 9620, 56156, 292, 23204, 40343, 41425, 56262, 53892, 33710, 8284,
                    48961, 2982, 59758, 25438, 22503, 8668, 26619, 50730, 8356, 61977, 55866,
                    48502, 61645, 48798, 40415, 13102, 35196, 56779, 46796, 37731, 38928, 16588,
                    46582, 64290, 26751, 37435, 43258, 21538, 28089, 50485, 13346, 14907, 41361,
                    49869, 446, 45538, 19715, 58516, 12783, 42204, 60856, 21829, 42133, 23028,
                    50730, 60035, 29839, 54733, 2446, 52922, 29019, 28126, 35436, 15589, 10542,
                    6667, 36915, 20564, 15057, 748, 13660, 35382, 60195, 24555, 17869, 42435,
                    22765, 39650, 48393, 23203, 29556, 7801, 24232, 58274, 34912, 21357, 12457,
                    4176, 11276, 1730, 26876, 9354, 15954, 24433, 4468, 9397, 46989, 26769, 38163,
                    1774, 40930, 51365, 64538, 33629, 7654, 34424, 28960, 30428, 28594, 55354,
                    40616, 62455, 38894, 49024, 49755, 52650, 64992, 18342, 35023, 17667, 56484,
                    16755, 30750, 61882, 24585, 10795, 14801, 16912, 45508, 7085, 60466, 24257,
                    1990, 5862, 47479, 55970, 45775, 7162, 8156, 17371, 30187, 54202, 11823, 15573,
                    12840, 13243, 1263, 12431, 23496, 52000, 5924, 41551, 13669, 60239, 7403,
                    49895, 35116, 25207, 20887, 33668, 351, 18018, 35552, 14323, 35509, 3710,
                    22654, 40471, 63934, 27502, 26718, 55112, 37246, 10938, 7343, 6719, 58233,
                    6144, 23089, 3383, 39228, 35848, 5146, 27867, 24716, 8081, 62689, 48306, 16648,
                    11995, 25175, 6134, 57069, 10630, 18399, 44701, 15617, 43504, 23610, 61950,
                    49021, 40170, 50765, 6994, 5897, 21505, 7080, 39266, 9212, 39982, 2058, 54074,
                    56410, 12051, 52108, 50253, 62569, 56769, 7572, 49160, 65266, 15642, 50500,
                    9711, 53998, 52967, 34476, 4076, 10437, 44165, 14942, 9033, 42939, 46803,
                    23362, 31786, 17198, 40797, 44524, 7307, 22751, 20620, 44264, 46853, 29253,
                    5124, 10033, 40243, 13321, 35051, 24615, 65102, 48524, 29313, 21855, 6955,
                    57862, 25714, 63063, 40738, 2696, 20443, 31963, 4760, 46377, 13862, 26352,
                    55527, 4045, 4013, 39291, 39960, 38643, 6271, 20501, 57354, 50070, 48143,
                    35483, 2625, 18932, 62188, 49636, 27722, 19199, 40995, 41767, 59123, 55110,
                    9584, 61617, 7846, 15898, 23996, 57750, 1512, 64979, 17410, 59138, 9553, 63487,
                    17382, 32126, 47643, 13004, 2282, 55422, 41408, 27874, 16605, 60021, 24806,
                    32930, 52065, 15198, 13726, 302, 12443, 32347, 28698, 52619, 5587, 326, 33090,
                    35413, 26051, 3006, 25128, 50129, 54008, 28425, 2877, 36428, 48780, 60133,
                    15346, 46743, 33084, 23717, 31273, 145, 8481, 40321, 61538, 7903, 23905, 3678,
                    19559, 43084, 25933, 32461, 24788, 60754, 42195, 48135, 50846, 3150, 60911,
                    60267, 4193, 44024, 29327, 5276, 25871, 51173, 47643, 42755, 51981, 51647,
                    24232, 40874, 28027, 19657, 17143, 57219, 30483, 5485, 33844, 31562, 44934,
                    58892, 54240, 52207, 46513, 12510, 55911, 32133, 42371, 1570, 43230, 39269,
                    59613, 7561, 33556, 48104, 51193, 6208, 33674, 42273, 64503, 12609, 30434,
                    45199, 45715, 5369, 31255, 16260, 23577, 21081, 41769, 65054, 44312, 2278,
                    45485, 29238, 46249, 4442, 23, 19035, 9001, 45808, 13986, 9503, 5633, 31185,
                    63181, 42369, 6926, 9197, 11428, 55738, 10686, 13854, 7202, 41715, 51414,
                    51879, 61711, 6789, 36978, 23222, 56855, 11279, 22418, 9096, 58281, 54899,
                    19764, 6689, 27108, 35723, 33393, 58956, 30927, 62578, 59410, 24544, 34094,
                    53415, 23775, 26535, 35658, 18147, 18846, 46321, 60892, 18435, 46527, 7389,
                    60259, 48294, 38834, 3878, 45532, 5838, 18234, 49174, 8902, 51493, 1108, 5697,
                    49762, 54584, 37340, 19637, 51706, 23267, 27122, 36282, 5724, 10761, 10114,
                    51996, 61053, 3367, 63987, 64494, 60026, 38466, 51491, 8074, 52960, 13399,
                    13761, 32242, 22227, 16632, 10335, 64171, 63708, 39334, 13945, 50422, 41502,
                    23900, 33459, 20576, 63075, 36813, 53171, 1333, 21498, 44793, 16899, 34376,
                    41310, 61478, 43000, 44470, 35030, 21815, 60644, 17191, 49679, 55916, 55568,
                    20525, 16873, 55669, 46990, 20812, 21004, 47358, 28886, 24033, 53541, 38799,
                    40500, 33655, 28096, 19909, 22163, 58646, 1438, 19300, 45486, 15625, 4736,
                    52773, 8107, 44256, 23959, 29712, 34987, 32629, 61777, 10508, 47024, 47918,
                    62358, 32627, 60016, 61360, 18965, 34356, 15046, 59209, 46025, 24213, 5276,
                    56640, 63413, 7075, 41930, 40904, 13720, 60923, 49987, 52362, 44754, 40574,
                    14916, 53222, 22851, 26119, 25511, 64407, 8873, 16445, 55026, 50617, 44097,
                    18296, 8616, 17153, 47006, 20239, 53120, 17559, 42213, 23768, 965, 637, 59104,
                    32621, 6789, 5483, 49873, 32512, 22719, 21796, 19625, 63377, 1799, 41088, 2557,
                    44854, 20722, 36933, 15858, 14400, 31235, 51052, 53327, 29495, 57904, 4146,
                    18932, 25232, 13048, 29972, 22835, 31974, 20172, 32863, 44026, 50882, 3174,
                    43562, 30254, 47240, 20351, 58500, 41491, 36623, 2362, 40284, 49440, 12485,
                    35880, 3318, 9420, 50502, 54568, 51929, 37002, 6223, 27443, 7160, 37082, 36452,
                    8342, 53248, 64760, 26304, 58672, 22861, 42074, 21767, 40528, 3973, 40099,
                    37381, 1098, 64995, 48112, 35327, 7428, 13163, 59637, 21473, 5847, 51703,
                    47236, 43554, 26323, 5479, 6095, 52918, 24954, 41134, 12702, 8985, 30564,
                    16947, 55126, 27833, 63325, 2381, 50245, 49979, 24505, 40592, 10815, 58175,
                    60050, 29763, 29871, 5196, 31350, 56428, 1983, 52875, 34927, 55670, 7069, 8308,
                    53370, 19041, 20822, 14713, 20985, 30094, 54457, 36120, 23191, 6346, 10603,
                    55737, 7683, 13077, 62699, 9603, 26704, 52537, 35149, 32458, 33447, 41441,
                    11186, 43736, 8700, 19915, 24944, 15963, 27004, 19561, 25786, 25900, 45268,
                    19239, 63365, 5373, 47282, 40030, 13747,
                ]))
                .unwrap(),
                c: 229,
            },
            VarTestStruct {
                a: 47686,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    40267, 31428, 17353, 42307, 59572, 48716, 64787, 35482, 21563, 14860, 51825,
                    20973, 424, 19890, 26870, 39007, 60289, 17668, 22052, 36549, 45400, 35605,
                    58181, 40307, 12062, 34867, 43943, 44128, 23797, 48770, 43726, 12974, 52184,
                    34142, 26983, 48965, 47657, 17828, 12295, 1104, 35640, 3687, 43993, 16928,
                    30854, 37888, 52097, 5540, 27351, 19547, 38977, 53008, 35634, 50688, 59133,
                    31620, 62563, 50071, 63584, 743, 59929, 31910, 53142, 33817, 6879, 30309,
                    33065, 17363, 39592, 21915, 24753, 19689, 61386, 43691, 55542, 25364, 24761,
                    55837, 37774, 10253, 50414, 3909, 28594, 7191, 32780, 58341, 37931, 54503,
                    33232, 49745, 32208, 19257, 59506, 50483, 27643, 42473, 5883, 63100, 25377,
                    38309, 64931, 41988, 59618, 12505, 11426, 12564, 49033, 59160, 54071, 60819,
                    7716, 7965, 39124, 62484, 39276, 57449, 7320, 54267, 23912, 63484, 8827, 11782,
                    13847, 35208, 57374, 40244, 53328, 2791, 51985, 55447, 37924, 3487, 30267,
                    22529, 42413, 47235, 10845, 40887, 20408, 37661, 62626, 37899, 4384, 40353,
                    34220, 25634, 39265, 56634, 1459, 1570, 27098, 6472, 1521, 44826, 38003, 11888,
                    290, 3893, 46645, 6929, 45005, 14656, 56210, 33419, 50641, 12383, 31466, 21994,
                    53378, 9261, 6666, 17491, 21735, 59633, 49822, 62999, 31824, 39411, 36362,
                    14832, 2760, 54476, 8641, 22518, 42102, 29029, 27163, 16146, 35874, 13886,
                    51784, 46204, 18791, 57909, 18012, 43519, 54259, 5894, 11495, 51486, 8181,
                    30073, 8477, 29121, 39068, 24490, 4986, 33786, 31575, 23403, 50161, 59485,
                    48904, 36212, 33666, 61527, 2129, 53555, 52529, 5486, 51562, 4534, 26341,
                    18072, 13459, 47209, 64277, 46346, 16919, 41742, 29508, 19053, 15901, 22319,
                    9651, 58641, 43175, 6736, 13543, 13832, 19637, 27437, 40663, 28975, 18028,
                    28632, 19, 48466, 23844, 56296, 29125, 21254, 2055, 61565, 46985, 16810, 29883,
                    43175, 2753, 48443, 18148, 45216, 31089, 6453, 60974, 47934, 58200, 43513,
                    5024, 23323, 45869, 31548, 55228, 33247, 2087, 25225, 59264, 10405, 39972,
                    6279, 44086, 12349, 2246, 31668, 15361, 60930, 57918, 57074, 20872, 53649,
                    11262, 2039, 25103, 16081, 55513, 46032, 16810, 4748, 65174, 31704, 9373, 7664,
                    36837, 13405, 3525, 47929, 1416, 13455, 16190, 34764, 42627, 63174, 13088,
                    22210, 40794, 61543, 61524, 57256, 32549, 45568, 4062, 45423, 13111, 3579,
                    37883, 33359, 19437, 11782, 39242, 14842, 36, 63841, 58760, 54662, 41654, 1756,
                    30565, 55932, 52561, 28043, 1995, 50837, 37274, 16168, 64154, 30158, 41983,
                    3043, 50605, 26286, 29390, 54470, 34069, 27565, 32945, 427, 55389, 49559,
                    51033, 15133, 59704, 37912, 35763, 16790, 25796, 47492, 21405, 60196, 11838,
                    58016, 43593, 55325, 17311, 64123, 18505, 16890, 9045, 50807, 48381, 41519,
                    62549, 33546, 28863, 48237, 44386, 42213, 45075, 11179, 52764, 33269, 4414,
                    35782, 53930, 840, 6103, 29647, 56460, 23363, 16249, 7406, 50938, 34251, 12539,
                    20227, 51622, 62870, 16303, 36646, 51911, 61992, 31580, 8881, 50427, 11347,
                    50302, 36261, 36170, 39729, 13501, 13163, 25482, 28153, 16734, 50238, 21442,
                    55785, 27238, 8812, 3676, 41568, 12450, 26456, 25268, 8872, 17507, 46981, 5227,
                    19553, 34279, 694, 38775, 46180, 59660, 51011, 42880, 8566, 65281, 29255, 5309,
                    29962, 47485, 46229, 21434, 30944, 21652, 49461, 42476, 13200, 49168, 11274,
                    52182, 15387, 8611, 4888, 21400, 52125, 24220, 14083, 37632, 31470, 53919,
                    23707, 39502, 50622, 52863, 28792, 58321, 60284, 44856, 20709, 13444, 4659,
                    640, 53293, 21235, 44075, 56440, 51231, 13946, 64401, 38305, 15262, 55431,
                    37273, 14882, 42986, 7366, 25842, 32782, 4161, 28804, 23872, 23495, 29135,
                    2136, 54160, 24172, 19533, 55912, 40296, 15572, 48253, 29676, 41192, 13743,
                    43051, 35059, 2203, 5676, 17844, 22810, 10115, 62456, 60125, 9656, 3296, 22941,
                    40532, 13693, 47128, 58293, 36504, 39152, 9489, 23967, 37675, 10542, 459,
                    59701, 22715, 58997, 24572, 57156, 60140, 20937, 36530, 50545, 61567, 20801,
                    30020, 58679, 64206, 51749, 58047, 59614, 41057, 32949, 62282, 47477, 18262,
                    3741, 38454, 17946, 36908, 35656, 42445, 55570, 49469, 33066, 21053, 22443,
                    35801, 6501, 53516, 23709, 40976, 57983, 27207, 22655, 62207, 38148, 52511,
                    34650, 48422, 11531, 25474, 43062, 18927, 59331, 14694, 38814, 30037, 60319,
                    47484, 7509, 26395, 10886, 47632, 63818, 7091, 33298, 3361, 13284, 37484,
                    38433, 16929, 16744, 42972, 15286, 59004, 64424, 10820, 6975, 46943, 32406,
                    22980, 7929, 27069, 13481, 19937, 1175, 63733, 30579, 3254, 49131, 27448, 973,
                    28039, 58260, 2315, 46817, 61465, 57458, 27082, 34919, 46292, 9477, 37395,
                    54895, 13989, 58344, 33234, 48514, 10013, 23372, 39777, 48969, 51859, 5022,
                    65476, 51005, 55333, 59413, 1594, 51943, 45907, 41983, 55906, 6664, 30701,
                    35013, 22727, 1121, 25600, 9544, 57605, 26200, 45663, 17555, 636, 14101, 56741,
                    43836, 64905, 18905, 18406, 4450, 3681, 50139, 40001, 14933, 13861, 43235,
                    15683, 38294, 41783, 34361, 17712, 30821, 55965, 27741, 44427, 29675, 11624,
                    46932, 4788, 61259, 32422, 61249, 37116, 27512, 47066, 7206, 43574, 18970,
                    24049, 4267, 37442, 30966, 42196, 27359, 1052, 39421, 37799, 44276, 3249,
                    23107, 48774, 10703, 3652, 51266, 4988, 4789, 64548, 6791, 54506, 61965, 2233,
                    16133, 20833, 31894, 55185, 55553, 58900, 42265, 23982, 4563, 9293, 26629, 175,
                    18796, 57239, 34187, 65291, 31608, 65093, 59280, 58233, 12792, 62070, 55343,
                    54841, 28314, 33215, 12105, 28290, 32337, 33529, 7153, 27806, 25534, 11519,
                    43036, 25074, 4278, 2409, 22954, 8587, 32472, 52640, 6566, 62003, 19574,
                ]))
                .unwrap(),
                c: 125,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x774e0245882bec129d09f588f961cf712bde706bc4f255b228551eed4879879a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_8() {
    let value = ComplexTestStruct {
        a: 2705,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([34403, 7858, 29371, 4245])).unwrap(),
        c: 5,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            197, 152, 96, 213, 71, 48, 123, 190, 41, 175, 13, 2, 9, 167, 133, 88, 241, 182, 28,
            157, 215, 82, 183, 162, 208, 125, 118, 105, 101, 116, 28, 94, 191, 162, 53, 191, 76,
            240, 41, 228, 13, 12, 158, 133, 187, 56, 69, 146, 155, 59, 194, 85, 90, 90, 119, 78,
            199, 150, 164, 168, 232, 127, 137, 163, 124, 62, 234, 133, 206, 104, 84, 183, 160, 31,
            135, 248, 15, 250, 148, 40, 46, 35, 178, 189, 101, 49, 49, 147, 102, 113,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 31157,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                27712, 62894, 3258, 61915, 36620, 10031, 27272, 61799, 8814, 53997, 44344, 31313,
                59839, 32067, 8877, 36514, 1579, 39593, 63869, 47571, 30967, 35198, 6489, 65142,
                53689, 16119, 9916, 6266, 55591, 14983, 63411, 44117, 46988, 37220, 10898, 6399,
                9425, 371, 53523, 52493, 10171, 63986, 24601, 12618, 21622, 30756, 22168, 15632,
                37784, 18170, 26423, 29787, 31163, 43433, 48707, 47147, 64074, 3595, 18289, 29680,
                8419, 46213, 9998, 40845, 19543, 2063, 26780, 39261, 36867, 11861, 22532, 482,
                46275, 61127, 12792, 64281, 45927, 16765, 47884, 30879, 6136, 3592, 26929, 53918,
                2055, 52446, 4127, 22016, 10513, 55797, 54, 55962, 24550, 4122, 216, 8272, 26033,
                60761, 58435, 14927, 64092, 41186, 5820, 6599, 7607, 2843, 21510, 46932, 36564,
                1599, 1444, 48375, 23107, 27101, 32863, 59425, 55645, 41071, 54991, 39762, 27985,
                13617, 45825, 63510, 44876, 43027, 58745, 34335, 52176, 26016, 1029, 53235, 65506,
                24985, 49690, 55491, 6797, 5299, 56649, 49954, 13467, 37772, 61019, 9905, 41585,
                41587, 53789, 36033, 40085, 34009, 19870, 39740, 2791, 16242, 65226, 602, 3657,
                8774, 19785, 11033, 17321, 12743, 16813, 31986, 32454, 50437, 21549, 19129, 10769,
                18028, 25901, 47037, 15697, 52271, 39208, 11650, 24131, 51286, 22109, 27380, 38143,
                9664, 62877, 41423, 48176, 65245, 59433, 64131, 17601, 17491, 33769, 31239, 25953,
                40006, 40665, 19539, 29898, 54577, 28794, 2709, 20549, 23365, 48767, 34030, 28172,
                38739, 23497, 12497, 669, 47382, 55701, 54381, 28408, 25532, 12994, 25510, 59802,
                9767, 505, 4616, 37770, 59717, 17412, 64799, 24562, 3508, 53786, 39485, 9473,
                50327, 24863, 26667, 54354, 40963, 21436, 49367, 51215, 29704, 44704, 42663, 49150,
                46704, 31256, 53842, 51288, 37099, 42215, 62083, 9475, 49879, 18005, 3423, 6405,
                43997, 48786, 39755, 59538, 49695, 566, 10618, 58216, 37762, 32930, 31347, 35431,
                35734, 19275, 61864, 40299, 22981, 45058, 20344, 27995, 40134, 20744, 16250, 13836,
                63918, 26514, 16127, 57742, 24253, 27644, 30344, 14128, 27285, 31750, 46578, 54105,
                57571, 43485, 744, 1344, 32473, 47440, 11194, 63789, 51406, 37376, 38249, 60165,
                33154, 64174, 55216, 40772, 54694, 57064, 284, 15090, 37949, 2419, 36394, 51863,
                14377, 9930, 63924, 1052, 56672, 4452, 64521, 35049, 20321, 53698, 49928, 57477,
                32623, 9402, 19536, 53550, 14402, 43887, 12704, 16647, 12655, 36204, 30889, 63009,
                36953, 1485, 13796, 875, 40454, 39755, 40840, 7957, 39865, 45197, 4950, 28755,
                19609, 30717, 23519, 3819, 32042, 54189, 36262, 37283, 15891, 3286, 62776, 11998,
                17403, 36926, 19911, 60940, 9910, 51730, 3767, 10296, 24414, 56319, 7900, 46969,
                48170, 42937, 37053, 29988, 49978, 21348, 64806, 13650, 18850, 28151, 26745, 44992,
                38448, 26489, 12891, 45319, 44674, 43692, 57120, 19420, 33502, 9583, 4622, 3966,
                60405, 55604, 34205, 47241, 48704, 1772, 60046, 44520, 25522, 59273, 36522, 14925,
                57471, 63734, 55845, 30341, 59600, 51103, 53358, 18418, 56002, 50120, 31911, 10790,
                6392, 39406, 35062, 28372, 10200, 46607, 31134, 12304, 46082, 53730, 39084, 41180,
            ]))
            .unwrap(),
            c: 245,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 198, b: 8697238107920155818, c: 2111712138 },
            FixedTestStruct { a: 6, b: 10828161224945163819, c: 4293767945 },
            FixedTestStruct { a: 150, b: 12995284819202657177, c: 2459526207 },
            FixedTestStruct { a: 226, b: 12684365970593067108, c: 606970642 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 57030,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    17368, 27359, 8183, 63700, 54447, 37258, 57595, 9096, 14902, 15307, 8741,
                    16621, 58994, 1369, 31570, 41231, 16509, 6600, 56084, 4450, 61175, 38060, 4368,
                    58038, 54135, 65228, 25430, 806, 7033, 19718, 30101, 6933, 2221, 50978, 30529,
                    2193, 45313, 57662, 652, 37020, 59376, 27213, 50937, 10268, 8609, 20900, 24889,
                    28719, 5879, 14513, 57465, 5374, 2823, 27087, 42850, 25851, 61560, 16171,
                    25982, 39997, 36675, 60395, 29687, 40106, 64568, 51429, 34490, 29992, 21561,
                    52621, 31677, 18428, 7431, 26422, 45849, 17659, 11694, 26558, 36585, 56251,
                    2283, 38890, 22496, 6409, 39061, 63410, 3333, 22112, 3774, 3153, 65192, 31578,
                    20841, 1011, 56551, 55765, 57694, 16588, 21882, 51592, 64066, 61181, 42182,
                    52872, 42491, 16147, 33742, 12923, 25318, 25964, 52728, 47839, 10450, 8881,
                    51682, 31438, 1864, 51725, 6773, 50158, 37906, 36402, 27740, 18169, 62647,
                    27752, 39858, 31304, 2140, 46753, 8022, 53839, 28735, 22576, 55301, 57556,
                    48592, 31738, 657, 62869, 47835, 61722, 9607, 61296, 5815, 13471, 49662, 35481,
                    30600, 24824, 33743, 50959, 60611, 32000, 7011, 29471, 189, 39699, 62663,
                    53365, 31214, 27133, 42428, 16934, 7822, 2781, 19234, 61631, 42863, 41420,
                    3022, 64979, 33155, 17211, 6321, 23395, 43547, 33544, 39024, 10331, 18428,
                    28026, 47427, 62052, 45348, 22566, 40636, 23279, 5109, 27057, 50493, 23229,
                    37698, 30798, 3459, 38491, 43479, 1027, 58715, 61722, 5349, 51136, 46640,
                    38914, 34004, 58899, 12839, 26742, 48070, 61283, 14369, 21488, 537, 58459,
                    4758, 63638, 14736, 55981, 710, 32345, 43316, 60134, 44843, 17373, 6397, 52465,
                    30152, 59984, 15858, 62684, 49955, 46097, 59932, 1622, 3154, 31660, 64727,
                    6181, 31762, 38556, 46394, 17784, 46397, 64871, 11728, 54460, 33288, 50630,
                    7098, 32608, 47695, 47174, 2583, 2206, 33316, 7837, 25989, 33133, 46083, 44285,
                    9169, 6780, 10805, 25059, 29236, 58714, 6878, 38206, 58972, 31671, 59410,
                    27877, 58720, 51110, 39991, 19196, 12834, 51762, 11134, 53261, 20274, 21300,
                    58618, 25420, 40834, 31722, 61603, 34526, 49735, 61190, 20055, 16449, 56417,
                    42320, 9436, 51589, 3308, 22140, 64302, 2784, 12533, 30639, 23075, 40629,
                    32394, 39842, 23184, 1790, 20546, 10781, 3726, 44617, 38538, 24274, 25022,
                    41120, 39251, 13444, 44385, 20169, 13855, 4518, 34563, 61861, 42020, 38421,
                    46262, 59118, 6038, 1387, 53995, 18361, 40919, 23573, 16076, 17299, 52522,
                    47357, 45045, 8002, 11043, 49214, 63932, 21963, 48675, 54576, 55853, 39509,
                    60756, 21336, 51375, 16952, 21746, 37491, 65495, 52028, 45966, 11184, 64390,
                    62137, 12924, 14698, 32491, 37810, 28149, 44260, 32471, 21291, 22193, 48049,
                    16310, 48010, 44280, 21934, 22727, 60556, 32535, 36516, 60493, 13962, 40438,
                    54881, 2180, 62420, 50849, 2096, 37844, 19353, 2916, 4269, 50724, 57824,
                ]))
                .unwrap(),
                c: 139,
            },
            VarTestStruct {
                a: 55005,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    12157, 20838, 16058, 47691, 35670, 31224, 41494, 7626, 7959, 42590, 43802,
                    32741, 33809, 15502, 15831, 11454, 59784, 44056, 63131, 15469, 8348, 62330,
                    36340, 47210, 35269, 16549, 65016, 29816, 31523, 48294, 19249, 30907, 38802,
                    63284, 41843, 32135, 43782, 34852, 28504, 34884, 35149, 48003, 64116, 35134,
                    56281, 41800, 35727, 19336, 40578, 31200, 19608, 44044, 47782, 19650, 64200,
                    25410, 7177, 13064, 50022, 4312, 4322, 37597, 35676, 10229, 29684, 935, 15426,
                    36879, 37844, 39243, 45468, 611, 21852, 45567, 64939, 1961, 59055, 4320, 47190,
                    32843, 42519, 31197, 25754, 58426, 30288, 7910, 1765, 9394, 61176, 32529,
                    23219, 3482, 46194, 13662, 14547, 26477, 2121, 13702, 32186, 5229, 2576, 41328,
                    39013, 14395, 57869, 64527, 8911, 16918, 23615, 20578, 8701, 5854, 7306, 54599,
                    3348, 27559, 6783, 23116, 7702, 55475, 13521, 41846, 25227, 50582, 47649,
                    19258, 23006, 62989, 32137, 63862, 61177, 18536, 40346, 63096, 48013, 51703,
                    830, 15846, 54885, 36908, 12024, 39511, 16852, 47311, 27011, 36334, 54344,
                    59572, 58768, 43649, 40675, 55083, 47619, 20382, 37028, 10762, 62937, 49142,
                    33630, 4672, 15202, 16523, 59513, 10039, 34221, 37921, 4462, 57673, 62957,
                    24726, 57002, 37991, 42985, 34390, 50066, 29142, 61458, 30181, 6442, 43216,
                    62786, 36234, 37652, 22963, 53068, 20291, 27988, 2542, 56678, 22020, 28692,
                    54146, 35072, 4752, 23271, 43626, 64408, 46906, 33844, 15985, 12872, 50020,
                    42594, 55975, 56256, 50883, 17688, 19694, 59039, 40465, 10662, 52752, 64518,
                    19535, 53608, 54060, 22121, 45124, 385, 20746, 13378, 46843, 37145, 25736,
                    4586, 14540, 52342, 48518, 39620, 21257, 45580, 20785, 60520, 47638, 50887,
                    7237, 21313, 23647, 41185, 49974, 36077, 57806, 3878, 30205, 19761, 36345,
                    47089, 59211, 23734, 37410, 10696, 61413, 27030, 14160, 54002, 21700, 7719,
                    46470, 47269, 53780, 20439, 26507, 49988, 60696, 32614, 8484, 27411, 60931,
                    5374, 54530, 4977, 11701, 40538, 51387, 2367, 21390, 31145, 13488, 46105,
                    45423, 44812, 28902, 41087, 40419, 54068, 23303, 21978, 44170, 44998, 53213,
                    31834, 4029, 34403, 1972, 4226, 14927, 12308, 9763, 35969, 54408, 36726, 63816,
                    64347, 50900, 14566, 700, 62233, 8580, 46005, 51306, 19836, 52369, 47471,
                    39457, 324, 14937, 49777, 23565, 36855, 48991, 62856, 4755, 30401, 16094,
                    58049, 35734, 4269, 2368, 22746, 31825, 40288, 24288, 39608, 51252, 55491,
                    25079, 44051, 61721, 18363, 30223, 27793, 41635, 17413, 64342, 6349, 11062,
                    3503, 16321, 18950, 38123, 33118, 1994, 21038, 57207, 6895, 47933, 23177,
                    38368, 37916, 5660, 6239, 44653, 20689, 23588, 16486, 26792, 41416, 63367,
                    56706, 35288, 20434, 26791, 22874, 14427, 40070, 2140, 59890, 16891, 5785,
                    42811, 27493, 61832, 53939, 47778, 7698, 44865, 46169, 25362, 52730, 57474,
                    11122, 34975, 58660, 32425, 63494, 7520, 11826, 9648, 49205, 54811, 17381,
                    52565, 58686, 47967, 18636, 23513, 14097, 50725, 32871, 33108, 53504, 56074,
                    46964, 50577, 17793, 38712, 28408, 8338, 54068, 9346, 966, 20559, 27367, 60168,
                    22896, 16668, 19005, 46720, 9278, 64996, 2975, 63196, 36376, 55246, 52241,
                    34757, 19037, 29815, 46636, 12221, 4494, 57458, 55359, 38388, 49529, 59896,
                    52599, 22135, 6903, 38917, 45249, 29172, 62024, 32505, 43125, 20212, 23885,
                    10921, 6687, 51513, 18115, 45864, 7000, 45969, 50822, 36648, 49482, 1494,
                    47249, 3068, 15290, 8645, 41494, 16928, 47112, 19835, 7469, 49589, 13542,
                    24179, 21931, 11862, 64752, 46141, 26490, 10401, 64630, 139, 34818, 39655,
                    50656, 57591, 24338, 40087, 7087, 40290, 10479, 19267, 28618, 43263, 38254,
                    40649, 11078, 25338, 59267, 65367, 28771,
                ]))
                .unwrap(),
                c: 160,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe5956b72a5b8403ed677d979cf840a28ec09ed55bb80ce0feaf4fec3049ef40a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_9() {
    let value = ComplexTestStruct {
        a: 47426,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            19759, 24984, 33337, 36131, 45227, 54145, 47460, 60807, 15609, 5357, 23158, 749, 55515,
            20322, 3713, 43736, 58335, 16694, 3839, 53659, 44883, 5353, 27992, 59519, 57154, 38753,
            4709, 10267, 48741, 53882, 49165, 20236, 44944, 31435, 24580, 13008, 40126, 43198,
            40989, 61928, 21272, 44923, 12035, 28932, 13161, 11568, 37809, 32970, 11964, 19814,
            49208, 45575, 47345, 44367, 17992, 8667, 53291, 30138, 2968, 28456, 54800, 10841,
            59159, 20789, 8138, 44560, 56841, 34514, 39638, 34857, 5850, 53223, 39770, 15438,
            46294, 64553, 62318, 34384, 41875, 16251, 4125, 34735, 39820, 21427, 54023, 56564,
            43365, 31444, 39463, 19207, 125, 32098, 16220, 2291, 51231, 30998, 63093, 64973, 3102,
            42590, 12084, 46333, 58265, 21993, 21819, 8128, 52754,
        ]))
        .unwrap(),
        c: 142,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            235, 91, 89, 140, 179, 162, 118, 77, 234, 11, 140, 70, 33, 223, 70, 84, 190, 171, 153,
            193, 228, 163, 125, 151, 193, 202, 189, 238, 28, 229, 69, 79, 235, 140, 84, 211, 85, 4,
            235, 7, 137, 165, 184, 98, 77, 206, 105, 192, 241, 39, 0, 62, 56, 99, 144, 68, 134, 37,
            167, 84, 36, 184, 130, 205, 94, 255, 68, 37, 75, 131, 243, 73, 176, 68, 142, 73, 174,
            80, 247, 244, 74, 159, 221, 147, 157, 33, 14, 190, 201, 173, 23, 55, 65, 72, 84, 66,
            19, 64, 236, 127, 101, 154, 233, 40, 149, 244, 237, 241, 157, 53, 112, 56, 80, 107,
            133, 122, 39, 241, 236, 158, 169, 14, 235, 6, 233, 230, 35, 158, 237, 94, 245, 39, 240,
            55, 229, 38, 3, 200, 196, 18, 40, 39, 95, 6, 218, 30, 184, 14, 65, 179, 94, 85, 124,
            81, 241, 196, 250, 158, 22, 150, 86, 117, 168, 137, 100, 202, 45, 253, 23, 139, 219,
            161, 255, 45, 3, 213, 182, 38, 136, 122, 28, 64, 60, 186, 136, 187, 81, 213, 20, 229,
            145, 39, 150, 172, 179, 91, 103, 4, 118, 62, 175, 126, 190, 152, 104, 132, 139, 233,
            180, 237, 87, 154, 244, 140, 143, 156,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 29817,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                50477, 34758, 46783, 10917, 59185, 28840, 27622, 5519, 62778, 47831, 26762, 35343,
                33939, 44444, 29533, 477, 6011, 11072, 56026, 58584, 9977, 41363, 3390, 61315,
                58980, 33440, 7018, 26657, 43098, 46200, 50262, 46999, 38620, 18378, 44705, 64505,
                12555, 5316, 45278, 8567, 16568, 50442, 11392, 34878, 25044, 21481, 52692, 24747,
                50889, 39004, 34142, 18210, 11272, 30435, 2780, 19317, 32033, 1136, 16491, 50779,
                17161, 37607, 47108, 65311, 23368, 27166, 2544, 17356, 60532, 61886, 19133, 59978,
                42817, 40814, 27506, 15256, 61747, 57296, 7542, 9565, 22134, 59988, 53638, 26366,
                10813, 48368, 22652, 41466, 42593, 9637, 41948, 29650, 3157, 21270, 25656, 6153,
                52797, 5200, 11722, 3711, 60325, 51879, 36431, 46074, 36185, 51780, 6497, 38753,
                55377, 64343, 8718, 48211, 4583, 31556, 27408, 50439, 18682, 35879, 57439, 57574,
                44543, 35493, 61391, 25224, 31780, 18164, 7750, 912, 16861, 1515, 22940, 58903,
                63435, 35513, 49830, 57677, 27438, 24513, 58430, 60512, 63885, 6852, 13701, 33348,
                11290, 35936, 62340, 21992, 60689, 16543, 20909, 50921, 30810, 10837, 22806, 50471,
                45553, 1469, 16246, 16264, 61992, 2710, 33427, 200, 63360, 6192, 19245, 53849,
                5076, 18975, 57053, 22631, 20837, 48718, 38675, 17891, 10227, 27507, 13473, 7658,
                14031, 30338, 35614, 24310, 64381, 23802, 50688, 16532, 20075, 65, 13796, 43567,
                11667, 21859, 33233, 45834, 53935, 64313, 37733, 10413, 19782, 14743, 52847, 33860,
                28992, 50819, 52612, 12418, 16090, 44274, 29020, 55372, 18466, 27080, 33037, 29604,
                40796, 58766, 4522, 65151, 27003, 53634, 47977, 18071, 19469, 41752, 5443, 20514,
                5068, 46750, 7703, 2691, 51603, 18774, 29130, 10980, 40952, 15347, 32581, 26192,
                22721, 24097, 62756, 60603, 13693, 2283, 45230, 11527, 11069, 55505, 49452, 21545,
                31080, 5669, 645, 9171, 64811, 28980, 36466, 9754, 31325, 28452, 32917, 61039,
                55538, 52336, 44011, 59914, 64405, 20922, 37363, 711, 39954, 20905, 40614, 28166,
                26512, 58331, 40876, 19178, 58990, 9518, 36534, 154, 19401, 45594, 14112, 50823,
                60155, 64095, 12960, 13214, 17408, 12175, 40677, 29991, 16035, 6204, 59464, 25821,
                19842, 129, 3678, 2367, 53323, 36515, 1736, 38471, 622, 29744, 26822, 32214, 3415,
                38173, 3336, 53438, 2858, 54691, 35213, 21249, 46915, 21909, 24056, 25690, 4434,
                48222, 51727, 33304, 49295, 18984, 15650, 58793, 38766, 45265, 6952, 49299, 54158,
                9497, 18353, 49520, 59698, 43027, 18229, 17170, 57466, 22670, 26859, 18604, 31410,
                54697, 26266, 36123, 26021, 36147, 48347, 22383, 56231, 45105, 56189, 29249, 55500,
                56529, 25916, 51290, 37361, 30115, 17747, 19695, 58250, 24898, 54592, 22796, 54272,
                58544, 59344, 52296, 11445, 37480, 7282, 20367, 43167, 32914, 56855, 60674, 59318,
                38262, 36010, 55832, 23636, 56720, 38899, 1561, 26058, 223, 37389, 24820, 61106,
                57061, 46303, 1272, 17467, 33287, 45281, 12626, 25860, 14501, 25588, 35362, 49506,
                18178, 40631, 54615, 36053, 59387, 59725, 24238, 40121, 48787, 32896, 16587, 22279,
                30411, 58186, 22080, 9373, 19604, 14359, 55700, 57974, 11658, 7238, 29661, 21531,
                47095, 22997, 15085, 36567, 39716, 10495, 430, 64646, 56191, 8794, 37306, 50710,
                24088, 44783, 9759, 60690, 55937, 31269, 64319, 30882, 36085, 20947, 57802, 869,
                19771, 32766, 20648, 52946, 38537, 42700, 28646, 58652, 20501, 31266, 31208, 24668,
                35432, 21639, 36402, 32519, 40154, 58588, 34345, 57750, 57376, 6833, 27861, 16917,
                29216, 41765, 60382, 54098, 18900, 32347, 11328, 3226, 55071, 49318, 62589, 41292,
                17665, 40502, 13921, 60323, 36986, 29224, 20147, 51648, 19556, 65145, 37584, 54410,
                24026, 13347, 61507, 61588, 27906, 65504, 8594, 18646, 49866, 9067, 51116, 6993,
                53976, 32466, 63395, 22242, 54383, 11331, 14678, 40780, 34177, 26991, 60359, 17992,
                43450, 6698, 16714, 30853, 52688, 50404, 5321, 4855, 3771, 65309, 6433, 31790,
                2963, 3606, 12865, 43293, 5611, 5135, 46963, 43906, 1616, 24725, 14402, 32709,
                55954, 23195, 40091, 11968, 10486, 52562, 21860, 37543, 15002, 44373, 26694, 28590,
                47720, 63765, 34019, 49263, 23025, 17439, 57757, 56990, 17009, 34978, 30805, 18471,
                8836, 654, 48527, 35306, 12660, 46504, 14148, 13913, 46466, 53818, 63112, 18550,
                30159, 9301, 5362, 52023, 33217, 38581, 45924, 7974, 12803, 63798, 5798, 7985,
                48463, 45834, 54081, 61285, 32821, 18812, 42408, 3165, 39051, 57071, 39040, 11792,
                42107, 48688, 57379, 37237, 33795, 40107, 59746, 59506, 35266, 54010, 58902, 33580,
                23866, 33435, 32962, 40398, 55618, 61761, 36025, 23562, 27145, 9438, 43715, 25561,
                38858, 50719, 63935, 33690, 14547, 4975, 41583, 13237, 12707, 7971, 63141, 63796,
                21324, 35296, 740, 50344, 31799, 1734, 23705, 24915, 36553, 43456, 34202, 46971,
                16967, 50430, 52358, 19881, 15126, 63764, 52518, 56362, 24298, 63997, 25767, 33518,
                2220, 13098, 63530, 29121, 51470, 2202, 13616, 20929, 39972, 32215, 5589, 58690,
                20307, 28460, 34611, 10796, 41282, 55431, 15931, 10424, 14829, 45864, 41277, 14379,
                25110, 24057, 5549, 52787, 48504, 63914, 44452, 62850, 37495, 53989, 41185, 59128,
                28312, 1502, 31600, 4989, 9797, 58866, 30819, 1798, 57517, 39721, 31914, 34246,
                22870, 16037, 56088, 556, 50712, 17845, 48969, 13382, 65306, 21072, 10189, 46615,
                25768, 24024, 49747, 20412, 55951, 2021, 60814, 43975, 51108, 13766, 35391, 60542,
                37828, 40526, 29043, 34807, 13952, 38863, 60373, 1743, 1198, 53116, 49804, 35983,
                28428, 15515, 59619, 61398, 16918, 52307, 19343, 53872, 49687, 58015, 4287, 37269,
                9218, 17093, 1389, 47269, 27012, 16045, 4215, 36546, 23671, 7078, 12631, 6591,
                16903, 24848, 48093, 42199, 1891, 13553, 46915, 45022, 61592, 62244, 19226, 29493,
                8982, 62806, 6589, 2322, 54202, 29447, 39963, 17710, 20136, 27832, 25209, 546,
                58036, 10959, 38263, 46087, 3538, 44747, 48477, 17069, 41980, 23332, 30470, 39352,
                35748, 59229, 42149, 54606, 38011, 26360, 26286, 16283, 20205, 14543, 34091, 49148,
                36856, 31008, 44862, 20764, 65200,
            ]))
            .unwrap(),
            c: 253,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 15, b: 6356280695299709065, c: 1172457613 },
            FixedTestStruct { a: 12, b: 207766062676898312, c: 1225434019 },
            FixedTestStruct { a: 68, b: 14913182637774679688, c: 348000972 },
            FixedTestStruct { a: 124, b: 1921503886664078535, c: 2664813728 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 50809,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    31528, 16231, 46285, 6986, 26841, 17511, 29374, 59738, 57325, 1565, 64660,
                    10472, 17325, 3456, 37583, 44340, 10072, 33685, 29960, 56476, 47911, 63897,
                    12783, 3474, 35717, 49731, 58217, 4750, 26266, 52660, 24864, 38589, 42348,
                    14894, 48343, 44401, 10977, 20286, 59494, 35009, 63663, 35439, 26493, 9537,
                    39135, 44394, 35160, 53240, 11665, 7515, 62431, 63664, 47147, 33763, 31681,
                    18924, 60501, 5647, 47825, 62901, 36809, 13301, 63003, 63395, 45775, 837,
                    12745, 3684, 56930, 56744, 65166, 57999, 206, 14846, 56101, 8860, 29970, 22845,
                    32931, 31349, 37328, 40238, 15053, 33701, 31547, 51327, 28558, 27800, 40148,
                    16370, 24419, 12401, 15367, 44293, 51437, 52488, 39230, 39794, 63832, 7968,
                    29063, 54310, 5150, 23537, 56930, 20838, 31438, 19967, 54908, 47290, 29820,
                    7467, 53824, 55384, 14138, 22305, 6108, 38807, 37503, 4279, 33530, 29331,
                    51855, 36139, 47840, 9528, 48174, 41430, 51015, 38738, 34687, 9490, 54679,
                    57138, 45660, 53303, 64637, 4275, 63961, 46342, 23412, 29627, 61697, 22324,
                    30255, 63916, 47755, 58401, 17967, 21088, 59836, 56763, 5464, 36602, 35741,
                    34564, 5548, 13056, 39975, 14237, 21837, 65337, 51652, 4385, 26520, 17356,
                    53348, 22154, 39463, 19833, 43318, 43823, 61335, 33575, 32186, 47874, 61236,
                    50058, 50230, 53043, 34042, 60230, 5299, 48625, 39218, 40689, 38688, 40060,
                    28479, 14797, 32969, 20063, 21210, 53756, 56938, 27073, 8282, 18402, 30525,
                    17473, 44106, 30268, 20699, 57653, 4455, 51446, 63986, 56054, 37298, 4258,
                    50768, 34993, 27755, 50588, 12788, 41791, 3753, 31929, 7424, 61495, 51548,
                    37814, 24743, 46080, 37721, 47836, 30008, 54222, 2715, 42764, 18282, 60523,
                    46264, 50187, 51469, 30011, 29056, 6288, 27896, 28623, 59896, 15567, 32117,
                    55484, 7336, 20108, 7682, 11590, 33554, 11922, 4708, 64571, 53943, 37648,
                    42193, 64556, 29042, 28758, 43466, 58098, 43723, 63964, 42841, 29337, 50593,
                    31251, 20852, 42913, 5795, 58071, 61019, 59786, 3437, 6742, 63808, 50631,
                    53363, 19337, 34405, 51682, 63309, 48657, 28202, 39025, 42702, 34838, 19773,
                    32396, 29502, 23607, 61313, 26073, 41212, 19723, 57508, 10083, 55123, 9289,
                    14482, 60359, 52796, 36081, 61694, 56031, 18754, 12884, 53179, 38364, 18307,
                    40777, 59375, 429, 761, 50366, 9602, 41859, 10209, 35978, 40516, 38156, 54857,
                    52903, 30324, 27715, 18551, 3045, 62645, 49957, 3987, 6781, 64601, 45195,
                    43030, 1462, 32801, 60393, 8807, 37199, 49932, 30469, 46832, 26, 10553, 52584,
                    17851, 63480, 19134, 59981, 9008, 62017, 13372, 29155, 30976, 8908, 60005,
                    52622, 64231, 48245, 37044, 29679, 7430, 59299, 18119, 46458, 49331, 18060,
                    25177, 26831, 8580, 23630, 14623, 200, 38949, 15451, 48700, 17188, 21655,
                    58800, 31799, 12154, 53133, 3322, 7057, 42360, 22721, 60186, 56545, 28018,
                    13595, 51872, 20606, 38725, 39320, 28178, 11912, 11044, 53548, 25851, 45456,
                    15658, 29010, 51291, 63882, 17578, 35256, 56382, 29370, 53327, 41196, 18449,
                    43822, 31787, 2172, 30364, 22029, 62721, 12992, 62990, 24444, 16328, 36418,
                    2799, 28662, 9518, 61953, 17105, 36252, 46239, 51004, 54857, 43928, 6110, 300,
                    5101, 41749, 48744, 3324, 946, 41271, 62515, 25838, 9751, 4924, 1459, 740,
                    1251, 2411, 53147, 24539, 39790, 45150, 28968, 59561, 5564, 27254, 17882, 3238,
                    17209, 8961, 24259, 4488, 10522, 33221, 48805, 61225, 54440, 26345, 36582,
                    22590, 64970, 33054, 21834, 17554, 19140, 46253, 48, 13262, 38541, 38394, 2693,
                    53230, 9192, 4955, 57444, 1217, 39122, 32834, 61081, 2482, 62447, 50413, 18598,
                    11686, 59910, 34317, 57503, 2159, 50574, 12696, 57089, 10918, 11733, 56551,
                    20996, 19357, 28449, 41928, 2702, 12287, 63175, 48539, 28440, 8058, 4304,
                    38971, 19335, 35301, 18553, 18717, 56490, 37832, 57320, 58904, 41535, 39084,
                    17171, 782, 10658, 29739, 48517, 52219, 11377, 45427, 14311, 57271, 59781,
                    20654, 26667, 2963, 17075, 58717, 27238, 17407, 49658, 17268, 62331, 44353,
                    4758, 8821, 61029, 56207, 33050, 52965, 18927, 16860, 56918, 3119, 38679,
                    41920, 21268, 8342, 39832, 25697, 61270, 62830, 46088, 52734, 59674, 22098,
                    46789, 25670, 11498, 57195, 56983, 30984, 51068, 40006, 62993, 22589, 11572,
                    21959, 45883, 37821, 33381, 12333, 38541, 34350, 34311, 63663, 26190, 41436,
                    43652, 21907, 58079, 19510, 56504, 37258, 46240, 55747, 39917, 32726, 3615,
                    58318, 61278, 16443, 3649, 57628, 24445, 31454, 31581, 21837, 15542, 54959,
                    61187, 54795, 24413, 63975, 21751, 23949, 63634, 1835, 50662, 1561, 35842,
                    28912, 20722, 43761, 41155, 33593, 11124, 22161, 10980, 30406, 62151, 42315,
                    43447, 60719, 45085, 59308, 11344, 41296, 34139, 22241, 41415, 12101, 35684,
                    62291, 43687, 11610, 16837, 5779, 39962, 15327, 34523, 29912, 24449, 12825,
                    13327, 54841, 35347, 34058, 62120, 59854, 22410, 28718, 8927, 55282, 62494,
                    37868, 57692, 64239, 64124, 60187, 61116, 345, 51320, 36763, 42453, 14900,
                    32755, 58781, 26293, 27779, 45923, 18447, 4991, 467, 49526, 4266, 15726, 7463,
                    47461, 37563, 38099, 19962, 54002, 63104, 13743, 23438, 53938, 45720, 576,
                    57555, 5850, 13332, 34899, 26143, 2083, 35890, 57293, 56259, 16253, 6193,
                    14598, 62369, 55203, 53559, 13975, 92, 43783, 18455, 29743, 17919, 25238, 4456,
                    49722, 49024, 18851, 27317, 5999, 46856, 52203, 44748, 50270, 42993, 22117,
                    12760, 32564, 54815, 29622, 14478, 46560, 18835, 26309, 4059, 57162, 30070,
                    7984, 47583, 34280, 9480, 52899, 21655, 62443, 17375, 60322, 43671, 60129,
                    51501, 55440, 63956, 4958, 64271, 63939, 2538, 18437, 46976, 37326, 19379,
                    42426, 36156, 19193, 56467, 270, 4980, 58745, 35117, 3933, 92, 12900, 31402,
                    58370, 6080, 32852, 30705, 27404, 29138, 16907, 23917, 16975, 48484, 1421,
                    10160, 30783, 64215, 39743, 54494, 49319, 14345, 26466, 8292, 19030, 57511,
                    32333, 61805, 2761, 45783, 709, 13581, 13161, 62803, 60778, 56223, 49022,
                    64397, 15284, 12257, 40286, 18770, 36208, 10372, 30645, 59991, 648, 17640,
                    16542, 14129, 32407, 58, 3817, 53913, 24513, 48190, 807, 6010, 60183, 33436,
                    27063, 32277, 32297, 35879, 37183, 26000, 42937, 35067, 5590, 25716, 25910,
                    332, 36604, 55407, 12884, 56579, 57708, 42199, 40857, 5035, 43459, 8017, 27155,
                    56986, 42047, 63491, 28770, 17823, 64036, 50015, 11934, 60994, 51679, 22233,
                    35129, 50450, 54561, 27758, 2630, 48575, 55503, 51060, 44271, 29615, 37625,
                    4085, 42005, 32484, 30992, 29733, 20919, 60265, 26015, 38753, 11279, 27339,
                    62615, 34569, 57073, 40002, 31325, 42099, 42843, 43942, 52321, 12137, 65101,
                    32204, 44611, 3228, 29627, 5595, 26584, 59241, 39916, 24623, 53918, 26011,
                    50199, 62328, 36200, 49780, 6221, 62607, 60162,
                ]))
                .unwrap(),
                c: 190,
            },
            VarTestStruct {
                a: 5170,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    56284, 13757, 29990, 51687, 53108, 22293, 10059, 5001, 2481, 1444, 41176,
                    13969, 951, 41744, 40716, 39172, 43043, 57489, 48285, 63488, 11757, 16429,
                    38927, 38194, 6631, 58747, 28307, 19347, 37029, 20747, 54507, 21434, 30300,
                    19020, 50754, 14953, 56542, 25494, 1792, 2491, 46365, 56394, 23094, 14540,
                    49144, 64003, 2859, 36132, 17045, 63916, 11508, 57869, 52249, 8432, 6279, 5662,
                    14002, 57781, 60233, 35301, 8118, 2631, 63339, 31750, 45533, 27351, 45286,
                    4325, 62904, 332, 19373, 55217, 1263, 16834, 49570, 41914, 12410, 65275, 6623,
                    1058, 44509, 16173, 62906, 59682, 23913, 53458, 8046, 53755, 56508, 21915,
                    38855, 4355, 4121, 673, 43372, 19767, 36153, 22687, 38756, 28169, 48513, 37608,
                    514, 45854, 6406, 28690, 33712, 57309, 35338, 3063, 21940, 7027, 53192, 59745,
                    12031, 39588, 25609, 47072, 19534, 36125, 19641, 49482, 27357, 48433, 45573,
                    48973, 53000, 19103, 22494, 35025, 19796, 56519, 55867, 13066, 17967, 33728,
                    34408, 42385, 64838, 40090, 12389, 2320, 26085, 60917, 18845, 51572, 40816,
                    22764, 51406, 11156, 2240, 6265, 33196, 55882, 26416, 58626, 26985, 5084,
                    28750, 748, 53009, 14592, 27065, 22269, 21131, 14943, 25655, 11630, 8112,
                    12518, 4725, 670, 40380, 49609, 10272, 5187, 15117, 19681, 21505, 4185, 8610,
                    65478, 27779, 28384, 41950, 63892, 59443, 44106, 62648, 57753, 30321, 897,
                    28356, 39983, 9255, 41966, 23375, 60510, 18161, 17789, 11601, 32797, 41758,
                    26861, 51502, 64068, 23663, 16515, 1337, 9318, 28494, 63971, 828, 37694, 63851,
                    11364, 49195, 30987, 51010, 23361, 19134, 32136, 1988, 33256, 17850, 51762,
                    20238, 33863, 30142, 20972, 65160, 52956, 60571, 53271, 43459, 27579, 1863,
                    3167, 18845, 2970, 63740, 21140, 4759, 22464, 1785, 31667, 8635, 44831, 6888,
                    45138, 29365, 65350, 54096, 13327, 42212, 7626, 9877, 28042, 57482, 14523, 84,
                    62177, 14732, 53754, 56472, 16326, 31686, 16353, 25286, 41969, 42352, 13278,
                    42273, 47367, 29562, 23245, 26554, 42062, 26726, 44714, 4391, 51325, 25298,
                    6800, 41494, 36829, 20943, 41561, 60705, 6836, 19276, 13404, 15270, 24787,
                    32752, 38430, 8083, 34903, 14442, 11739, 63845, 58058, 22059, 39304, 25491,
                    5073, 6016, 23531, 28902, 42251, 34597, 49664, 5043, 51205, 5299, 52893, 2709,
                    23188, 63532, 19881, 29182, 7813, 44835, 60112, 13706, 3889, 8031, 36192,
                    28397, 21513, 26621, 24371, 20825, 36012, 41472, 34720, 878, 49916, 55632,
                    7699, 57365, 55101, 55073, 8349, 54708, 5482, 50387, 59119, 34469, 52095,
                    13939, 25469, 24090, 8092, 51886, 21020, 36989, 42388, 5825, 12913, 54900,
                    37947, 6656, 61583, 29576, 58879, 23340, 32777, 58812, 6045, 62477, 33289,
                    15339, 569, 22264, 26352, 26854, 41491, 30478, 48681, 17608, 47905, 10185,
                    14841, 244, 42227, 14997, 52644, 1462, 4781, 4276, 5780, 27685, 58146, 40039,
                    16054, 18824, 35159, 8918, 35585, 54400, 23883, 29802, 38038, 29470, 21839,
                    48288, 4225, 57722, 17192, 10239, 10610, 34360, 22362, 14347, 9530, 47667,
                    8570, 53137, 49911, 25374, 22348, 61468, 7224, 53093, 37581, 24725, 65479,
                    48424, 61312, 38184, 59499, 64868, 60383, 1254, 47307, 7003, 46164, 49176,
                    37137, 21077, 61906, 19908, 47059, 22376, 16421, 10815, 7705, 21300, 33186,
                    30136, 17780, 41352, 22884, 54844, 61968, 40292, 52105, 6200, 22523,
                ]))
                .unwrap(),
                c: 16,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9054f3149ce6b8079f9bf1b858a8937ff85bb645a70f1b592195f37c33013990");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_chaos_0() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 53109, 16152, 8907, 43706, 12557, 29217, 0, 65535, 65535, 53745, 0, 44917, 0, 41205,
            16985, 57304, 65535, 30273, 0, 65535, 0, 13353, 0, 65535, 2575, 48585, 25052, 11267,
            65535, 47810, 49096, 0, 65535, 65535, 65535, 2959, 53772, 0, 40240, 64086, 26584, 0,
            681, 0, 32655, 6467, 54924, 1776, 65535, 11103, 65535, 0, 0, 65535, 19621, 0, 65535,
            65535, 22103, 4838, 32212, 2832, 1774, 10579, 0, 3101, 65535, 59369, 239, 38141, 32392,
            0, 27970, 38217, 15609, 61709, 65535, 46825, 2109, 51016, 56858, 65535, 63839, 29124,
            0, 65535, 65535, 53850, 8933, 46591, 50782, 0, 46531, 254, 60849, 9653, 23043, 65535,
            30108, 10505, 42465, 22624, 12075, 42752, 8989, 4941, 0, 0, 64342, 34025, 51317, 2777,
            65535, 30879, 9997, 41401, 0, 1379, 6953, 65535, 39181, 44671, 0, 44920, 59263, 54267,
            8652,
        ]))
        .unwrap(),
        c: 96,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 38958,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                34679, 65535, 53671, 0, 65535, 39228, 13546, 37474, 30742, 10040, 25366, 15116,
                22052, 26158, 22361, 33442, 0, 65535, 33579, 16060, 34240, 2080, 17255, 52928,
                27386, 0, 28055, 34354, 39063, 59559, 18065, 0, 43091, 34856, 7031, 65535, 0,
                25718, 45279, 50897, 65535, 42, 0, 0, 55188, 64873, 28227, 19969, 44079, 57169,
                44441, 5340, 12737, 8472, 25361, 0, 65535, 56189, 6652, 65535, 1450, 65535, 65535,
                61600, 65535, 16721, 30031, 0, 64269, 46961, 20276, 27259, 22382, 62223, 0, 54646,
                11948, 51499, 65535, 0, 22686, 21684, 0, 32743, 0, 27254, 35172, 10536, 1410,
                40941, 0, 0, 65535, 63, 40086, 21379, 64478, 0, 56345, 32049, 47988, 34885, 65535,
                28016, 27484, 44501, 0, 22758, 65535, 50481, 12390, 65535, 28069, 61586, 65535,
                14639, 52186, 65535, 31977, 8946, 64552, 45470, 40694, 31475, 52936, 59738, 24944,
                18581, 1661, 32940, 0, 30031, 21684, 65535, 53364, 65535, 65535, 8330, 0, 57516,
                53639, 46910, 0, 37013, 18226, 36838, 50611, 0, 65535, 5837, 11764, 20120, 65535,
                41196, 62579, 11607, 13359, 33085, 56313, 65535, 41297, 49935, 65535, 65535, 65535,
                63412, 12501, 65535, 46890, 286, 0, 34622, 0, 60837, 28204, 59565, 36982, 29571,
                36530, 11378, 24878, 4973, 65535, 46938, 37348, 65269, 47327, 22460, 23699, 3010,
                9807, 32086, 65535, 63962, 65535, 65535, 65535, 4572, 64516, 58443, 42829, 35162,
                64720, 65535, 59684, 55738, 50521, 43762, 65535, 0, 59919, 37496, 24495, 65535, 0,
                662, 65535, 9417, 25665, 65535, 6071, 65535, 65535, 5791, 0, 865, 0, 54280, 16054,
                4641, 3141, 65535, 0, 4066, 0, 0, 17626, 21776, 65535, 0, 10570, 0, 61673, 65535,
                4486, 2920, 0, 0, 65535, 53943, 65535, 52217, 45990, 0, 26281, 43556, 7817, 30403,
                65535, 37769, 11131, 54629, 37588, 65535, 26521, 0, 65535, 0, 0, 0, 63813, 65535,
                65535, 65535, 49395, 12855, 25925, 0, 41147, 65535, 47109, 65535, 43678, 65535,
                31444, 0, 61991, 19702, 65535, 0, 44365, 31208, 23547, 65535, 65535, 32375, 46723,
                0, 46100, 41751, 0, 64042, 57384, 6433, 44286, 44746, 60038, 51315, 33843, 0,
                65535, 1905, 11955, 27127, 25995, 6943, 34032, 47025, 0, 38528, 27120, 20581, 3685,
                53190, 51264, 33840, 22577, 6513, 23643, 62206, 65535, 65535, 25393, 4428, 16139,
                59266, 4004, 61975, 65374, 0, 14269, 11977, 21922, 59944, 35884, 0, 64990, 6884,
                65535, 53916, 65535, 41253, 37441, 15773, 59000, 65535, 53898, 27044, 65535, 0,
                54328, 44318, 65535, 26848, 65535, 65535, 0, 53430, 63613, 45564, 13307, 39434,
                65535, 17131, 65535, 32246, 42432, 65535, 48163, 32531, 0, 49552, 46317, 55073,
                45335, 17466, 0, 27755, 0, 22913, 48731, 53706, 2568, 54728, 23648, 13740, 65535,
                51665, 0, 19767, 40241, 25724, 53277, 0, 45597, 63149, 65535, 65535, 65535, 59844,
                63558, 15557, 52231, 38484, 31907, 0, 39975, 0, 57375, 42994, 37285, 35763, 42671,
                22629, 0, 0, 35920, 0, 63283, 65535, 61460, 65535, 65535, 56170, 25184, 53436,
                65535, 7441, 61339, 59392, 46374, 65535, 35532, 0, 11004, 62526, 54850, 65535,
                29706, 0, 51586, 0, 18585, 54749, 0, 56696, 57718, 0, 17687, 65535, 26122, 14502,
                17235, 65535, 65535, 40540, 5778, 63968, 28732, 56804, 37989, 51131, 0, 26846,
                25369, 0, 28979, 19761, 33837, 50432, 0, 20756, 37383, 11798, 54229, 0, 28050,
                32423, 9536, 0, 38777, 0, 65535, 12410, 19648, 65535, 59734, 65535, 53061, 2123,
                9578, 43292, 8112, 62899, 2037, 45211, 32266, 33196, 28583, 25086, 64019, 57452,
                29542, 26818, 1525, 5441, 31735, 48100, 48087, 65535, 65535, 65535, 10083, 13884,
                53193, 45184, 14194, 54876, 65535, 62164, 42523, 47250, 3520, 13475, 51367, 37039,
                10004, 63567, 0, 18555, 18713, 42419, 9475, 1297, 2121, 40598, 28506, 0, 58442,
                63388, 0, 65535, 31132, 0, 62525, 27215, 28961, 29590, 0, 65535, 0, 65535, 12571,
                446, 29954, 43691, 657, 0, 62353, 36775, 5826, 9593, 0, 737, 20181, 53097, 0,
                30251, 13087, 65535, 65535, 65535, 0, 7657, 19938, 65535, 65535, 16785, 0, 65535,
                60776, 61213, 32640, 59737, 65535, 33523, 51402, 61535, 64572, 13787, 65535, 58387,
                7235, 37363, 36179, 40814, 1362, 0, 55688, 50228, 30812, 63570, 30172, 0, 39695,
                27195, 32917, 19422, 0, 53048, 0, 52565, 65535, 63727, 28642, 37773, 65535, 14665,
                12393, 6948, 15903, 38387, 0, 0, 19734, 65045, 65535, 55724, 51140, 0, 65535, 0,
                30998, 30852, 53140, 7903, 0, 65535, 47399, 54001, 65535, 33742, 65535, 14576,
                32116, 0, 65535, 47081, 41389, 64676, 0, 65535, 12802, 65535, 65535, 52732, 18219,
                0, 29855, 52778, 61131, 36153, 65535, 5702, 12944, 27100, 11036, 37992, 0, 27931,
                1247, 6100, 65535, 0, 65535, 0, 0, 65535, 24562, 0, 58912, 49343, 20384, 5567,
                65535, 0, 46768, 33387, 65535, 34843, 36283, 28143, 26179, 6718, 0, 0, 0, 10534,
                40093, 20818, 14901, 38656, 35668, 56803, 11682, 0, 27960, 27146, 65535, 39411,
                3648, 65535, 44066, 39145, 37014, 41092, 65535, 0, 65535, 11233, 65535, 43152,
                53641,
            ]))
            .unwrap(),
            c: 178,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 178, b: 12817556808752962143, c: 4294967295 },
            FixedTestStruct { a: 168, b: 18446744073709551615, c: 3195917960 },
            FixedTestStruct { a: 0, b: 2800637093226487989, c: 879150202 },
            FixedTestStruct { a: 140, b: 1944916351229081486, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 26408,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 59453,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
                c: 255,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xae1e922e817ee774556b4db803a022256303c5976fb7877838d68a303ab639a6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_chaos_1() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([25564, 22479, 0])).unwrap(),
        c: 198,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([254])).unwrap(),
        e: VarTestStruct {
            a: 22986,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                60455, 44481, 60715, 0, 9727, 38572, 62452, 29863, 4130, 65535, 65535, 411, 0,
                65535, 0, 53667, 48498, 50919, 65535, 6647, 53829, 38869, 21736, 65535, 65535,
                35539, 38862, 65535, 38067, 65535, 1806, 65535, 31626, 46026, 19510, 65535, 0,
                50417, 47844, 44710, 54420, 65535, 64331, 0, 52637, 65535, 65535, 0, 56385, 52410,
                65535, 12706, 34258, 63935, 11233, 26947, 0, 41027, 18686, 52987, 65535, 65535,
                8886, 52410, 15458, 0, 577, 59315, 31297, 31466, 65535, 0, 59173, 0, 63065, 0, 0,
                0, 57621, 65535, 50327, 6693, 0, 62261, 15818, 48507, 65535, 10547, 25653, 65535,
                990, 24953, 40094, 38531, 0, 0, 24202, 45232, 0, 33648, 49245, 0, 65535, 26864,
                23136, 31976, 13355, 0, 60697, 65535, 40078, 46452, 46272, 20411, 16887, 0, 0,
                52844, 65535, 0, 37586, 53517, 4649, 0, 26341, 47007, 9267, 65535, 9529, 17953,
                60734, 0, 17289, 35435, 59095, 36052, 0, 15577, 0, 0, 51961, 15991, 0, 17014, 0,
                27830, 37054, 9527, 41946, 0, 65535, 38560, 15817, 18047, 23032, 16317, 65535, 0,
                58060, 22450, 63132, 0, 16069, 65535, 65535, 35647, 36144, 0, 37267, 18197, 0,
                31084, 34266, 65535, 43410, 65535, 0, 44592, 4484, 24526, 58018, 28232, 43371,
                65535, 24616, 0, 58960, 0, 29940, 65535, 31320, 37826, 0, 51035, 65535, 58958,
                8365, 24010, 62860, 24437, 16085, 9293, 18106, 42021, 27937, 51455, 2873, 60884,
                55841, 29054, 14332, 6069, 14910, 0, 0, 1480, 0, 65535, 8086, 65535, 38000, 21786,
                53146, 15335, 15245, 65535, 12785, 23759, 65535, 54944, 23939, 0, 0, 0, 60817,
                13423, 2476, 24256, 33212, 9939, 65535, 36478, 47877, 19807, 8352, 19053, 42924,
                29336, 42326, 60546, 62990, 65535, 65535, 673, 65535, 15748, 36052, 3703, 0, 62286,
                14084, 0, 38794, 34934, 2518, 0, 52210, 0, 8785, 27241, 27231, 61394, 52437, 5432,
                34442, 10525, 65535, 62716, 30821, 26180, 65535, 33159, 27818, 0, 38124, 6538,
                9838, 9467, 4074, 65535, 0, 34037, 24549, 0, 65535, 62485, 25614, 65535, 24605,
                65535, 27183, 10183, 37179, 65535, 44296, 65535, 41000, 29096, 65535, 25029, 0,
                65139, 55264, 65535, 63847, 39708, 52192, 0, 0, 10573, 52428, 0, 65535, 37922,
                32225, 53652, 0, 65535, 61982, 65535, 0, 65535, 39026, 44294, 51825, 40556, 65535,
                4403, 40538, 36105, 16684, 65535, 0, 65535, 65535, 64646, 29001, 62676, 58847,
                10840, 29927, 17534, 65502, 44639, 35802, 0, 0, 12051, 0, 37979, 65535, 4437,
                65535, 4991, 27930, 0, 37595, 30883, 49590, 4051, 3532, 26641, 39078, 33967, 33463,
                49059, 35797, 55105, 50170, 61399, 44678, 52495, 29500, 55516, 7196, 0, 38245,
                65535, 5553, 30597, 31266, 47392, 50135, 0, 0, 64865, 65535, 4336, 35814, 60156,
                65535, 55640, 6997, 14836, 57741, 36721, 63731, 45719, 22391, 26763, 308, 65535, 0,
                65535, 49333, 6243, 37611, 56882, 0, 20309, 65535, 57471, 0, 0, 7224, 0, 43758,
                468, 45831, 14949, 20692, 9392, 65535, 34805, 3181, 0, 50071, 3974, 0, 36900, 0,
                60786, 65535, 46843, 19004, 65535, 0, 65535, 27518, 56577, 46714, 7087, 53718,
                55415, 4245, 57050, 64111, 12612, 0, 0, 1206, 37790, 40779, 65535, 895, 50779, 0,
                15131, 12922, 65535, 17143, 1418, 26398, 65535, 0, 0, 54461, 38296, 65535, 56619,
                63240, 5497, 30859, 65535, 65535, 0, 2484, 19275, 29868, 51881, 52866, 55132, 5639,
                38677, 40315, 62286, 65535, 38908, 62232, 45860, 42816, 40205, 9362, 0, 28385,
                65535, 65535, 9133, 65535, 9849, 50255, 42617, 47281, 47361, 40322, 47633, 16158,
                0, 6401, 27393, 0, 0, 37201, 33393, 63837, 0, 56239, 24146, 62639, 50588, 21194,
                62675, 49176, 0, 36407, 52334, 35701, 53337, 57295, 0, 4441, 65535, 43836, 27445,
                17052, 0, 65535, 20700, 0, 12935, 64451, 17979, 61097, 0, 48792, 50690, 65535, 0,
                38446, 65535, 31386, 65535, 0, 16220, 0, 14713, 50281, 65535, 65535, 57082, 22234,
                7222, 65535, 21858, 30928, 56442, 65535, 64008, 65535, 47686, 65535, 58785, 62704,
                27003, 38681, 64843, 0, 29212, 0, 5924, 30414, 0, 18934, 47524, 60178, 0, 16641,
                47606, 25985, 65535, 38292, 32637, 46965, 0, 0, 65535, 43194, 51604, 44099, 0,
                7227, 22714, 64724, 11707, 35800, 0, 47251, 28182, 0, 7927, 1420, 65535, 8619,
                65535, 65535, 7935, 6848, 21758, 29316, 5142, 65535, 54911, 21078, 54973, 0, 25066,
                32146, 65535, 0, 0, 33518, 65535, 4494, 5927, 0, 24068, 14491, 35831, 23663, 54633,
                28542, 355, 65535, 49345, 0, 65535, 14805, 55041, 0, 0, 22232, 55151, 22134, 50255,
                25815, 65535, 1706, 46932, 51002, 44749, 65535, 0, 21397, 0, 2797, 57997, 63757,
                65535, 65535, 11496, 34384, 25924, 60154, 10345, 1791, 0, 46341, 0, 3677, 53238, 0,
                0, 64719, 17992, 65535, 65535, 61080, 0, 65535, 65535, 27029, 34643, 20245, 14036,
                0, 0, 0, 37778, 65535, 0, 65535, 51710, 17623, 53820, 52811, 0, 1743, 33557, 65442,
                65535, 40611, 0, 34057, 65535, 44221, 36788, 65535, 65535, 0, 3015, 0, 40790, 0,
                8955, 17856, 51235, 20751, 65535, 0, 45481, 59062, 65535, 0, 2541, 24729, 60073, 0,
                11395, 65535, 0, 57571, 0, 13740, 56893, 65535, 23249, 64798, 14745, 2270, 21003,
                0, 34736, 65535, 65274, 45225, 8814, 36312, 49767, 0, 51425, 65535, 36868, 1460,
                63005, 0, 0, 0, 0, 0, 45271, 27843, 24718, 40924, 54905, 49049, 10983, 0, 52854,
                7630, 51904, 63736, 65535, 65535, 0, 65535, 16950, 55238, 65535, 43730, 40286,
                63048, 16438, 3220, 0, 53076, 3076, 54892, 65535, 54533, 18667, 0, 48521, 31057,
                60902, 55526, 27320, 42227, 0, 1559, 42274, 17592, 9878, 50275, 8497, 62932, 21999,
                50298, 29298, 29670, 60566, 6843, 40886, 28332, 41238, 32108, 4658, 23336, 65535,
                52106, 27953, 10551, 59820, 42776, 43673, 62396, 59147, 23377, 0, 48838, 46264,
                65535, 51556, 0, 32553, 41113, 65535, 23338, 33401, 55983, 41733, 0, 0, 31038,
                37062, 65535, 65535, 46169, 8065, 0, 34680, 64523, 65535, 59580, 65535, 64083,
                7890, 25459, 47034, 16698, 7520, 63008, 44319, 56353, 5587, 44304, 36559, 26850,
                21917, 17608, 61953, 65535, 0, 64684, 2685, 11570, 59033, 28368, 0, 65535, 23750,
                52126, 22256, 19875, 45932, 13383, 25314, 37325, 9017, 0, 18122, 65352, 17979,
                16486, 65535, 27970, 17688, 30263, 65535, 44976, 54570, 60634, 0, 35890, 64266,
                65535, 65535, 12175, 58738, 0, 0, 41705, 0, 62932, 11193, 7975, 15453, 65535,
                54188, 10206, 65535, 51233, 10004, 44002, 0, 10373, 65535,
            ]))
            .unwrap(),
            c: 101,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 49, b: 0, c: 3661801485 },
            FixedTestStruct { a: 255, b: 1165458982873456205, c: 2702418165 },
            FixedTestStruct { a: 99, b: 13772866836731448863, c: 0 },
            FixedTestStruct { a: 56, b: 9798629305767369621, c: 88702981 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 983,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    10682, 11926, 19905, 0, 40889, 6559, 42566, 40916, 57231, 65535, 0, 65535,
                    45395, 30309, 61567, 32258, 61175, 0, 65535, 65535, 0, 0, 61810, 40462, 34187,
                    47378, 50648, 60987, 59028, 0, 48804, 65535, 6283, 52359, 27892, 44503, 10588,
                    591, 32817, 26121, 65535, 36260, 12678, 25700, 23417, 0, 38350, 20493, 33320,
                    0, 0, 20030, 63121, 56394, 65535, 9660, 46462, 0, 0, 31354, 65535, 27387,
                    52989, 46264, 15508, 0, 65535, 0, 65535, 65535, 46700, 0, 54934, 65535, 30122,
                    54865, 0, 48009, 5854, 6341, 65535, 17311, 10228, 44708, 46177, 65535, 65535,
                    65535, 64656, 16802, 65535, 0, 45383, 0, 24489, 0, 49608, 7224, 14244, 20670,
                    45082, 54799, 0, 47599, 39966, 1108, 65535, 50626, 0, 24793, 65535, 51745,
                    65535, 0, 34156, 65535, 59821, 48237, 64971, 65535, 63561, 62332, 0, 64266,
                    64445, 16781,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    32352, 0, 15126, 38681, 65535, 47058, 58605, 0, 17141, 65535, 8094, 32935, 0,
                    16212, 56362, 0, 49463, 65535, 52662, 65535, 65535, 0, 65535, 41490, 22091,
                    14497, 65535, 0, 12524, 43544, 58849, 60613, 0, 65535, 58160, 32629, 24284,
                    32893, 54849, 65107, 65535, 15766, 44600, 59423, 65535, 52355, 27209, 62547,
                    12931, 2474, 34178, 63038, 22639, 65535, 65535, 11063, 0, 65535, 12669, 0,
                    52770, 30176, 43870, 65535, 0, 48832, 19154, 65535, 63925, 0, 24492, 65535,
                    64404, 51773, 30528, 7875, 0, 9585, 44929, 65535, 0, 29673, 58018, 33778,
                    45924, 65535, 28813, 59424, 19173, 40767, 34681, 65535, 54336, 31449, 0, 65535,
                    0, 37289, 65535, 10110, 2744, 43292, 6858, 10761, 52717, 65535, 65535, 29956,
                    54692, 65535, 8536, 26781, 10216, 4224, 64514, 0, 65535, 29022, 0, 64169,
                    41339, 37657, 50595, 33082, 20268, 10802, 0, 15074, 30209, 61773, 65535, 27406,
                    54087, 18836, 1839, 1599, 0, 65535, 53507, 0, 0, 42123, 16488, 4000, 43262,
                    65535, 56056, 65535, 65535, 32318, 29190, 17330, 65535, 65535, 37373, 0, 0,
                    34500, 52434, 38374, 2973, 27132, 2598, 18830, 65535, 65535, 50302, 39261, 841,
                    49627, 0, 22209, 0, 58329, 60203, 65535, 25028, 65535, 65535, 46984, 0, 0,
                    37125, 0, 11957, 0, 61739, 65535, 65535, 3594, 0, 10969, 41745, 35233, 21220,
                    45934, 0, 37802, 11680, 35327, 9340, 26849, 0, 36300, 0, 65535, 0, 65535,
                    65474, 65535, 65535, 47635, 51643, 38626, 31460, 24151, 1937, 52707, 65535,
                    45661, 18188, 0, 38561, 30084, 0, 65535, 65535, 0, 36542, 52692, 21044, 26597,
                    27812, 26434, 15034, 0, 0, 43628,
                ]))
                .unwrap(),
                c: 193,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x00fa804cb785eb45fdd8d96b6466f613e0d0e5a2c0d3b2d0a568b162c9ceea63");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_random_chaos_2() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            54727, 11819, 50263, 46482, 54220, 42693, 0, 22107, 11129, 65535, 16209, 46452, 65535,
            0, 30563, 8777, 0, 65535, 15918, 40582, 10690, 65535, 48353, 60929, 0, 21050, 23672,
            26403, 0, 34257, 65535, 65535, 28007, 77, 44048, 37936, 60080, 43315, 65535, 65535,
            30672, 39262, 8173, 0, 65535, 65535, 49591, 40876, 28763, 46657, 0, 34899, 34333, 4175,
            65535, 46983, 45934, 42854, 56451, 0, 60002, 27230, 3132, 46291, 62729, 65535, 53360,
            8576, 41494, 12182, 65535, 14513, 65535, 17973, 11354, 36508, 0, 30375, 57680, 62659,
            0, 58449, 1472, 59932, 54853, 153, 34517, 65535, 0, 65535, 65535, 0, 2724, 0, 35691,
            56116, 2683, 14798, 0, 9643, 0, 0, 13611, 65535, 64156, 0, 32013, 6746, 25043, 38331,
            37728,
        ]))
        .unwrap(),
        c: 252,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([
            122, 195, 183, 90, 67, 74, 61, 158, 73, 85, 177, 39, 86, 156, 4, 74, 57, 29, 33, 0, 11,
            9, 96, 184, 3, 51, 151, 100, 44, 182, 103, 196, 234, 247, 98, 137, 139, 5, 178, 64,
            179, 34, 35, 14, 247, 96, 160, 138, 33, 136, 143, 55, 156, 186, 108, 241, 197, 47, 243,
            63, 16, 240, 10, 153, 24, 67, 130, 240, 242, 35, 164, 27, 49, 9, 122, 85, 220, 218,
            213, 26, 218, 96, 1, 208, 39, 72, 141, 152, 162, 237, 174, 201, 103, 86, 191, 244, 177,
            157, 235, 149, 246, 211, 225, 187, 205, 78, 9, 15, 196, 34, 97, 248, 244, 98, 64, 254,
            162, 180, 196, 2, 247, 169, 94, 144, 117, 57, 11, 39, 9, 89, 11, 21, 137, 215, 212, 12,
            12, 41, 121, 25, 133, 164, 28, 81, 117, 83, 138, 27, 178, 167, 119, 201, 106, 146, 48,
            48, 164, 103, 176, 172, 52, 12, 190, 90, 251, 54, 190, 0, 136, 77, 194, 244, 62, 64,
            107, 67, 64, 0, 141, 63, 29, 22, 99, 133, 227, 136, 90, 9, 196, 185, 44, 163, 95, 70,
            255, 202, 2,
        ]))
        .unwrap(),
        e: VarTestStruct {
            a: 26739,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                28644, 7509, 11824, 50120, 65535, 20201, 0, 10747, 41370, 0, 63382, 65535, 65535,
                45440, 45631, 22209, 65535, 0, 2604, 0, 0, 0, 65535, 63128, 50716, 0, 65535, 59651,
                13078, 63944, 16168, 65535, 63701, 34105, 50677, 60286, 4220, 0, 5618, 65535,
                52191, 18764, 65057, 34039, 18294, 52679, 59160, 27803, 37025, 53719, 63982, 46219,
                0, 61724, 1198, 26759, 58172, 3711, 65535, 31685, 56177, 9917, 0, 29867, 65535,
                61012, 34161, 17721, 65535, 9236, 20515, 20068, 30090, 62613, 0, 0, 64396, 40847,
                47922, 34891, 38869, 764, 25497, 59420, 65535, 0, 37635, 2475, 14692, 31297, 0,
                55138, 65535, 62874, 23949, 3917, 6731, 0, 65535, 38365, 41538, 0, 20422, 65535,
                23199, 0, 378, 44521, 0, 17178, 46414, 15965, 11673, 0, 37957, 65535, 65535, 29979,
                8702, 0, 340, 65535, 39817, 0, 63323, 9115, 50186, 5630, 0, 65535, 32218, 0, 65535,
                13353, 65535, 2506, 65535, 55667, 3986, 44200, 25068, 55544, 17569, 65535, 7143,
                65535, 39815, 21724, 25560, 368, 0, 0, 65535, 65535, 65535, 55363, 48197, 13665,
                21501, 53482, 65535, 16287, 65535, 32753, 90, 61977, 20239, 12053, 32547, 14452,
                16863, 65535, 26673, 0, 31658, 163, 13527, 37206, 3299, 31386, 56088, 9979, 38089,
                49184, 0, 33364, 65535, 10766, 3212, 23622, 33603, 27525, 65535, 65535, 49210,
                30134, 23443, 4431, 19639, 65535, 54917, 24109, 42834, 25752, 65535, 35809, 63796,
                29040, 45369, 3792, 32898, 33736, 8182, 65535, 7506, 65535, 6071, 0, 37065, 26059,
                65535, 17251, 0, 54521, 40760, 0, 58897, 65535, 31266, 43824, 65535, 65535, 65535,
                4234, 0, 62763, 29840, 65535, 65535, 65535, 24806, 65535, 0, 11205, 10461, 0,
                13044, 33332, 48175, 40213, 65535, 0, 7085, 10764, 37303, 16804, 43177, 65535,
                4554, 63714, 63627, 57810, 3262, 0, 21247, 15616, 11994, 35678, 13680, 64163, 0,
                18461, 59878, 23688, 54861, 65535, 28481, 52445, 65535, 45573, 18098, 18168, 65535,
                0, 0, 65535, 0, 14783, 0, 18677, 31415, 17016, 0, 48322, 38185, 65535, 5154, 11625,
                46537, 7910, 3146, 65535, 15227, 28257, 65535, 60887, 30971, 54877, 0, 65535,
                19614, 54181, 0, 54088, 0, 43901, 65535, 15063, 35888, 42191, 47814, 43264, 28065,
                64657, 62227, 65535, 0, 65535, 65535, 21466, 18576, 0, 19013, 65215, 65535, 65535,
                10989, 33180, 65535, 0, 37338, 31923, 30432, 0, 49731, 12849, 27465, 10012, 0, 0,
                18807, 37852, 9864, 48853, 65535, 37704, 0, 29693, 62220, 1941, 65535, 65535,
                65535, 65535, 39562, 48756, 0, 4776, 65535, 63247, 29007, 18456, 48677, 65535,
                13182, 61658, 0, 65535, 60387, 65535, 2539, 24999, 348, 65493, 0, 49470, 53083,
                54704, 41440, 56188, 7944, 65535, 8817, 17228, 21784, 59090, 65535, 22886, 55963,
                0, 65535, 29246, 1639, 20226, 12403, 65535, 0, 0, 17331, 0, 34402, 0, 0, 63450,
                50505, 65535, 20740, 0, 43329, 24665, 65535, 32716, 65535, 0, 0, 65535, 39151,
                22699, 0, 12055, 49227, 65535, 56082, 65535, 16100, 0, 0, 65535, 0, 15120, 0, 2470,
                65535, 59647, 0, 65535, 58344, 0, 47092, 0, 36667, 65535, 65535, 12512, 596, 38343,
                0, 45121, 40434, 0, 4835, 3339, 65535, 0, 58009, 3746, 13381, 0, 0, 65535, 32548,
                0, 23513, 65535, 65535, 65142, 65535, 7016, 22020, 29275, 0, 46115, 65535, 28879,
                65535, 62973, 65535, 0, 21132, 65535, 27081, 0, 65535, 0, 22524, 65535, 34923, 0,
                19944, 0, 29950, 0, 23207, 36016, 8802, 0, 39360, 65535, 47030, 63276, 65535,
                65535, 0, 0, 0, 65535, 65535, 54049, 39154, 20380, 65535, 19057, 56561, 37942,
                7061, 49043, 61315, 13443, 65535, 65535, 20065, 0, 65535, 30840, 43973, 60538,
                29023, 44984, 1892, 55283, 65535, 4129, 16363, 11964, 33134, 61195, 26356, 65535,
                62325, 27881, 58494, 0, 0, 36218, 18275, 57453, 21738, 49622, 62769, 6325, 11550,
                27822, 11429, 65535, 60109, 40769, 65535, 65535, 54364, 50154, 1212, 36993, 14639,
                65535, 0, 35993, 10919, 30710, 0, 35066, 0, 65535, 0, 5772, 0, 36255, 40269, 14862,
                55082, 40997, 0, 29843, 65535, 62507, 0, 40211, 63852, 65535, 0, 0, 65535, 65535,
                49887, 43565, 10575, 31844, 61982, 8771, 65535, 0, 15880, 20851, 31339, 46122,
                58914, 2017, 39112, 54124, 47541, 65535, 5427, 29640, 51044, 31402, 59264, 0, 8277,
                9171, 0, 31198, 53559, 18988, 58309, 36392, 0, 42461, 65535, 34309, 20621, 27109,
                65535, 1022, 17763, 16513, 45819, 65535, 55842, 4204, 50292, 24274, 47003, 42656,
                0, 21053, 65535, 9480, 65535, 0, 49254, 16630, 40105, 35609, 1479, 0, 900, 28345,
                26429, 39968, 33270, 0, 10428, 44780, 27263, 39925, 0, 30209, 5412, 0, 62122,
                65535, 65535, 65535, 45832, 21972, 5797, 0, 46820, 36058, 49186, 29663, 12432,
                62953, 39803, 37474, 11824, 41000, 40243, 38171, 17490, 65535, 6431, 65535, 45610,
                65535, 65535,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 4068278636694973012, c: 1030405350 },
            FixedTestStruct { a: 204, b: 0, c: 1814711992 },
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 3907516379 },
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 2068723971 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 57314,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([1810])).unwrap(),
                c: 255,
            },
            VarTestStruct {
                a: 9392,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([46152])).unwrap(),
                c: 179,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_random_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf5c310453f8053e0cacc58bb955684048cf2879354b546433592a8fc6e84ef28");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_random_offset_11_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_random_offset_11_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_random_offset_11_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_random_offset_11_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_random_offset_2_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_random_offset_2_minus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_random_offset_2_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_random_offset_2_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_random_offset_2_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_random_offset_2_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_random_offset_7_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_random_offset_7_plus_one/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_complex_test_struct_random_offset_7_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/ComplexTestStruct_random_offset_7_zeroed/serialized.ssz_snappy");

    deserialize::<ComplexTestStruct>(&encoding);
}

#[test]
fn test_containers_complex_test_struct_zero() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xfa353b25483c1bce7a459da360aef0bf390398ff94040fc368ca0656dd36cafd");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_0() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x796da05fdc213f44fba67f9c4c113d647a86f70a58950461b7326b411b94eb6d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_1() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
            .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x8738293bf20a8e620887aec3956815d54d8ef18feb18756c8cb60236ee972c98");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_2() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x09c0008b8fb65319fe8e5db9e0334cf57328793c9e36a7dd4638de677f40392c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_3() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe545099c564f5331c87e9b4805760b5a212ce9e552e0c4ac4ab1288c185907ca");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_4() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2278700f1c8b6bacee1aeb99204b47d3e12939b88c75534e07595e236be676c3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_5() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xaa57bdc7c1f1c3582329bcfe7e14331b4ebe8396a4539d450d8df2e489783190");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_6() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xd0682307761ba3cd546856f9b77594c4fa2e831b2ca74863d7cde954cb2e2ea4");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_7() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xcfde5a1ae1dc38d662d2f34b99c9ac9c36897a12c9aaff1c35ec577d834bf16b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_8() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x587e3644da523a49b282fb076f22a8ba61ae675e7e0427ec9d88e3d20265cf7b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_9() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0,
            ]))
            .unwrap(),
            c: 0,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
            FixedTestStruct { a: 0, b: 0, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
            VarTestStruct {
                a: 0,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                ]))
                .unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x26490ddf2bdc78df57dae1cef92531f24edc013c4fbce99fff734aca1820828a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_chaos_0() {
    let value = ComplexTestStruct {
        a: 65535,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 224,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([0])).unwrap(),
        e: VarTestStruct {
            a: 44241,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 253,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 5410162056354932461, c: 1518366908 },
            FixedTestStruct { a: 255, b: 17752629441074103049, c: 3943227030 },
            FixedTestStruct { a: 145, b: 18446744073709551615, c: 4010025034 },
            FixedTestStruct { a: 42, b: 2779015936643351483, c: 4294967295 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([0])).unwrap(),
                c: 253,
            },
            VarTestStruct {
                a: 65535,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([17711])).unwrap(),
                c: 0,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x436e534d95a1a12bf97c5d140c8e03399f62fe64a8335d828e17fa2769ba0ea6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_chaos_1() {
    let value = ComplexTestStruct {
        a: 0,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([
            8564, 58231, 65535, 0, 0, 24610, 65535, 63219, 28771, 0, 42839, 0, 0, 58799, 0, 0,
            65535, 9698, 20909, 18416, 44003, 37876, 65535, 11285, 0, 0, 65535, 7098, 45637, 0,
            36145, 50040, 65535, 47417, 65535, 1536, 0, 0, 41457, 13966, 1174, 17070, 44057, 65535,
            0, 0, 0, 16102, 4257, 65535, 0, 57474, 50989, 64380, 65535, 28019, 65535, 65535, 3317,
            25228, 6857, 11644, 48463, 28939, 18110, 65535, 23289, 37649, 2141, 59391, 0, 52753,
            11556, 40070, 35041, 0, 14187, 45309, 27530, 3086, 12714, 39807, 0, 65535, 45510,
            28492, 19647, 31047, 42926, 59070, 65535, 54563, 59543, 65535, 22876, 26594, 63493, 0,
            27724, 51362, 26337, 0, 55583, 51781, 23421, 9737, 51954, 6741, 52313, 27377, 46942,
            65535, 0, 65535, 62684, 24120, 40347, 65535, 35789, 47615, 0, 65535, 519, 65535, 7594,
            57011, 39206, 46855,
        ]))
        .unwrap(),
        c: 80,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([])).unwrap(),
        e: VarTestStruct {
            a: 0,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 145,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 141, b: 2551950507776449593, c: 1228821437 },
            FixedTestStruct { a: 192, b: 18446744073709551615, c: 264351396 },
            FixedTestStruct { a: 9, b: 17902181071362934843, c: 4294967295 },
            FixedTestStruct { a: 67, b: 6576782729984968139, c: 0 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 65224,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    56600, 0, 31761, 52084, 46812, 0, 37606, 64521, 9535, 43867, 46039, 21311,
                    50903, 33032, 30180, 0, 0, 65535, 2353, 101, 40042, 0, 0, 24071, 30715, 42124,
                    6882, 0, 36370, 65535, 5756, 748, 20482, 49167, 11548, 10076, 0, 65535, 65535,
                    0, 7781, 2134, 0, 65535, 41257, 39430, 17936, 0, 56966, 317, 11660, 0, 49999,
                    0, 48048, 10742, 0, 65535, 22940, 34882, 1087, 14107, 40229, 2318, 13391,
                    35939, 45422, 23853, 0, 0, 40796, 16573, 8351, 4253, 33724, 42128, 35278, 0,
                    35655, 42941, 11053, 500, 65535, 20741, 65535, 2317, 33738, 0, 63656, 65535,
                    39161, 65535, 0, 0, 14530, 45416, 26008, 23924, 1994, 64224, 0, 56009, 53206,
                    65535, 20695, 36394, 65535, 65535, 32711, 0, 65535, 65535, 65535, 65535, 0,
                    32637, 65535, 65535, 0, 65535, 34458, 44762, 28180, 3823, 0, 65535, 37042,
                    65535, 65535, 45559, 37524, 0, 40489, 41212, 31696, 65535, 0, 65535, 62896,
                    62451, 33440, 64374, 12928, 50948, 65535, 0, 65535, 65535, 16113, 45351, 47743,
                    0, 3907, 5872, 25928, 60406, 0, 41317, 0, 65535, 65535, 13208, 39789, 0, 0, 0,
                    65535, 0, 0, 46603, 0, 20825, 0, 709, 0, 42433, 31868, 65535, 65535, 31528,
                    65535, 38310, 11840, 469, 49907, 61644, 49338, 0, 65535, 65535, 56308, 65535,
                    41241, 65535, 0, 65535, 19464, 0, 0, 40039, 17818, 23454, 0, 3694, 40871,
                    37605, 0, 37510, 1740, 7762, 0, 65402, 0, 0, 65535, 65535, 0, 65535, 43863,
                    38184, 41862, 0, 41588, 11636, 23305, 57184, 43277, 46876, 942, 0, 63265,
                    50351, 65535, 42186, 3573, 0, 27032, 0, 65535, 62190, 0, 27725, 17911, 42125,
                    0, 34124, 0, 52653, 16461, 32588, 46832, 34179, 65535, 32137, 8074, 0, 42590,
                    65535, 47087, 25417, 65535, 65535, 65535, 1476, 44579, 9033, 65535, 39935,
                    52755, 41295, 65535, 31939, 36601, 6926, 40091, 65535, 40007, 64321, 15169,
                    58774, 65535, 65535, 0, 15267, 26517, 34030, 35855, 65535, 21421, 21490, 65012,
                    36628, 0, 0, 64440, 65535, 65535, 53494, 41266, 65535, 8817, 33082, 49874,
                    54457, 24837, 14921, 37103, 0, 45588, 57889, 54278, 0, 65535, 65535, 0, 50737,
                    18118, 65535, 54432, 51163, 24925, 65535, 37206, 0, 5775, 0, 46440, 13361,
                    65535, 0, 52223, 36023, 0, 7212, 65535, 13976, 0, 53576, 65535, 65535, 3399,
                    65470, 21490, 65535, 0, 57419, 26682, 32132, 31349, 0, 63913, 16701, 62923,
                    65535, 22322, 20280, 35918, 11841, 65535, 65535, 44409, 0, 0, 53435, 0, 61009,
                    22652, 59882, 50889, 0, 42818, 0, 49610, 54014, 31847, 569, 46255, 14335,
                    23626, 18121, 63161, 0, 48834, 27132, 65535, 43846, 65535, 45448, 10736, 21994,
                    42385, 17169, 65535, 16422, 26005, 35343, 0, 58743, 56975, 65535, 2550, 65535,
                    11680, 26935, 13940, 40641, 25861, 32773, 0, 50811, 59832, 65535, 40228, 15430,
                    65535, 41464, 30031, 65535, 20909, 0, 65535, 11186, 45945, 0, 65535, 27995,
                    65535, 23437, 376, 22595, 65535, 61800, 55192, 2145, 43340, 0, 58291, 32430,
                    65535, 0, 45920, 38315, 0, 23067, 60034, 32871, 54288, 0, 15956, 46364, 33889,
                    48645, 47240, 44880, 61855, 39332, 3796, 0, 0, 27373, 65535, 25461, 0, 56914,
                    0, 38416, 53458, 0, 37735, 40434, 49852, 35545, 65535, 40822, 21207, 52258,
                    65535, 0, 63271, 65535, 1705, 26140, 47625, 65535, 17852, 55603, 35244, 19550,
                    31748, 0, 36363, 0, 65535, 1320, 24478, 3493, 65535, 32498, 20745, 0, 65535,
                    8312, 65535, 65535, 56304, 65535, 7710, 0, 0, 35734, 36134, 31444, 3555, 65535,
                    43202, 43305, 37528, 65535, 35015, 8089, 8947, 2872, 43079, 58214, 35030,
                    30203, 48410, 58640, 9390, 41965, 10568, 29385, 26143, 19045, 35007, 35051,
                    51280, 417, 54846, 65535, 20017, 15520, 48884, 65535, 65535, 5078, 65535,
                    65535, 12861, 0, 44801, 7123, 45572, 40807, 48886, 18613, 0, 58150, 0, 14353,
                    34568, 33061, 65535, 56269, 0, 23727, 0, 50158, 0, 37952, 29924, 0, 60633, 0,
                    65535, 57732, 45137, 45876, 30641, 46256, 10369, 14824, 65535, 65535, 61517,
                    18262, 48816, 4225, 24968, 65535, 45883, 0, 0, 7710, 44403, 13037, 30310, 0,
                    19340, 1609, 0, 56915, 33712, 65535, 44415, 0, 20124, 12941, 31993, 51639,
                    5170, 38317, 65535, 0, 0, 12474, 65535, 53173, 0, 0, 30743, 52757, 26642,
                    65535, 49754, 884, 47564, 0, 32687, 9040, 52980, 65535, 42059, 0, 59198, 57792,
                    65535, 60792, 30934, 19458, 58984, 34757, 13434, 50929, 37958, 65535, 43630, 0,
                    43949, 58805, 65535, 65535, 65535, 19984, 65535, 32558, 0, 20471, 27073, 51893,
                    65535, 50217, 0, 39244, 55549, 23468, 21564, 65535, 3538, 496, 0, 65535, 16765,
                    11771, 28493, 65535, 36568, 0, 26868, 65535, 46326, 56253, 34608, 65535, 63073,
                    27848, 59618, 65535, 38457, 65535, 34675, 0, 32751, 65535, 65535, 54862, 44866,
                    26564, 3474, 27864, 4585, 1981, 14372, 0, 37663, 6864, 20457, 56687, 0, 65535,
                    34602, 38592, 0, 26662, 65056, 25283, 58177, 65535, 0, 7773, 65535, 0, 56295,
                    62408, 29491, 2300, 0, 12450, 38200, 0, 48975, 65519, 20637, 11803, 3742,
                    50580, 65535, 13312, 65535, 0, 0, 0, 0, 47549, 28440, 0, 33614, 0, 0, 1323,
                    65535, 0, 41544, 48431, 0, 16018, 65209, 0, 65535, 65535, 32853, 54779, 9829,
                    65535, 18353, 0, 2467, 0, 65086, 59330, 65535, 44340, 17221, 65535, 0, 10488,
                    13534, 12041, 30253, 11287, 60461, 57154, 28711, 0, 26712, 59433, 32725, 0,
                    31293, 51504, 63333, 46241, 8302, 0, 43332, 0, 65535, 65535, 38022, 65535,
                    7988, 13751, 56906, 65535, 21060, 0, 35117, 65535, 0, 10634, 65535, 3325, 0,
                    65535, 63867, 33782, 53522, 11320, 42282, 65535, 65535, 7496, 65535, 12485,
                    38555, 0, 0, 31195, 25727, 65535, 0, 0, 65509, 13275, 30811, 65535, 0, 50631,
                    12184, 59295, 65535, 65535, 35958, 0, 58216, 43365, 65535, 27207, 904, 65535,
                    51842, 35291, 22417, 48692, 0, 58524, 27047, 65535, 12523, 49344, 8493, 65535,
                    65535, 35244, 4823, 34631, 13865, 50519, 53984, 8566, 59750, 31949, 65535,
                    33739, 19664, 32342, 57648, 50656, 65535, 65535, 18149, 65535, 40327, 29955,
                    45508, 0, 0, 60093, 3594, 58830, 0, 27443, 21810, 32487, 65535, 20858, 0,
                    60940, 54966, 65535, 65535, 65346, 33917, 18830, 5978, 0, 65535, 65535, 59850,
                    49630, 42312, 10152, 65535, 0, 65535, 65535, 61287, 0, 56450, 8683, 6633,
                    42012, 35214, 39797, 0, 30726, 14013, 32969, 0, 10921, 21051, 62434, 0, 32044,
                    0, 56800, 0, 65535, 46312, 65535, 14566, 4262, 0, 65535, 20863, 54045, 26891,
                    48484, 56404, 36192, 30175, 0, 60233, 64930, 47069, 65535, 60672, 55080, 65535,
                    65535, 31624, 22731, 0, 10766, 65535, 0, 60161, 16290, 52035, 0, 56414, 0,
                    58001, 61727, 9740, 65535, 64347, 0, 59041, 0, 4366, 50095, 63260, 60937, 7222,
                    1108, 0, 14077, 0, 65535, 0, 65535, 65535, 61571, 0, 0, 36386, 39286, 65410,
                    20350, 43267, 12243, 0, 12638, 65535, 0, 61417, 0, 65535, 0, 0, 0, 0, 6918,
                    47017, 23656, 0, 43054, 37613, 33514, 32310, 35171, 52683, 3297,
                ]))
                .unwrap(),
                c: 141,
            },
            VarTestStruct {
                a: 59415,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    0, 65535, 48644, 0, 40978, 16466, 65535, 65535, 45423, 0, 61423, 24196, 65535,
                    29335, 16685, 46316, 33355, 65535, 37696, 0, 65535, 46822, 36404, 56740, 37355,
                    2265, 65535, 65535, 65535, 65535, 52433, 65535, 33281, 51011, 48199, 58395,
                    28191, 65535, 21034, 17496, 37674, 20854, 16846, 65535, 65535, 0, 23045, 39577,
                    11889, 65535, 64960, 30494, 60573, 46796, 10877, 21882, 35892, 39881, 59415,
                    25418, 65535, 55770, 65535, 0, 51738, 10026, 46718, 0, 29473, 2258, 65535,
                    65535, 21544, 30307, 32329, 0, 30384, 48616, 65535, 57627, 40417, 12520, 0,
                    7877, 65535, 31668, 33442, 33676, 1684, 9274, 65535, 0, 15875, 25232, 21820,
                    20019, 64738, 62726, 65535, 50846, 19753, 6086, 65535, 65535, 14711, 36820,
                    7006, 3134, 43946, 13265, 14490, 0, 18428, 64861, 44336, 24269, 16313, 33920,
                    0, 12444, 6174, 0, 25048, 19740, 0, 16649, 53662, 41088, 37263, 65535, 55789,
                    0, 16510, 61821, 2217, 21260, 30861, 27966, 65127, 47428, 4868, 24329, 58533,
                    42001, 0, 65535, 65535, 31781, 30875, 58489, 15592, 65535, 25646, 0, 25517, 0,
                    0, 56306, 27800, 36265, 21602, 62398, 64818, 65535, 24593, 0, 0, 0, 15717,
                    60554, 36208, 0, 0, 48798, 7980, 24421, 0, 25719, 55471, 0, 14932, 65535,
                    43250, 2944, 65535, 48450, 18166, 48486, 65535, 12682, 15929, 31640, 0, 27607,
                    20804, 20296, 30183, 37003, 36014, 0, 0, 37637, 4123, 30247, 27032, 34057,
                    64929, 51903, 55218, 41188, 65535, 7511, 65535, 65535, 53670, 53051, 0, 65535,
                    65535, 51375, 0, 0, 12266, 46234, 4317, 0, 55946, 65535, 33775, 52506, 57029,
                    4215, 50404, 33610, 61550, 65535, 65535, 28608, 31173, 0, 2045, 0, 2436, 6268,
                    0, 43205, 40820, 26137, 12987, 65535, 27437, 51924, 0, 10831, 65535, 65535,
                    4927, 41459, 12414, 65535, 48636, 59892, 63284, 65535, 65535, 50832, 47028,
                    65535, 56307, 0, 17694, 44038, 54451, 65535, 61363, 27357, 65535, 24160, 65535,
                    24015, 0, 65535, 65535, 5844, 54848, 46461,
                ]))
                .unwrap(),
                c: 42,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc8146e52b0d514f7e8597da0e6a2dd87cc5a7f7a66804b8b95f1d4ab456cf1a3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_complex_test_struct_zero_chaos_2() {
    let value = ComplexTestStruct {
        a: 34579,
        b: List::<u16, 128>::try_from(Vec::<u16>::from_iter([50087])).unwrap(),
        c: 255,
        d: List::<u8, 256>::try_from(Vec::<u8>::from_iter([255])).unwrap(),
        e: VarTestStruct {
            a: 53431,
            b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
            c: 24,
        },
        f: Vector::<FixedTestStruct, 4>::try_from(vec![
            FixedTestStruct { a: 0, b: 18446744073709551615, c: 0 },
            FixedTestStruct { a: 130, b: 4890254308393584740, c: 4294967295 },
            FixedTestStruct { a: 0, b: 8095910161686994940, c: 1172490908 },
            FixedTestStruct { a: 77, b: 18446744073709551615, c: 3490772606 },
        ])
        .unwrap(),
        g: Vector::<VarTestStruct, 2>::try_from(vec![
            VarTestStruct {
                a: 24115,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
                    65535, 5494, 54282, 65535, 458, 65535, 65535, 43245, 65535, 56877, 39976, 0,
                    5213, 30929, 9177, 55947, 10280, 17231, 29477, 65122, 13489, 65535, 29727,
                    22063, 13750, 7948, 33605, 0, 20424, 11286, 32240, 16004, 65535, 35739, 12687,
                    0, 0, 63191, 65535, 14573, 10949, 65535, 54890, 65535, 59052, 0, 13677, 46594,
                    58479, 0, 0, 36094, 1241, 10406, 38466, 42458, 0, 65535, 25654, 47501, 23228,
                    17428, 65535, 0, 60527, 63139, 15239, 42030, 55321, 50142, 13832, 39630, 0, 0,
                    0, 65535, 55123, 36306, 1172, 0, 14156, 3565, 65535, 55405, 58034, 2423, 2066,
                    26136, 65535, 65535, 42754, 6265, 60112, 33405, 0, 56860, 0, 34335, 0, 51621,
                    14790, 59823, 52848, 65535, 65535, 26110, 0, 16698, 33516, 61399, 51219, 58511,
                    35478, 44672, 22148, 15437, 63434, 65535, 65535, 48165, 65535, 65535, 65535, 0,
                    64413, 0, 56395, 0, 46914, 49943, 0, 0, 11422, 23425, 65535, 0, 65535, 17335,
                    60069, 0, 0, 65535, 19534, 0, 35602, 40186, 5634, 65535, 57091, 65535, 9184, 0,
                    47666, 65535, 56669, 39761, 31955, 46925, 24344, 54905, 10859, 39298, 65535,
                    51944, 34403, 16866, 54918, 25027, 15255, 59647, 65535, 52147, 0, 0, 2987,
                    51416, 27716, 7052, 55016, 52498, 65535, 44602, 0, 27900, 0, 19499, 54526,
                    15835, 65535, 64623, 38502, 60475, 4497, 10714, 60560, 65535, 0, 57169, 13874,
                    29889, 48956, 20434, 20364, 10859, 65535, 31159, 65535, 65535, 5307, 0, 0,
                    65535, 54308, 41464, 47098, 59857, 12838, 60112, 54408, 37997, 26218, 52907,
                    52086, 65535, 0, 54622, 27862, 41763, 1008, 0, 65535, 0, 14998, 65535, 53312,
                    28514, 0, 65535, 0, 65535, 30738, 65535, 27499, 37804, 65535, 49339, 65535, 0,
                    0, 65535, 57808, 16173, 65535, 0, 14476, 65535, 0, 65535, 26707, 18962, 10941,
                    45750, 34817, 17018, 65535, 0, 0, 1607, 2355, 10455, 65535, 65535, 0, 17542,
                    16266, 9198, 2897, 3354, 0, 65535, 55527, 65535, 64628, 30024, 6440, 38625,
                    45298, 19336, 29522, 64967, 1488, 54627, 0, 18347, 24681, 65535, 45928, 59085,
                    52293, 36620, 0, 0, 4817, 0, 45399, 48407, 19151, 49897, 65535, 0, 54695,
                    32567, 48799, 11772, 46724, 0, 0, 45904, 65535, 65125, 65535, 0, 0, 65535,
                    63007, 27517, 65535, 33114, 26039, 59185, 49248, 832, 2059, 34116, 51135,
                    11376, 57190, 65535, 45829, 65535, 65535, 43172, 65535, 60040, 19958, 8851, 0,
                    47486, 11350, 0, 59854, 44897, 23302, 0, 0, 44992, 12467, 0, 0, 0, 46745,
                    45069, 29618, 45419, 0, 59113, 0, 8274, 0, 0, 38198, 19727, 65535, 57090,
                    17431, 65535, 65535, 25832, 37507, 1261, 14164, 59986, 0, 16289, 40483, 458,
                    42077, 46410, 39332, 61749, 0, 0, 22810, 59629, 65535, 5913, 12922, 42798,
                    60132, 60160, 0, 44639, 10726, 22241, 9664, 34904, 11920, 49989, 0, 65535,
                    21295, 48605, 2907,
                ]))
                .unwrap(),
                c: 55,
            },
            VarTestStruct {
                a: 11,
                b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([18584])).unwrap(),
                c: 12,
            },
        ])
        .unwrap(),
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/ComplexTestStruct_zero_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: ComplexTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4a54450bf13e580af032198c139336321ed5fe021a9d7abc32fd8c5516d0dfc7");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_fixed_test_struct_extra_byte() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/FixedTestStruct_extra_byte/serialized.ssz_snappy",
    );

    deserialize::<FixedTestStruct>(&encoding);
}

#[test]
fn test_containers_fixed_test_struct_max() {
    let value = FixedTestStruct { a: 255, b: 18446744073709551615, c: 4294967295 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3925681862db7892428eac4afae08671930e623601b5b85fbbc366371e29acd7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_max_chaos_0() {
    let value = FixedTestStruct { a: 0, b: 16368780024300315290, c: 3425460342 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_max_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf9da7cee7f59d318ddece7744f9d57038776dcd2cb84ec1487df7810ab855eb8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_max_chaos_1() {
    let value = FixedTestStruct { a: 215, b: 0, c: 872994431 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_max_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x775dcfb6a6f9ca7b3cc6e1a705c6892d46f88448ff5a32a139e17d5147c35f20");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_max_chaos_2() {
    let value = FixedTestStruct { a: 255, b: 6156748712181862619, c: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_max_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa2302ab770b50379d8a20013864f1ce653d180241a54a23e57413cb63b63148b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_0() {
    let value = FixedTestStruct { a: 24, b: 13167263067087249200, c: 734541227 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2f104507507c20439914e44dbbc82ab18c9c506cadbe96c33b136f3a4ff0f182");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_1() {
    let value = FixedTestStruct { a: 31, b: 736233927488800041, c: 1393334686 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf157cd7285b6607caac863911709648c432059be3cc3ccd7e7efbbd0abdf2cb0");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_2() {
    let value = FixedTestStruct { a: 195, b: 16990693813108383139, c: 1812634554 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xadcb9275cf22b9fbe5a8ef1372336712f9402e335e3b4e085400955909f5b463");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_3() {
    let value = FixedTestStruct { a: 77, b: 9825468808305409092, c: 3282831501 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa31d9957f3f5c3f46bbc9916d92ac481f13a9d86df14c5960ea82d05c4930bfc");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_4() {
    let value = FixedTestStruct { a: 142, b: 12943316248327749193, c: 1177791689 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x37bb39a61e6a896157c3f9b750ae496f07ea4746c88f8125d2ce0b71b379b26c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_5() {
    let value = FixedTestStruct { a: 152, b: 968434759530807861, c: 1892169706 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4048d84fe07daa71c9275b17f8766ee911c7b5b15f72156a12e8eb7bf73bd112");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_6() {
    let value = FixedTestStruct { a: 251, b: 7019754704604394785, c: 10515695 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xed6fdab725487c5048cca3ddd3cc337d0b6a180c1d5207cf95d7f5dd6cef97b5");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_7() {
    let value = FixedTestStruct { a: 245, b: 5504897097224035493, c: 3554733444 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x91acafb600aa939a37f345ef75dee1a0ac48593f5a884827a22db67cc9cba8e7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_8() {
    let value = FixedTestStruct { a: 95, b: 11592110677720298001, c: 675128003 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x393d6ba272e0211a0ea3e5d0abcf00a85a2d4680f804d0aee43205fb64d322b9");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_9() {
    let value = FixedTestStruct { a: 189, b: 11077154515319582367, c: 885055256 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc2db52e4b936b48ac2b1762a5de13ece767c2358bcf8388d7f3bd588a8bcddf0");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_chaos_0() {
    let value = FixedTestStruct { a: 224, b: 18446744073709551615, c: 4294967295 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x60c749becbd41b9c2cc1c45d9a3248248a359bbd3b51a63073a637f69078c87f");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_chaos_1() {
    let value = FixedTestStruct { a: 0, b: 14186696757779471686, c: 3610222285 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x353a7d181607e8a955687d78b0d6e8905276b7746885b0760caae95a51579518");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_random_chaos_2() {
    let value = FixedTestStruct { a: 130, b: 6370563341294793538, c: 4137753490 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_random_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x031b378c61c08633e1e99c601fdb3d899cc7f1c50c65ec8183e9caa958dadf43");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_zero() {
    let value = FixedTestStruct { a: 0, b: 0, c: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_zero_chaos_0() {
    let value = FixedTestStruct { a: 255, b: 0, c: 3380095576 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_zero_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xb7cf66c7aea564846607c9ecdcd467300442e1020ef59dcf2d2e988afb75c0b8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_zero_chaos_1() {
    let value = FixedTestStruct { a: 40, b: 14820154409811446657, c: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_zero_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0bef8d07795e1cb94eccc23fc5e0de20f96f777123ec914dc476513b74ce986b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_fixed_test_struct_zero_chaos_2() {
    let value = FixedTestStruct { a: 162, b: 18446744073709551615, c: 867140057 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/FixedTestStruct_zero_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: FixedTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9e79f87f5b034ada5f987f76e441790a13ead694ddd2d904170b6d6a93a9399d");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_single_field_test_struct_extra_byte() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/SingleFieldTestStruct_extra_byte/serialized.ssz_snappy");

    deserialize::<SingleFieldTestStruct>(&encoding);
}

#[test]
fn test_containers_single_field_test_struct_max() {
    let value = SingleFieldTestStruct { a: 255 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xff00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_max_chaos_0() {
    let value = SingleFieldTestStruct { a: 247 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_max_chaos_0/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf700000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_max_chaos_1() {
    let value = SingleFieldTestStruct { a: 76 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_max_chaos_1/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4c00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_max_chaos_2() {
    let value = SingleFieldTestStruct { a: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_max_chaos_2/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_0() {
    let value = SingleFieldTestStruct { a: 58 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3a00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_1() {
    let value = SingleFieldTestStruct { a: 7 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0700000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_2() {
    let value = SingleFieldTestStruct { a: 249 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf900000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_3() {
    let value = SingleFieldTestStruct { a: 127 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7f00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_4() {
    let value = SingleFieldTestStruct { a: 33 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2100000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_5() {
    let value = SingleFieldTestStruct { a: 238 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xee00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_6() {
    let value = SingleFieldTestStruct { a: 35 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2300000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_7() {
    let value = SingleFieldTestStruct { a: 45 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2d00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_8() {
    let value = SingleFieldTestStruct { a: 23 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x1700000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_9() {
    let value = SingleFieldTestStruct { a: 138 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x8a00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_chaos_0() {
    let value = SingleFieldTestStruct { a: 3 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_chaos_0/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0300000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_chaos_1() {
    let value = SingleFieldTestStruct { a: 17 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_chaos_1/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x1100000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_random_chaos_2() {
    let value = SingleFieldTestStruct { a: 42 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_random_chaos_2/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2a00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_zero() {
    let value = SingleFieldTestStruct { a: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0000000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_zero_chaos_0() {
    let value = SingleFieldTestStruct { a: 255 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_zero_chaos_0/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xff00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_zero_chaos_1() {
    let value = SingleFieldTestStruct { a: 15 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_zero_chaos_1/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x0f00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_single_field_test_struct_zero_chaos_2() {
    let value = SingleFieldTestStruct { a: 255 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/valid/SingleFieldTestStruct_zero_chaos_2/serialized.ssz_snappy");
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SingleFieldTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xff00000000000000000000000000000000000000000000000000000000000000");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_small_test_struct_extra_byte() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/SmallTestStruct_extra_byte/serialized.ssz_snappy",
    );

    deserialize::<SmallTestStruct>(&encoding);
}

#[test]
fn test_containers_small_test_struct_max() {
    let value = SmallTestStruct { a: 65535, b: 65535 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x5ee8ff3d8661977c818a2d7f926019872cfef9cf4270b99ff833160f41fc01ec");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_max_chaos_0() {
    let value = SmallTestStruct { a: 28192, b: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_max_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x006805ecbb4e3f031d5ce707ce5617e4944e1962212f655c71dcfffcb3aae99b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_max_chaos_1() {
    let value = SmallTestStruct { a: 65535, b: 18511 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_max_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x32c367f05a28d3f374ac725e7b9f3ea466012c486d2cb2afc47bbe615e513c4a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_max_chaos_2() {
    let value = SmallTestStruct { a: 65535, b: 5189 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_max_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x8067c7c9cc558dcc9ea3ae383b60db9e1ad5cb1dbff54b0460ca7f942ebfd6a7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_0() {
    let value = SmallTestStruct { a: 54558, b: 36278 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xab1a70fc42d5926b912ae7f68ec3aba10e8e99415e9863b2e4ca39b4c0c42685");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_1() {
    let value = SmallTestStruct { a: 5269, b: 23244 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x78d69e508cfe68f18cf7245e073e0606536efb5e89dee7c2cf9287ca1cc2faf7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_2() {
    let value = SmallTestStruct { a: 35608, b: 20259 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3f57db803a4eb733537fd43e3c3e05b19011e478879d00efafb82c309efc3884");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_3() {
    let value = SmallTestStruct { a: 39357, b: 20257 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe4e0fd2c3fd96d28c58544b4ed004137777a86ec9c0e66438706b02e5f518f48");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_4() {
    let value = SmallTestStruct { a: 60883, b: 5382 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xcb365ed50aa40cb323b64768fc4575b3d07642055a368de7c217f5838e2c7273");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_5() {
    let value = SmallTestStruct { a: 50617, b: 45821 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9ef7194e27a8b01c71347e4ba177ee47417418720d05a6ca67cb875de700a971");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_6() {
    let value = SmallTestStruct { a: 64992, b: 44788 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xef90a603c65f807f800fa6c96e6f2e00f5445e057b239ce5be1f8c239387f2cd");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_7() {
    let value = SmallTestStruct { a: 61357, b: 62381 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7863111a4784d0e710f7933c38fb6c21764654482360cb43c65c5730aa3e420d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_8() {
    let value = SmallTestStruct { a: 5941, b: 61713 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x415461b066dcc4b21f7fb2b51f24f6ae8bf360b0de9ffb72f2d6e798da9ad400");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_9() {
    let value = SmallTestStruct { a: 22278, b: 57618 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x859b42be5e5c733e8ab234c5f09a5e91b87c070d72740d6a8890995690a9acc5");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_chaos_0() {
    let value = SmallTestStruct { a: 39639, b: 46561 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x37a05524f5a46555c6f1924c6c1b67218e760596b42f53dadd6db5ff876cd660");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_chaos_1() {
    let value = SmallTestStruct { a: 0, b: 26218 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa278a189a4d8b4909ad5bbfbb4bacc31005e1e4fcbcbb0bf7caa604cf92ab166");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_random_chaos_2() {
    let value = SmallTestStruct { a: 2529, b: 9252 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_random_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc0bb95db0a18e3538a7d1bc39ce8227bb028c8f68bc74bee7150560a4f1b0887");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_zero() {
    let value = SmallTestStruct { a: 0, b: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_zero_chaos_0() {
    let value = SmallTestStruct { a: 65535, b: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_zero_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9f0a4f1b805c05c92e76c5d1479d46d0515834106f56fa521febbbaef26902be");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_zero_chaos_1() {
    let value = SmallTestStruct { a: 49459, b: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_zero_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x8aa53bd0929b0cefb8834c52af0ef93b01141666adc535a1e4181e3061bb77b7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_small_test_struct_zero_chaos_2() {
    let value = SmallTestStruct { a: 65087, b: 0 };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/SmallTestStruct_zero_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: SmallTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9efcc36dc09f38bf60ee694007c1e5ee80d7dc10c6db68c17e5fb33dbd25bb5a");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_extra_byte() {
    let encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/invalid/VarTestStruct_extra_byte/serialized.ssz_snappy",
    );

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
fn test_containers_var_test_struct_lengthy_0() {
    let value = VarTestStruct {
        a: 17006,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            22717, 10092, 23181, 44132, 56083, 9786, 18029, 6053, 14557, 30014, 52849, 53581, 1706,
            9603, 56199, 36428, 60312, 62239, 55564, 16742, 38413, 42095, 36682, 49598, 48525,
            23862, 16221, 51243, 22511, 60687, 33324, 12760, 36109, 6734, 22084, 37502, 64240,
            24449, 23693, 44797, 21166, 7380, 6296, 2295, 43288, 32998, 9944, 53700, 9352, 20740,
            500, 50512, 56633, 47416, 63691, 46008, 8483, 44426, 17792, 44699, 10537, 44692, 39966,
            2677, 27394, 2484, 62071, 58325, 47822, 7499, 58367, 14196, 28419, 38019, 52607, 58221,
            43113, 12555, 36288, 26466, 20047, 57538, 39843, 12237, 65434, 54754, 63546, 60939,
            13147, 32244, 3667, 14189, 5502, 42426, 56026, 20618, 5751, 44457, 35990, 58007, 10301,
            2829, 50666, 53545, 15489, 12265, 8216, 41624, 55574, 42226, 33022, 50865, 13863,
            47814, 61434, 57293, 8217, 9575, 28825, 61497, 60195, 53907, 19271, 3003, 3652, 63265,
            65005, 35725, 34832, 14828, 14620, 9334, 20393, 49964, 61297, 38296, 29031, 55793,
            23833, 61756, 12197, 3409, 37436, 48269, 37469, 33651, 1001, 28922, 7400, 30692, 8736,
            44857, 25380, 1282, 4382, 64094, 125, 3543, 51881, 64797, 64925, 47222, 24197, 14476,
            48816, 54622, 14009, 27728, 10911, 25706, 24069, 42970, 41943, 49346, 27636, 18718,
            57282, 36941, 15260, 62970, 39995, 6956, 13220, 38666, 26615, 52098, 7006, 45239,
            21787, 61988, 48668, 62915, 65185, 15757, 32910, 35001, 6578, 16078, 11833, 43573,
            27141, 25350, 26287, 41601, 17546, 15123, 65232, 60131, 18976, 4630, 57271, 61724,
            34173, 8091, 21227, 37689, 4709, 4654, 61217, 65527, 20542, 50170, 35611, 53095, 30957,
            21944, 11100, 59204, 48905, 36042, 49860, 33176, 60161, 60853, 3990, 39548, 21784,
            3805, 6506, 55144, 50363, 59143, 54351, 686, 25212, 38685, 38466, 39051, 48001, 21904,
            6743, 12787, 52146, 57055, 5425, 37466, 24353, 50157, 49166, 61856, 4293, 11640, 33299,
            59288, 36976, 51305, 5895, 61511, 59136, 5489, 7122, 9075, 44262, 33751, 61943, 19809,
            43416, 10033, 20480, 60406, 54229, 65516, 55686, 33819, 61477, 53318, 45618, 45938,
            49023, 31472, 21065, 38370, 44520, 41075, 12806, 46130, 13805, 33327, 16448, 26, 11537,
            14308, 60858, 25692, 50481, 737, 44745, 3472, 63155, 55956, 45915, 26576, 27677, 18963,
            41482, 4025, 40118, 62560, 18003, 55236, 43808, 18650, 10844, 29363, 43697, 57308,
            9607, 37531, 21355, 21818, 18919, 31194, 51233, 32231, 39687, 25800, 15463, 46202,
            20508, 18182, 52440, 21974, 60644, 16126, 9032, 34067, 51868, 36787, 30967, 47390,
            43901, 11765, 32645, 19950, 17954, 17221, 48198, 57985, 48820, 25937, 35553, 14527,
            25239, 3887, 5349, 21475, 6630, 40605, 29848, 30525, 59074, 17445, 18114, 12171, 37243,
            62132, 53332, 6476, 8316, 1249, 63204, 14219, 61253, 39863, 57987, 48470, 61019, 13302,
            19048, 12534, 39234, 35483, 61505, 34362, 50620, 32610, 62875, 22910, 46830, 41335,
            11735, 6588, 22344, 31682, 26022, 1629, 49276, 12548, 45881, 34333, 55518, 42903,
            55567, 17533, 1035, 4055, 20602, 49909, 9119, 47812, 9634, 22474, 49909, 20571, 53933,
            60650, 41646, 56047, 64306, 60567, 30195, 41274, 18119, 1938, 57400, 10384, 12449,
            30628, 36576, 7257, 44366, 18671, 5549, 4243, 43695, 22308, 48776, 29515, 49088, 6172,
            61173, 11143, 5649, 58787, 19689, 31128, 55356, 55548, 40815, 55579, 28900, 870, 44095,
            51664, 25958, 54054, 25524, 24368, 55593, 38050, 5094, 45614, 25730, 54764, 27088,
            62345, 23343, 19857, 58471, 46922, 52604, 25604, 41412, 60977, 49225, 26996, 57558,
            818, 39571, 10710, 881, 41923, 28552, 65385, 44126, 21330, 51771, 13736, 19727, 63055,
            42414, 49882, 17523, 8895, 15659, 64809, 9791, 49487, 48893, 27277, 24073, 53660,
            54832, 13311, 62438, 4183, 24855, 20221, 50952, 21283, 34995, 5023, 38419, 6054, 16627,
            51987, 3752, 4125, 10909, 25994, 29523, 11728, 58558, 26704, 3659, 38519, 62494, 54271,
            30862, 42241, 10315, 58715, 9116, 35280, 5065, 14261, 28306, 45197, 17180, 17377,
            61030, 51298, 12681, 28493, 28165, 12883, 18302, 17323, 702, 5098, 63243, 1938, 52394,
            36412, 52440, 56471, 28266, 19954, 20306, 44807, 29949, 18382, 16098, 48879, 23975,
            47619, 7664, 33303, 59525, 40966, 3426, 29641, 50799, 63147, 33685, 4090, 3815, 62191,
            56451, 30656, 21947, 9484, 56318, 32463, 59499, 19976, 35477, 15577, 52554, 17513,
            39031, 48331, 39048, 1961, 23965, 12098, 13093, 16624, 5083, 56127, 2307, 55686, 26109,
            41714, 45328, 45310, 3296, 20898, 36235, 54007, 17590, 4394, 40105, 44610, 54107,
            37513, 5109, 38919, 59303, 39407, 12330, 57474, 42635, 59489, 31062, 17460, 50016,
            28123, 15888, 57840, 15586, 5549, 27766, 56585, 46655, 42696, 59404, 21509, 38491,
            42999, 12636, 3990, 8344, 20937, 29, 56842, 3535, 62930, 44406, 44945, 26635, 2909,
            61958, 62969, 3603, 30443, 12369, 17579, 11941, 31081, 30166, 48245, 23332, 26763,
            39240, 37377, 2011, 40929, 24976, 39036, 49535, 65233, 3844, 2630, 42487, 46994, 2729,
            35127, 5249, 54715, 11452, 11952, 58698, 63981, 13388, 16869, 35718, 34115, 25627,
            44874, 37373, 16936, 2246, 59096, 23042, 1427, 27991, 24263, 47154, 42597, 24924,
            26630, 59991, 9811, 48392, 55311, 10213, 22429, 49206, 13490, 28024, 19825, 40667,
            33410, 46593, 61388, 55828, 44803, 31390, 50249, 12082, 19999, 35852, 58712, 18604,
            49444, 28003, 60416, 25427, 48361, 40637, 20340, 47419, 37078, 24098, 47932, 15562,
            49816, 7730, 8297, 2042, 10168, 28087, 38758, 5767, 45908, 9696, 22529, 16681, 3290,
            5421, 34656, 39449, 24454, 43539, 64098, 40249, 23629, 1016, 42210, 12376, 31265,
            18872, 42929, 60190, 41821, 29252, 29791, 62285, 38974, 11327, 59695, 48836, 20796,
            2116, 16184, 1639, 24428, 57824, 38490, 9581, 37893, 26724, 46584, 5328, 45060, 16282,
            43418, 14733, 13794, 11128, 3251, 44904, 36870, 48760, 38434, 35645, 20237, 50767,
            21193, 53617, 3826, 59794, 11443, 53029, 42988, 42273, 2673, 31576, 26772, 53114,
            22642, 42743, 34561, 43180, 17077, 5995, 3173, 42012, 53803, 58556, 153, 40759, 40251,
            40647, 3628, 15341, 33065, 45693, 6911, 65473, 6365, 43763, 20973, 58922, 32820, 29606,
            41712, 47377, 29064, 37818, 14953, 60649, 7762, 27702, 34472, 20335, 36163, 2820,
            61753, 57136, 36170, 40190, 43962, 42277, 11370, 25941, 20239, 54312, 61268, 48702,
            32981, 14196, 35029, 40066, 17649, 4297, 11549, 6945, 13329, 63019, 48772, 24819,
            41767, 37689, 30977, 35902, 3208, 10941, 15526, 41062, 16597, 61904, 43959, 32811,
            36822, 38318, 6150, 64702, 62003, 30223, 17756, 27585, 4585, 34829, 4372, 15876, 10670,
            47965, 1065, 30945, 63391, 22506, 33636, 43267, 506, 26949, 35449, 7760, 60957, 60301,
            23482, 29994, 4017, 40882, 3158, 24594, 19588, 42531, 65105, 39440, 31582, 44891,
            33657, 35299, 57820, 65157, 54468, 17048, 62769, 57835, 41228, 46949, 15701, 20446,
            60331, 1680, 3981, 29500, 9333, 20918, 48887, 29387, 24388, 18321, 48058, 17244, 51466,
            23475, 9001, 47675, 42352, 7614, 25564, 38780, 16273, 29912, 40892, 12493, 36490,
            32972, 42412, 33073, 23093, 33173, 48531, 17854, 49306, 62229, 45091, 39442, 4944,
            62349, 36967, 19530, 26929, 65049, 26421, 227, 36482, 44553, 39129, 14446, 20133,
            29406, 19092, 17678, 51870, 60053, 15588, 62745, 20189, 4468, 39433, 44364, 11444,
            51375, 51619, 58889, 62055, 41477, 54029, 31881, 55688, 63216, 10476, 21036, 7351,
            7167, 46218, 5739, 43117, 5725, 57857,
        ]))
        .unwrap(),
        c: 166,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x91c099892139bf956ca5617b630e4c2e5375af8ffabc70d23112f44606845f78");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_1() {
    let value = VarTestStruct {
        a: 51340,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            47589, 20821, 19661, 27886, 43003, 60221, 64176, 49983, 28476, 34857, 4565, 56689,
            61279, 61641, 4680, 62702, 21049, 36986, 13483, 32739, 20137, 59230, 2341, 61870,
            43062, 35424, 41918, 17526, 10285, 26898, 8311, 20392, 24863, 29221, 40574, 36498,
            27258, 50470, 327, 3971, 3972, 20610, 4108, 64267, 65096, 28330, 45666, 52057, 35323,
            49339, 8351, 16953, 42775, 57721, 17527, 18029, 11755, 28119, 13091, 23594, 417, 39599,
            37058, 60836, 45756, 15145, 62527, 27729, 49369, 39231, 17618, 32880, 53871, 49867,
            39280, 17714, 222, 31622, 54514, 2935, 31450, 9482, 8312, 24003, 56004, 13076, 64627,
            26499, 2641, 62897, 51817, 49499, 52504, 24867, 18361, 61997, 17022, 53023, 46040,
            7976, 14320, 15117, 38729, 34989, 59047, 17471, 38503, 51091, 51541, 22755, 62138,
            57596, 19241, 20831, 18513, 46758, 58725, 63050, 62764, 22383, 41079, 15729, 56731,
            34083, 21144, 9154, 55535, 11932, 45667, 17342, 18593, 28954, 25431, 23456, 23501,
            18644, 40688, 64881, 38779, 46726, 37443, 22229, 48647, 13582, 30434, 53863, 45248,
            25952, 34956, 39934, 18820, 46155, 38190, 172, 6720, 63439, 52821, 60088, 24553, 23715,
            14488, 24590, 27571, 57140, 57521, 43391, 59204, 8533, 7577, 23125, 54575, 19951,
            61927, 47369, 39975, 21044, 41833, 8808, 23190, 30889, 63595, 36446, 59478, 57071, 85,
            38737, 13255, 59085, 6706, 37349, 7016, 42047, 58727, 23663, 44404, 61265, 3592, 39300,
            1474, 11771, 37608, 60121, 64128, 35751, 52666, 64059, 30530, 10228, 35336, 12908,
            27646, 58765, 49302, 51527, 56701, 40896, 13844, 58113, 5880, 48085, 19048, 12292,
            23115, 694, 11403, 3363, 4401, 61522, 30593, 58507, 48250, 22441, 12573, 33969, 2129,
            16664, 44818, 19472, 46596, 23189, 31812, 61651, 34915, 20976, 15832, 60351, 17612,
            38572, 50083, 4050, 64054, 9465, 6902, 33949, 62552, 20654, 6599, 46979, 46917, 18603,
            64729, 37193, 22717, 50424, 56904, 20674, 57844, 20309, 52021, 55836, 46244, 6905,
            23332, 33668, 25092, 10964, 14717, 60402, 43853, 21721, 63210, 19443, 39260, 28182,
            27146, 53690, 35245, 12059, 25870, 54756, 8537, 5612, 9615, 57489, 32547, 57038, 10567,
            16417, 65131, 20701, 47263, 26170, 35251, 38863, 45966, 49059, 7031, 22840, 51005,
            40747, 54020, 56673, 62491, 53550, 31586, 9471, 29119, 26165, 42528, 37166, 11655,
            44811, 2174, 17766, 18109, 30569, 52333, 17463, 63621, 16202, 61909, 1885, 40504,
            12887, 8607, 4882, 14605, 28789, 55139, 1112, 33134, 38891, 56096, 29903, 19823, 8890,
            45749, 54298, 43914, 52914, 34730, 18101, 5929, 60427, 53581, 55315, 34554, 3240, 9098,
            63763, 47503, 2884, 6057, 40971, 10806, 3887, 63421, 28299, 39909, 14914, 9716, 23331,
            64430, 57372, 10862, 3400, 20538, 8786, 33711, 23993, 56494, 20654, 50166, 42296,
            29166, 24084, 49634, 61360, 54558, 1895, 43626, 49820, 41649, 3467, 54558, 47643,
            40561, 29749, 26405, 64398, 1108, 33320, 11185, 61264, 56675, 62994, 54977, 65385,
            14878, 30172, 37799, 22072, 31446, 47361, 31602, 42910, 9239, 60097, 21208, 46190,
            15087, 62146, 49118, 46129, 54943, 27458, 52648, 1612, 42861, 56089, 26106, 37216,
            52784, 7651, 21511, 50542, 8950, 58685, 42785, 27182, 24377, 62281, 1830, 51264, 64699,
            58389, 41550, 65006, 55113, 52060, 62120, 12725, 62727, 9433, 29981, 13231, 45736,
            31290, 4741, 5224, 57689, 7669, 27128, 45799, 44192, 16359, 27569, 50909, 42161, 56665,
            10195, 15065, 14039, 47767, 52055, 31181, 7702, 8332, 40706, 13550, 172, 58944, 21657,
            61413, 59345, 64427, 50737, 7425, 62530, 51271, 16731, 21779, 53060, 35358, 45249,
            12151, 48062, 39151, 26241, 46772, 51483, 32111, 190, 49596, 38281, 6674, 54637, 51917,
            40390, 4328, 14220, 32422, 1859, 37063, 50250, 53263, 52398, 22680, 1161, 37589, 47357,
            46864, 39857, 9375, 39265, 19572, 14600, 411, 48419, 51479, 59361, 24478, 45011, 12548,
            37604, 51204, 29568, 46212, 31293, 46057, 15980, 31926, 61180, 775, 51376, 58539,
            29058, 9882, 15665, 43220, 57587, 22944, 25054, 35699, 59157, 3752, 10474, 46666,
            34671, 1179, 11038, 9396, 19981, 1899, 12220, 43971, 10910, 12964, 38795, 53058, 53660,
            38129, 5588, 10019, 41617, 3247, 36302, 41967, 27176, 9854, 49010, 42928, 43084, 43993,
            60501, 27574, 30431, 5906, 50435, 41209, 12305, 64940, 61147, 45951, 9807, 43093,
            34079, 43367, 65414, 62599, 13989, 35949, 49405, 15270, 42461, 19762, 29399, 21511,
            38377, 3238, 33992, 29853, 54843, 44124, 58169, 51713, 27444, 46130, 14634, 46211,
            39431, 14941, 3242, 44587, 25942, 3775, 19475, 62231, 10186, 26242, 40754, 60922, 3338,
            23992, 22695, 62356, 53294, 26433, 50653, 585, 18623, 36869, 43763, 54394, 35919,
            48484, 24076, 9283, 54179, 6328, 47080, 37002, 2224, 27887, 64545, 29261, 5644, 18681,
            43112, 17217, 63389, 53342, 30816, 30179, 35063, 31830, 31592, 58485, 38081, 32732,
            64173, 31598, 6149, 59684, 45559, 18637, 159, 6553, 48425, 4654, 16275, 27110, 40716,
            40772, 62865, 56988, 53545, 50963, 41070, 57216, 53790, 62330, 7947, 4971, 55332, 3954,
            38269, 52460, 54069, 22307, 34434, 53973, 47319, 151, 52346, 51173, 60406, 15927,
            56510, 45104, 42495, 1250, 37612, 23387, 45832, 16718, 59335, 21376, 45115, 41132, 300,
            34474, 62802, 12749, 12000, 18359, 45831, 46007, 38174, 40778, 54658, 43344, 61412,
            9233, 60616, 57133, 15023, 63358, 60323, 64920, 20354, 35356, 45180, 46450, 47344,
            53815, 23219, 41304, 45330, 32243, 36712, 34238, 37499, 13393, 61842, 46925, 51786,
            37439, 42297, 59188, 18119, 62795, 51998, 7978, 28954, 50200, 59690, 4565, 8415, 19163,
            29544, 10890, 61177, 55431, 721, 42854, 37539, 40953, 21821, 18459, 52732, 36437,
            32610, 61155, 19148, 58000, 53667, 41629, 57080, 15326, 13514, 45648, 65316, 15811,
            15059, 20626, 10247, 57083, 33949, 40439, 33306, 56258, 20785, 10969, 53555, 15744,
            52545, 52250, 54501, 5354, 36436, 50374, 17763, 1947, 22979, 59860, 54924, 27630,
            41401, 24625, 13973, 2561, 63754, 34290, 23887, 22333, 47346, 54956, 27842, 65533,
            11120, 28394, 15961, 3409, 7482, 17757, 4871, 41555, 24078, 8376, 36542, 34891, 7862,
            1646, 37229, 10662, 2280, 34764, 444, 7518, 42045, 3767, 16733, 61351, 8120, 36438,
            60008, 32605, 47779, 33928, 64562, 33635, 54560, 58866, 39674, 20170, 16044, 38887,
            28583, 129, 31473, 783, 51063, 16385, 8341, 18676, 57205, 60730, 9331, 19592, 12299,
            36283, 15106, 47941, 8756, 22340, 3761, 50301, 18851, 1566, 53008, 35652, 33031, 17112,
            59669, 31670, 42338, 12072, 27129, 62903, 13600, 38296, 12517, 30244, 30365, 32224,
            54935, 47085, 39463, 12952, 36889, 44606, 31728, 2782, 25902, 34652, 3707, 27152,
            18037, 38623, 15806, 25880, 712, 50581, 22534, 5939, 4848, 41246, 51993, 15414, 64469,
            6234, 7754, 51283, 54063, 51635, 28711, 9205, 29587, 62204, 25339, 23849, 11488, 16182,
            62836, 24348, 17715, 21470, 25459, 6500, 64361, 3263, 45369, 55162, 38357, 35536,
            20498, 34916, 30295, 8372, 45655, 13405, 58888, 30315, 20257, 44089, 14763, 10317,
            46127, 24032, 18971, 39852, 39077, 29078, 37425, 13006, 54570, 51375, 20150, 55640,
            51686, 55245, 19742, 38890, 40982, 35003, 64823, 42631, 61488, 31632, 7455, 36931,
            43123, 48842, 29669, 44966, 25150, 35923, 45459, 61723, 44084, 8392, 32471, 18668,
            48212, 17095, 46144, 18201, 47720, 45775, 50061, 16570, 48703, 58362, 17050, 48183,
            55239, 59422, 20451, 29870, 52621, 60684, 50749, 38342,
        ]))
        .unwrap(),
        c: 11,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xdb86f83887def79e8136565c15109754858ad4020a5ca615b213f657bbc47a6e");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_2() {
    let value = VarTestStruct {
        a: 62388,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            15173, 48097, 34784, 17125, 53078, 63472, 59950, 51563, 46205, 28969, 11302, 34038,
            42994, 6635, 55248, 54913, 41694, 42387, 8040, 16572, 63255, 49670, 8541, 41008, 64702,
            47552, 39209, 28456, 53171, 27109, 50692, 64189, 13064, 34766, 35636, 63101, 10865,
            1441, 5486, 260, 14709, 37750, 56252, 54155, 30926, 42913, 5939, 33313, 46712, 1064,
            20361, 53948, 18570, 52165, 64140, 40239, 20594, 37025, 31225, 52027, 54740, 29372,
            59358, 26021, 39329, 7308, 44346, 42013, 25023, 35769, 64467, 41556, 13857, 36404,
            50815, 22759, 55348, 5658, 40237, 55137, 58428, 5441, 63072, 25469, 22568, 18580,
            47222, 11844, 23112, 24108, 37436, 49020, 6981, 28720, 9575, 15489, 31703, 28867,
            24831, 41830, 20466, 54663, 52985, 53847, 21832, 5026, 434, 45089, 24649, 48310, 15696,
            65450, 19434, 34597, 2821, 21507, 63841, 21963, 56682, 22809, 49532, 62239, 57983,
            59172, 58153, 46442, 26500, 32747, 57735, 59028, 49777, 965, 288, 13447, 48587, 7031,
            5396, 18330, 14998, 47837, 24214, 26039, 24542, 19194, 5681, 9716, 46298, 27029, 33491,
            56277, 7121, 13223, 11068, 57945, 15288, 26912, 23264, 6743, 4929, 52996, 22894, 58561,
            16920, 37462, 43905, 48004, 52801, 30553, 11613, 22022, 45166, 37483, 14373, 23501,
            14134, 16403, 4575, 64559, 55767, 9423, 35695, 14815, 19733, 26749, 52436, 48768,
            24201, 41244, 1477, 23551, 31958, 53160, 63464, 13473, 63980, 17890, 40460, 13843,
            52956, 62214, 37879, 37243, 38253, 48602, 49927, 29385, 1985, 19232, 51003, 12484,
            38294, 1202, 8466, 56031, 14488, 8312, 3782, 41024, 3171, 1792, 32704, 13933, 49921,
            15045, 55569, 61347, 62579, 13350, 62727, 20188, 12454, 14635, 61401, 31489, 22652,
            60441, 7574, 7941, 15775, 61791, 14152, 19873, 21486, 10785, 64726, 39419, 51936,
            12249, 30992, 26856, 49619, 6774, 11323, 54210, 41107, 46291, 63461, 24728, 54476,
            32228, 7443, 17132, 23641, 54251, 8367, 31316, 14250, 51401, 23714, 4988, 8371, 54314,
            40567, 57319, 8311, 60262, 60427, 6257, 17549, 13372, 16321, 7291, 12434, 40963, 39663,
            41886, 48460, 57074, 60588, 42840, 60047, 6992, 29698, 12074, 57226, 39497, 2289,
            52852, 57268, 1466, 64864, 38343, 22181, 9153, 28859, 49882, 4564, 39079, 40774, 61138,
            18774, 11587, 16588, 15449, 20441, 25149, 10066, 4972, 38950, 27173, 60397, 21344,
            38531, 6185, 49719, 43534, 64750, 1737, 55191, 52317, 27345, 64448, 24499, 40368,
            12518, 23293, 27291, 63314, 50465, 14671, 31035, 6128, 58758, 27640, 17980, 62335,
            43362, 48073, 811, 3807, 1870, 35718, 49984, 57003, 39895, 28740, 34797, 32330, 62802,
            45538, 5793, 47763, 31959, 63332, 15641, 26180, 46072, 45605, 35560, 19376, 10579,
            61498, 25507, 27411, 10883, 63891, 5384, 59475, 40044, 52166, 25655, 8674, 44295,
            15074, 43031, 17567, 15485, 55792, 22674, 62040, 60209, 18010, 7973, 56005, 23911,
            57452, 57347, 6297, 42109, 25974, 29793, 54731, 1701, 9786, 19292, 9187, 10968, 54674,
            24644, 34921, 26031, 37647, 65404, 587, 12857, 39648, 12273, 41316, 47052, 6449, 26772,
            63822, 56316, 35518, 30048, 24147, 17823, 21394, 63705, 35825, 51881, 34392, 20310,
            34410, 51673, 52657, 30806, 56707, 37684, 39168, 56072, 55389, 11961, 13076, 21677,
            49886, 47865, 55394, 36846, 20535, 47786, 41537, 57912, 1707, 28968, 12108, 8792,
            36791, 27776, 55399, 11252, 36907, 36646, 7994, 46421, 22597, 6197, 28198, 42557,
            24798, 43103, 63775, 39028, 34517, 53298, 38458, 61529, 22596, 1793, 7128, 42220,
            62128, 16299, 3749, 40788, 46481, 7871, 38703, 27884, 59881, 59674, 23468, 41242,
            64595, 32169, 48328, 8771, 28526, 60446, 64807, 19418, 39818, 660, 6437, 13359, 2883,
            11975, 55842, 11909, 13193, 35027, 50963, 18961, 12900, 62466, 28827, 50289, 42800,
            54309, 63424, 60713, 13420, 57448, 43947, 1200, 28313, 45208, 31160, 2080, 9026, 20835,
            7179, 16694, 53770, 52442, 46632, 60774, 61392, 23959, 57655, 57363, 38771, 59953,
            14331, 43108, 15987, 4941, 7057, 64537, 46861, 37551, 41889, 7822, 51509, 47448, 32722,
            3605, 20586, 3226, 49087, 41308, 6481, 19612, 49897, 21641, 43478, 48976, 22441, 23940,
            52115, 49428, 54259, 10670, 38070, 30094, 47149, 40210, 38411, 32519, 5168, 21211,
            41986, 30603, 27991, 28102, 48731, 35494, 64463, 24130, 6581, 38618, 52409, 60295,
            59425, 41217, 29230, 33258, 58234, 52037, 62565, 9903, 24313, 42976, 29734, 18303,
            35977, 83, 42942, 24716, 11414, 48812, 51933, 48171, 8820, 6372, 5369, 27373, 19628,
            33915, 54501, 22912, 55528, 1282, 49166, 28533, 47127, 36994, 27896, 49283, 49108,
            2461, 54902, 6309, 45677, 28862, 53061, 46592, 33067, 40713, 10528, 62921, 48045, 4657,
            55407, 615, 63814, 1670, 56231, 38838, 15505, 62852, 35941, 13494, 41569, 1083, 57482,
            54532, 47151, 22739, 57113, 576, 6756, 25960, 63830, 3926, 9697, 64726, 14911, 12134,
            7632, 63686, 18283, 56365, 8873, 11492, 44421, 49631, 34782, 40194, 13934, 18860,
            16820, 37944, 13033, 15803, 51247, 37152, 6628, 20893, 15208, 52676, 61581, 36672,
            4209, 61471, 62962, 19527, 12616, 9512, 22660, 58297, 11694, 38011, 49668, 36555,
            33319, 53637, 15263, 54033, 60941, 41870, 37948, 8272, 42168, 12776, 42741, 59062,
            32985, 26729, 11285, 47287, 18264, 39419, 61710, 58320, 39309, 48154, 18701, 53166,
            7673, 11055, 36627, 50421, 12532, 636, 23123, 14996, 36863, 11099, 20147, 56319, 7048,
            3594, 1866, 57365, 5970, 16331, 6233, 25696, 43712, 34308, 6378, 53193, 12729, 41143,
            28218, 28244, 12683, 24508, 43595, 29477, 28929, 15327, 12920, 45691, 9195, 49912,
            53273, 60694, 64402, 5845, 47975, 23367, 17966, 35482, 48861, 63267, 39059, 25534,
            61724, 45706, 54292, 58613, 1045, 24709, 61688, 42432, 54121, 30218, 65150, 20066,
            25154, 43166, 16452, 12854, 53712, 45446, 20207, 3310, 52949, 60249, 23203, 53917,
            35632, 61453, 49993, 62739, 43525, 367, 35467, 57856, 41583, 5875, 23173, 31875, 18045,
            54676, 38595, 46884, 22358, 2063, 33608, 31947, 24080, 40973, 14838, 43625, 16170,
            50450, 44754, 14162, 55307, 8892, 23549, 34990, 10095, 50915, 16197, 40134, 60136,
            17179, 19271, 23620, 5124, 12110, 7585, 53326, 13824, 831, 24949, 56586, 48809, 39253,
            14814, 48606, 15947, 28078, 43571, 46273, 34098, 25445, 25167, 45435, 57431, 12520,
            27531, 27363, 24100, 17936, 31791, 19770, 37935, 1299, 46114, 12568, 60826, 6719,
            36327, 41530, 31543, 19327, 49610, 50389, 49219, 37438, 40502, 16771, 39555, 56974,
            165, 62026, 51594, 22029, 56832, 41288, 62627, 28807, 14506, 51584, 10197, 54235,
            18316, 16051, 53838, 22324, 2576, 63004, 46632, 55985, 1981, 57295, 32041, 17218,
            34588, 47219, 48357, 20228, 17159, 7290, 41727, 13631, 16464, 40814, 32955, 48902,
            53396, 1809, 58332, 10962, 22715, 60120, 54891, 49895, 6185, 61710, 18377, 8933, 33281,
            22283, 41494, 27669, 20502, 59533, 25947, 42727, 34602, 65125, 28617, 42599, 25746,
            20372, 38616, 30992, 42804, 28034, 37067, 62166, 52442, 60520, 53349, 60607, 36539,
            42627, 20810, 26732, 287, 25168, 56862, 36705, 51341, 35764, 21272, 58387, 63383, 374,
            48534, 7824, 12706, 45288, 55943, 314, 42605, 29950, 41780, 31002, 24329, 1140, 43282,
            31766, 40488, 39765, 24238, 63647, 33116, 12833, 23948, 47332, 28169, 15933, 11386,
            28330, 53491, 27171, 16768, 55320, 5802, 9985, 53550, 37294, 48466, 49208, 9922, 51014,
            4301, 65497, 3748, 40404, 51586, 49775, 21765, 32601, 25754, 41752, 64935,
        ]))
        .unwrap(),
        c: 207,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xd9e504e079375d102319315806576a257499618495abd7374383895c6e6c9c86");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_3() {
    let value = VarTestStruct {
        a: 20604,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            34957, 22356, 49238, 15530, 12659, 22637, 4844, 40024, 12527, 63141, 52298, 1765,
            13911, 22490, 7311, 45725, 35496, 4151, 35447, 32399, 38929, 32902, 56916, 43167, 9748,
            4762, 50505, 44050, 64685, 15813, 15709, 62230, 54750, 4185, 62634, 18175, 20663,
            27181, 38941, 45930, 31981, 16227, 44767, 45637, 53622, 25008, 7810, 41642, 714, 30658,
            13957, 64254, 3677, 7525, 3211, 25752, 53390, 43862, 19137, 38008, 3956, 36900, 12589,
            53890, 33104, 31383, 59596, 24698, 46509, 22901, 10973, 18080, 65086, 20274, 27048,
            64235, 45712, 6424, 65255, 59777, 48325, 63865, 7375, 47741, 46549, 25913, 2634, 59115,
            25776, 37445, 18277, 26912, 23061, 18528, 18901, 62051, 32433, 3268, 63069, 38787,
            45049, 25288, 65333, 56243, 48363, 46423, 14154, 60015, 4184, 28456, 60447, 8878,
            31779, 39674, 16853, 13917, 37348, 22894, 21256, 56163, 12562, 19958, 47672, 45432,
            15304, 43109, 14459, 55660, 63948, 56739, 45099, 5588, 39053, 2972, 50696, 8875, 47571,
            6614, 2544, 42326, 43348, 64673, 30519, 45199, 5406, 49945, 23371, 371, 27670, 48568,
            50561, 64724, 62349, 54189, 57613, 14443, 8559, 26502, 41726, 6901, 44688, 52502,
            18474, 19036, 44177, 56732, 35247, 15602, 23660, 38154, 38785, 25149, 15782, 24048,
            15716, 14413, 31824, 14362, 64210, 22880, 14971, 54874, 22139, 2245, 12097, 3347,
            24565, 34623, 9544, 46850, 4927, 10725, 28793, 58842, 24528, 3868, 2528, 18787, 16438,
            55970, 47764, 7360, 1245, 1450, 37738, 46922, 42795, 22641, 14711, 14407, 11947, 2869,
            57715, 56210, 29896, 21844, 42892, 15427, 11967, 4684, 22552, 3131, 46662, 7291, 64288,
            8462, 24742, 37077, 34461, 17296, 56237, 22277, 24355, 46309, 59560, 28545, 14695,
            55318, 39797, 46755, 54885, 27783, 7696, 44432, 4470, 59831, 6850, 1044, 54375, 44760,
            55342, 23305, 22757, 63672, 48825, 58585, 62187, 65267, 38774, 22121, 21157, 18583,
            55683, 20800, 40792, 550, 26999, 52625, 18547, 45395, 39277, 21955, 6486, 56582, 3109,
            1512, 44872, 57839, 38523, 43275, 61248, 41045, 61315, 39137, 25506, 34563, 7938,
            30840, 57727, 44389, 27419, 57344, 18982, 55350, 1023, 22585, 57438, 24617, 24270,
            32652, 13060, 56475, 63859, 62740, 29880, 40778, 5479, 45638, 39709, 10619, 54970,
            2335, 38350, 24554, 31392, 36780, 55101, 56904, 47853, 14208, 42640, 45385, 43204,
            34753, 3763, 41993, 16633, 6811, 27205, 7049, 47069, 16556, 3529, 25128, 58729, 55363,
            58056, 11218, 52268, 31716, 23504, 38870, 6557, 53680, 32717, 37837, 10970, 44350,
            18756, 61361, 27977, 20107, 44747, 61306, 56376, 21427, 14742, 61118, 51044, 11174,
            9042, 8518, 19128, 21434, 46797, 62119, 21082, 14199, 686, 51834, 55535, 11373, 63797,
            36105, 28456, 55347, 52402, 33958, 12968, 54287, 55896, 46715, 47588, 49198, 13997,
            53648, 5990, 49277, 39390, 51907, 61398, 26931, 52509, 43987, 18078, 26981, 58095,
            17507, 21970, 59132, 19414, 5301, 15822, 57689, 53917, 48447, 15856, 23188, 23243,
            6173, 15966, 17789, 10233, 45716, 3083, 40619, 35682, 12739, 34494, 35142, 8445, 34451,
            50566, 7643, 46456, 18351, 53283, 18030, 53469, 37402, 1928, 58633, 59357, 63711,
            26428, 50762, 53830, 37582, 26869, 59482, 32946, 34049, 3608, 43454, 46718, 38124,
            46039, 7835, 65191, 50456, 51451, 13691, 12011, 48484, 27478, 2451, 54180, 36476,
            49499, 5854, 59560, 7551, 64268, 20884, 21909, 55473, 61928, 838, 63495, 13276, 4387,
            60645, 24724, 15326, 31256, 31738, 22293, 55344, 15508, 13464, 35228, 49188, 36578,
            38066, 3360, 38285, 16843, 63090, 4088, 5849, 23622, 48128, 2085, 61965, 54534, 10191,
            25398, 40351, 39275, 44581, 1075, 48561, 63662, 19557, 30062, 7923, 64529, 4157, 51081,
            21171, 61497, 29294, 51623, 30915, 28523, 2564, 51064, 18549, 32604, 11172, 34918,
            7619, 5267, 31817, 19228, 47639, 4652, 11629, 10658, 5566, 56690, 44297, 17576, 64227,
            22980, 52522, 55461, 22503, 21595, 59596, 30262, 50203, 18755, 27349, 13183, 34221,
            20416, 34970, 10488, 62359, 897, 62230, 2310, 59557, 52814, 61303, 14837, 52762, 60921,
            26199, 37351, 64987, 48328, 57355, 27227, 38458, 32459, 33462, 20660, 54514, 4981,
            61664, 49957, 15663, 34590, 23097, 8231, 65379, 42482, 280, 1223, 6681, 6156, 19655,
            57390, 53230, 43373, 42754, 60562, 42763, 9783, 23547, 36149, 27002, 13331, 20777,
            47385, 31177, 41070, 18660, 57006, 65099, 40300, 18253, 17497, 32333, 42189, 17121,
            1470, 13624, 4990, 6379, 23246, 6974, 45554, 40945, 26476, 39928, 55462, 10801, 14894,
            46886, 31161, 10674, 28639, 3274, 62862, 25278, 5882, 27918, 19253, 44063, 23603,
            41694, 12114, 7981, 18099, 58430, 26836, 55658, 24319, 53761, 53503, 36355, 21488,
            33774, 43737, 64294, 64278, 38315, 45991, 22998, 7864, 27676, 18684, 61900, 56624,
            4278, 37451, 23528, 51577, 39587, 63099, 31768, 54706, 14829, 60296, 54761, 39259,
            64042, 63351, 50844, 64804, 13666, 39608, 21155, 38025, 50900, 61208, 20115, 2607,
            27370, 45010, 34314, 8386, 13699, 47900, 1646, 35166, 9217, 20659, 32720, 26382, 49755,
            3234, 65001, 50573, 30074, 10202, 3931, 1555, 12814, 61209, 6188, 65061, 51868, 20794,
            45650, 49084, 59964, 45754, 6407, 51965, 42941, 15645, 17485, 14612, 4420, 32948,
            48945, 62288, 29224, 61120, 33430, 4819, 63360, 49790, 20778, 20285, 33746, 17870,
            37550, 65203, 44896, 6194, 28706, 16922, 25682, 49818, 28984, 356, 43222, 35336, 61619,
            37024, 17974, 13023, 38617, 24460, 269, 6332, 45098, 2960, 24760, 11575, 2534, 13704,
            55254, 24716, 28619, 30322, 45328, 61195, 44840, 39901, 35873, 63040, 2925, 54943,
            22328, 25272, 56102, 37944, 16479, 1678, 2380, 1440, 29488, 37624, 12598, 23626, 40436,
            46175, 39342, 57004, 15808, 51070, 27816, 61488, 29526, 38373, 35631, 10314, 12759,
            61303, 30126, 9615, 42212, 62405, 49469, 57619, 34368, 57969, 24786, 24853, 46764,
            17780, 7146, 39562, 1753, 64123, 31951, 16201, 47711, 25437, 18926, 43053, 49356, 1284,
            34925, 62801, 12676, 50809, 30221, 38726, 51052, 18468, 59585, 63940, 64980, 40354,
            21180, 31638, 16957, 49696, 164, 41620, 32688, 48922, 13279, 1759, 7737, 63477, 47970,
            54063, 29083, 51239, 18581, 28120, 35618, 8863, 16998, 29260, 38915, 32819, 63268,
            20560, 18956, 51280, 23952, 11129, 56406, 3342, 3822, 51901, 45000, 41696, 40385,
            31779, 928, 32255, 53443, 33570, 45501, 51216, 43732, 24156, 35486, 9812, 33584, 59672,
            43287, 14471, 4037, 58903, 22222, 21087, 14542, 38704, 30732, 41262, 58351, 45925,
            50970, 29249, 39963, 24542, 14433, 31920, 33158, 23374, 57731, 54091, 42771, 38871,
            65074, 33415, 19160, 16143, 51638, 50090, 36329, 26287, 57137, 5633, 56449, 39625,
            38031, 48938, 48348, 9966, 30765, 26355, 8632, 45986, 23892, 36279, 33895, 34323,
            24456, 1291, 3627, 9140, 36608, 15198, 6627, 49584, 63051, 50591, 40412, 54586, 46933,
            819, 13979, 42852, 56843, 3091, 46616, 41949, 5561, 50973, 65043, 41758, 41270, 60854,
            61638, 58097, 49082, 28009, 48886, 56033, 31292, 36613, 52316, 64550, 27960, 51763,
            64807, 360, 11327, 54514, 45232, 27822, 5464, 13285, 51333, 43546, 44771, 62811, 43740,
            49103, 54050, 53678, 25000, 27644, 32503, 60383, 14930, 1853, 14877, 62163, 11335,
            10795, 14575, 49439, 39597, 50801, 41069, 48537, 39603, 15218, 51080, 7835, 25379,
            24238, 13033, 15896, 30372, 275, 23453, 8503, 13084, 58034, 8739, 34600, 25443, 54836,
            44961, 18656, 29412, 15764, 2618, 24311, 37072,
        ]))
        .unwrap(),
        c: 38,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x403fec5d885fc3b79002c68502f5884a13139045f7d584299d4aa6440c621a08");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_4() {
    let value = VarTestStruct {
        a: 31723,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            54898, 17572, 14430, 62910, 3421, 12689, 12978, 26233, 431, 28622, 46748, 44543, 51497,
            16017, 48776, 35900, 31745, 31204, 27197, 34761, 65462, 34986, 17400, 65413, 12739,
            23434, 63499, 64320, 40163, 18430, 53400, 32036, 39530, 34385, 47477, 37997, 54620,
            33135, 57990, 62186, 20679, 33802, 46961, 61819, 38704, 10434, 8675, 14572, 16605,
            54880, 46512, 61751, 46750, 22458, 12165, 27426, 59728, 8463, 4877, 5477, 8167, 49491,
            2355, 54078, 61927, 6846, 38062, 38821, 46381, 49303, 63599, 46708, 47439, 8465, 39556,
            60260, 21415, 30693, 60905, 4905, 45868, 37397, 40072, 16145, 17471, 19502, 58308,
            47396, 57259, 23509, 59274, 30231, 50802, 6241, 54565, 41870, 11052, 15025, 58401,
            64859, 37129, 55258, 16163, 50668, 51358, 22008, 51206, 19003, 58277, 16706, 5106,
            61860, 43434, 52523, 64227, 63820, 38277, 62597, 23057, 41607, 5143, 32730, 27833,
            36142, 37387, 49747, 33054, 54032, 22789, 1146, 26097, 45312, 28010, 42407, 10524,
            39414, 30977, 45149, 36752, 7575, 31660, 14392, 3013, 34379, 34915, 27881, 53059,
            30975, 61054, 51041, 36721, 24576, 43343, 20200, 11545, 58098, 37743, 16966, 24617,
            30184, 54565, 4478, 41471, 57584, 50767, 24311, 57709, 61960, 20956, 27405, 26808,
            14702, 27203, 18802, 46072, 58598, 62292, 53382, 26220, 65021, 56397, 37777, 51076,
            37342, 9956, 51351, 11231, 40949, 38411, 43224, 13856, 28755, 61099, 54806, 38782,
            35186, 48589, 62021, 48608, 35636, 48491, 21764, 7498, 59701, 28354, 56587, 63799,
            20040, 55283, 40167, 50476, 7051, 62170, 25811, 28859, 8908, 702, 26577, 36510, 43810,
            28804, 40947, 47961, 14353, 48346, 40133, 64817, 56334, 64974, 24892, 10439, 41491,
            40326, 34988, 57939, 55987, 60406, 64400, 55949, 51913, 47956, 33850, 3299, 20494,
            46240, 4524, 39497, 11102, 4618, 1095, 7133, 13375, 9845, 511, 8393, 18101, 44759,
            47744, 29751, 41955, 57665, 1245, 32303, 11193, 51187, 17554, 61974, 37301, 47236,
            19647, 31536, 16177, 48131, 51359, 56360, 35750, 24390, 9649, 34896, 23661, 14856,
            44515, 42323, 3387, 35370, 29921, 10462, 64264, 43005, 14082, 3573, 60543, 13781,
            46362, 46395, 58536, 21370, 6328, 43763, 43510, 62052, 20617, 19958, 42542, 22985,
            46933, 42263, 54655, 18168, 40689, 61202, 5421, 1030, 55210, 40852, 55448, 59304,
            35819, 34683, 1792, 63255, 10752, 26304, 27346, 28114, 13574, 4186, 12962, 22023,
            46593, 26272, 7532, 14897, 33813, 4690, 14544, 12203, 28806, 24815, 48299, 49475,
            38329, 48913, 17762, 25178, 36572, 36393, 33063, 46940, 14697, 18562, 17474, 25609,
            3723, 19441, 61381, 41259, 35927, 53088, 17602, 52174, 27764, 1138, 46396, 12552,
            19017, 56714, 6714, 51358, 15630, 59880, 59010, 51238, 41083, 39782, 47063, 19253,
            43226, 61078, 11077, 18828, 32437, 23333, 54387, 15304, 38402, 45920, 47775, 35413,
            10760, 14587, 2142, 44510, 27301, 13737, 28389, 61990, 40825, 36833, 57074, 44628,
            50528, 33918, 56843, 22773, 34587, 46811, 54157, 33870, 46448, 45017, 54342, 21634,
            58217, 41806, 52216, 62560, 50521, 51846, 43306, 56118, 33693, 39260, 51350, 3603,
            13157, 47372, 2761, 26190, 43524, 1931, 5764, 20664, 48756, 6326, 37655, 4735, 4880,
            42669, 33564, 7178, 51716, 29167, 63508, 15132, 59746, 40067, 2736, 33947, 49661,
            39584, 55606, 26382, 4886, 8623, 62292, 60183, 35005, 50462, 20638, 60782, 56295,
            22674, 32684, 4708, 36045, 37839, 40860, 61535, 8477, 40858, 39972, 39104, 13437,
            36779, 59659, 7427, 10071, 30602, 58474, 60456, 36384, 31033, 17749, 19732, 51958,
            34584, 6692, 55404, 62559, 36039, 44083, 29601, 56259, 17994, 19934, 32152, 283, 18477,
            58722, 59284, 12213, 54589, 6901, 16221, 48228, 2604, 49844, 46449, 27329, 25538,
            38148, 36087, 25060, 13673, 9541, 23581, 48137, 18068, 57229, 17904, 39674, 21943,
            41282, 29001, 58721, 45525, 12464, 21246, 42220, 43994, 63651, 32165, 41032, 59382,
            3510, 11820, 57248, 58221, 33864, 15286, 16167, 25997, 47605, 30396, 30072, 57188,
            3617, 55325, 42201, 47914, 60230, 48751, 57821, 52789, 62962, 42076, 9530, 64938,
            17104, 25553, 18290, 33513, 13526, 29398, 65444, 10237, 9100, 15080, 21173, 39509,
            38712, 40526, 42677, 26523, 22525, 29897, 16864, 26101, 43991, 42834, 3149, 41463,
            22167, 21716, 30153, 33931, 53729, 37341, 18679, 22148, 58784, 53991, 15870, 33617,
            47541, 3689, 63008, 54687, 39914, 29706, 1133, 45266, 7448, 24713, 60482, 46040, 46136,
            55018, 2821, 63338, 30049, 35694, 50422, 50947, 48183, 6462, 14170, 7080, 39032, 36947,
            13735, 10793, 53683, 32689, 34998, 39723, 14644, 46400, 51182, 8700, 34778, 60057,
            52784, 36164, 60569, 16907, 55391, 52366, 10984, 25945, 60027, 6108, 61731, 38632,
            19487, 15257, 32705, 53925, 30513, 1036, 56741, 47257, 25869, 34351, 32770, 2781,
            47657, 47155, 18358, 27697, 37245, 56394, 61706, 6130, 1507, 36830, 8926, 41471, 22084,
            4709, 42087, 32166, 14779, 61286, 18848, 53222, 47009, 5024, 41372, 19586, 62620,
            56160, 15734, 56813, 10029, 53484, 26471, 7860, 63554, 15413, 50905, 27286, 7132,
            42831, 20471, 47957, 26207, 58312, 29701, 61591, 5901, 7686, 18827, 31053, 23402,
            41020, 27898, 52318, 62296, 45516, 40734, 29277, 12421, 2906, 49157, 30041, 29353,
            41798, 56524, 30284, 53110, 42879, 1859, 17633, 10400, 4691, 50304, 4162, 25306, 16708,
            40827, 36860, 3198, 46204, 52425, 9686, 1296, 37261, 5765, 56562, 26108, 32748, 43094,
            21872, 44320, 29356, 41642, 63763, 31224, 38951, 12326, 57684, 46254, 16900, 22451,
            30560, 19083, 11371, 14147, 15483, 65135, 37717, 45311, 37291, 45223, 21765, 54601,
            40722, 44458, 36498, 10638, 2078, 1566, 1043, 24231, 60296, 33948, 60526, 2807, 4607,
            11893, 22546, 59338, 25429, 27441, 27401, 11880, 8856, 17644, 63453, 35130, 50120,
            42497, 63737, 48365, 52771, 40967, 7256, 31745, 58968, 49826, 46929, 24308, 8951,
            30997, 9340, 24870, 35000, 17240, 49880, 52282, 44365, 15289, 25155, 50359, 19071,
            14016, 15770, 63494, 44598, 65397, 60326, 13321, 10833, 48063, 9501, 23609, 7644,
            35963, 13962, 41249, 21276, 55620, 11630, 42128, 38874, 63304, 29998, 62631, 13498,
            1582, 664, 26228, 24396, 6707, 4801, 27050, 28899, 7644, 52796, 45772, 24670, 26322,
            57744, 4010, 15601, 18837, 8835, 57180, 2025, 11078, 59063, 55094, 38720, 44201, 31777,
            16310, 19213, 26862, 46909, 9462, 16085, 29557, 41105, 23230, 24319, 16853, 59071,
            58820, 47708, 40765, 55587, 29714, 32635, 961, 24212, 32722, 4142, 26467, 57894, 16479,
            30210, 29711, 5112, 6136, 56713, 7289, 55752, 34673, 37111, 59336, 11557, 20114, 13614,
            3525, 62872, 3560, 26529, 19206, 64369, 52344, 40825, 5967, 60868, 47020, 39618, 37500,
            17726, 8008, 6850, 1338, 7334, 25021, 24509, 16889, 64700, 20285, 32059, 44716, 59511,
            55365, 32630, 13455, 57928, 62465, 23912, 34398, 29132, 27012, 57444, 45336, 60340,
            7714, 44882, 51844, 38093, 23126, 15142, 16800, 54212, 29856, 57632, 43289, 8879,
            23275, 63359, 59317, 20556, 11208, 30643, 39552, 43491, 1825, 33606, 62158, 58063,
            37827, 2509, 42887, 33703, 10760, 16681, 63750, 16097, 31555, 10722, 6138, 55576, 280,
            49584, 19749, 25117, 51770, 64258, 12061, 13961, 48712, 14490, 47505, 21524, 19496,
            46975, 16710, 3392, 19106, 3757, 52785, 33573, 61594, 59301, 22942, 21244, 28871,
            50929, 9546, 41163, 6988, 14062, 55276, 15650, 9772, 22559, 36131, 48109, 40180, 12911,
            28736, 11906, 36735, 43134, 18150, 6637, 52743,
        ]))
        .unwrap(),
        c: 29,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc52442fb8e6d1d382578c0506a26d9f7a88ca1f40913e825f93a2ce12d8ccb9f");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_5() {
    let value = VarTestStruct {
        a: 62701,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            13450, 24351, 51399, 56826, 60224, 65266, 53856, 23188, 34504, 34114, 15786, 19629,
            41884, 52356, 4225, 9884, 53460, 39877, 14903, 37672, 39619, 7868, 20750, 15794, 9913,
            30240, 33418, 44756, 5638, 35125, 8412, 21986, 5948, 25577, 43722, 18043, 65173, 30832,
            31201, 46635, 1608, 13472, 51585, 43323, 23167, 29262, 15327, 4920, 54075, 18266,
            17577, 39510, 51636, 62233, 22086, 64792, 26896, 64500, 55966, 39568, 18200, 45832,
            60197, 32892, 13068, 49687, 17142, 3026, 62589, 19623, 616, 36672, 36830, 51880, 63450,
            45700, 35989, 1527, 61371, 58142, 7782, 61074, 48620, 11495, 63091, 1934, 1057, 44396,
            39230, 47927, 8440, 25883, 50393, 64262, 4791, 4369, 55781, 62252, 11699, 56307, 56616,
            17560, 8339, 21742, 35440, 15369, 26117, 48382, 57360, 35277, 14851, 9748, 47941,
            11765, 6828, 25160, 5817, 54281, 8047, 5511, 7975, 59344, 4473, 21785, 52528, 5836,
            18153, 48343, 28146, 48488, 30276, 64502, 4154, 45509, 59957, 10308, 34086, 27202,
            13855, 64935, 29469, 61467, 39072, 21297, 18919, 39040, 56662, 55186, 12369, 9690,
            7072, 59376, 18090, 48834, 17262, 58046, 53887, 28193, 39017, 30431, 3632, 16483,
            11332, 65443, 55314, 6334, 29170, 13432, 38958, 33328, 11872, 46856, 30806, 37484,
            14213, 22247, 26711, 20113, 65148, 56501, 35565, 48070, 37682, 54024, 23999, 9949,
            54521, 5440, 64748, 28893, 13081, 54594, 16750, 35353, 2181, 8616, 18175, 28985, 59463,
            14121, 15548, 59185, 52570, 61386, 30140, 61404, 22860, 15944, 60732, 53367, 15091,
            49135, 24605, 58139, 11767, 616, 40902, 16764, 46031, 13946, 43333, 65282, 59400,
            51158, 27837, 35331, 27453, 44651, 12379, 64532, 6171, 43855, 16227, 61879, 6327,
            24863, 64148, 34333, 14684, 45896, 29147, 38364, 33364, 32974, 32789, 40769, 2693,
            10359, 63522, 41864, 34548, 20281, 60357, 20975, 11443, 7685, 1379, 64175, 32975,
            22510, 63824, 2491, 4689, 25561, 34163, 18760, 40177, 59085, 53517, 18794, 11845,
            15331, 4596, 1367, 47799, 6408, 49887, 10341, 41539, 51692, 34465, 58213, 10750, 63127,
            63235, 45719, 63149, 19657, 26565, 17773, 6406, 65330, 1027, 40763, 8342, 51231, 19674,
            10960, 46107, 61188, 3981, 40258, 31478, 15641, 25830, 2325, 5027, 43220, 47058, 56688,
            35103, 48538, 50311, 18403, 12957, 58151, 65341, 13196, 38878, 11186, 46418, 52884,
            57807, 20946, 25006, 14041, 5375, 1346, 29742, 31497, 53566, 686, 28299, 56600, 56668,
            55235, 26603, 10936, 27003, 13785, 30510, 38981, 10072, 13327, 62874, 51956, 52132,
            54469, 33946, 37615, 20369, 32870, 43646, 53304, 52190, 33577, 45970, 49705, 59447,
            20141, 62508, 1290, 30408, 5157, 4294, 47033, 45227, 22499, 7603, 59807, 2412, 18854,
            42628, 31777, 11892, 1093, 38363, 4406, 28779, 29532, 40307, 16248, 21777, 5017, 3058,
            41828, 41492, 18681, 38355, 15008, 48239, 59253, 27637, 42292, 6209, 44985, 43557,
            56327, 2992, 16147, 23957, 34105, 48890, 57368, 20069, 30545, 44840, 26208, 46480,
            41268, 46893, 44552, 41668, 55793, 7017, 14881, 27086, 11382, 46799, 6524, 5353, 60116,
            3765, 35142, 3672, 64718, 4880, 35714, 48414, 40889, 25801, 17772, 5615, 23026, 2703,
            40512, 10780, 60628, 45149, 15555, 54362, 42684, 18369, 44687, 1953, 3184, 48679,
            33897, 32253, 6679, 41234, 33479, 16043, 10340, 34487, 45717, 52308, 36937, 52038,
            27657, 11771, 7402, 33925, 35238, 37953, 64976, 18156, 16069, 21275, 35916, 24117,
            28346, 39854, 58583, 37423, 5674, 25352, 28684, 18097, 44161, 10367, 43200, 29763,
            9643, 32444, 62144, 30998, 13888, 55916, 54535, 18420, 30173, 38308, 26146, 63608,
            40395, 14702, 7447, 2285, 17792, 1131, 33260, 2960, 32332, 38513, 37337, 2831, 63527,
            16931, 22920, 30454, 14495, 33167, 51268, 24171, 58792, 53698, 57702, 60022, 64480,
            4330, 30086, 37025, 42134, 35636, 22129, 16956, 64925, 62346, 23640, 14228, 30043,
            58230, 18841, 39563, 13550, 18521, 19504, 23667, 477, 10268, 16820, 28933, 45869,
            20854, 17269, 64544, 9645, 35815, 42542, 20048, 20539, 41750, 23915, 57789, 30885,
            29366, 55670, 48984, 35912, 36928, 21634, 2735, 19647, 10570, 59715, 25130, 47018,
            44501, 60270, 30202, 60019, 979, 5334, 4184, 39381, 16060, 48693, 2177, 1624, 44145,
            109, 26297, 3760, 45976, 26234, 12306, 35072, 23108, 359, 36205, 42375, 43668, 49701,
            5985, 17741, 35986, 50806, 40456, 11569, 7764, 49999, 31368, 7231, 60872, 61541, 20524,
            32048, 6712, 30223, 8153, 53195, 4763, 44163, 42869, 57362, 61754, 17873, 33684, 10606,
            30774, 54348, 33012, 632, 28777, 42496, 43559, 30314, 45073, 30845, 40909, 26651, 302,
            6161, 19181, 36556, 3936, 53923, 28705, 46409, 24161, 53550, 61875, 42759, 7125, 12173,
            29283, 64822, 63922, 44442, 43951, 37379, 46418, 2732, 16965, 9105, 53923, 48096,
            41181, 32866, 7869, 57048, 39161, 23300, 33355, 10982, 179, 44668, 34392, 54101, 52667,
            38022, 48921, 16050, 37525, 18046, 59409, 52990, 56338, 52766, 31686, 28089, 53036,
            63053, 21599, 19811, 40771, 24852, 22048, 34998, 17410, 20060, 28286, 48088, 3691,
            43892, 5547, 32070, 22378, 62538, 21013, 19269, 8087, 61626, 8627, 32549, 48306, 28088,
            2176, 40922, 59997, 22648, 40911, 32648, 1288, 16497, 41326, 61170, 10921, 28014, 2651,
            52360, 19216, 62705, 35117, 32338, 30034, 17076, 63479, 54937, 55303, 65254, 1958,
            50463, 21956, 55761, 44936, 60592, 59560, 36072, 36226, 39592, 43351, 12808, 16755,
            54519, 24815, 11615, 51185, 56754, 41291, 42827, 12100, 45812, 26041, 44176, 16525,
            60285, 6394, 12750, 49500, 32866, 58864, 21370, 17014, 56642, 60738, 54612, 30558,
            1825, 1223, 12564, 26955, 27604, 56831, 61630, 49353, 1034, 22221, 39506, 45426, 4060,
            42551, 44999, 39839, 17138, 17606, 25181, 60225, 36248, 52953, 47077, 61478, 59763,
            59981, 6333, 41277, 16737, 2485, 2265, 10425, 55631, 34921, 12573, 42068, 794, 19270,
            21649, 20892, 40279, 65150, 41342, 3432, 34488, 28962, 11394, 22785, 28581, 55052,
            43341, 53264, 30844, 33165, 28308, 54453, 13625, 29292, 9763, 32817, 58460, 40141,
            2448, 37496, 34081, 52786, 22210, 50500, 51413, 29126, 36769, 43292, 18244, 20473,
            47107, 50265, 2320, 56137, 2746, 50727, 48561, 16565, 12005, 6276, 47926, 45147, 29886,
            55396, 57000, 46288, 48724, 37089, 57406, 48266, 59628, 28876, 21811, 31183, 14062,
            53330, 10317, 45440, 62525, 35051, 20458, 53646, 11341, 9604, 47082, 11580, 25609,
            3262, 39181, 17010, 40443, 35122, 31288, 22934, 9937, 4106, 15004, 59372, 16131, 12670,
            39395, 28159, 58633, 6266, 4724, 55914, 57012, 60243, 54445, 2377, 7458, 34134, 22124,
            29976, 53635, 51503, 50312, 4338, 2295, 62248, 23365, 9769, 8775, 11132, 14910, 41745,
            1220, 31456, 39275, 11531, 14984, 4258, 64746, 9235, 60642, 42010, 3378, 32360, 35392,
            1838, 31984, 46955, 29648, 15826, 64936, 62965, 53274, 21525, 52201, 33182, 39605,
            24181, 56208, 22404, 54333, 42895, 13863, 24206, 48662, 46263, 437, 2398, 22343, 20176,
            18670, 31807, 34037, 26311, 35649, 43253, 12343, 33593, 40178, 64534, 39707, 32148,
            18244, 922, 28452, 42570, 6781, 63724, 36488, 32874, 56549, 15519, 30726, 21572, 43165,
            64473, 16619, 48128, 12523, 33120, 61591, 42319, 41353, 59194, 15140, 38659, 51807,
            52366, 36837, 2052, 47911, 64953, 19816, 18801, 52259, 48898, 52463, 22137, 46456,
            58429, 17201, 1704, 61033, 63848, 47929, 43661, 60381, 19194, 15658, 38106, 26512,
            30627, 17027, 47403, 18228, 20276, 61936,
        ]))
        .unwrap(),
        c: 129,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3d9572d393c997f81bbf98bf9bbc40ee291d5f798c8fc8fbe0ff668db6432b8c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_6() {
    let value = VarTestStruct {
        a: 55972,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            11399, 15291, 30938, 30612, 5398, 6772, 58525, 31460, 46486, 44751, 50458, 7858, 43542,
            50930, 56945, 36025, 56677, 43487, 63408, 7428, 56091, 55253, 24345, 58999, 51149,
            30080, 40324, 10777, 56094, 5654, 9730, 59633, 26035, 350, 29364, 56062, 50655, 7435,
            51169, 1496, 55034, 19505, 28135, 36965, 42148, 12733, 11143, 34889, 3140, 24353,
            25123, 56868, 40242, 27381, 24145, 37854, 46609, 2021, 29877, 63279, 56335, 32920,
            39475, 31007, 10330, 15026, 29818, 32041, 23646, 54540, 63584, 32148, 57607, 27323,
            42202, 33253, 7571, 19501, 31928, 43882, 54288, 11689, 28873, 18582, 11100, 15274,
            56066, 16607, 63103, 52394, 23088, 5934, 47019, 23313, 21529, 53968, 28636, 36481,
            7394, 1669, 47058, 25922, 12435, 14106, 25807, 45774, 56007, 57169, 22425, 14315,
            10015, 5277, 31002, 22866, 20440, 59011, 59782, 40484, 47772, 57785, 42650, 34494,
            13672, 29484, 22960, 42630, 64849, 5875, 26200, 48552, 52253, 57580, 26786, 58474,
            16470, 41167, 50301, 26638, 43149, 38135, 51118, 61197, 61726, 11527, 47401, 12013,
            41462, 63503, 1895, 11848, 22852, 12088, 54598, 2239, 48127, 54869, 53764, 34984,
            64819, 24276, 58233, 29952, 31711, 25194, 46704, 21808, 45102, 39954, 11449, 25982,
            58525, 15035, 34896, 58909, 907, 12615, 17652, 33350, 64545, 59993, 16195, 60900,
            28750, 8007, 7691, 62983, 42024, 58583, 36933, 42557, 52132, 54761, 15056, 12448,
            13142, 65283, 27373, 26369, 16552, 15685, 51428, 21993, 18847, 61140, 14492, 56600,
            17930, 26404, 42741, 50153, 54872, 4911, 19672, 10882, 30084, 40005, 37122, 5487,
            13875, 9070, 3529, 60893, 41929, 26048, 36420, 20226, 12206, 15736, 9007, 56187, 22710,
            29413, 26169, 42891, 31453, 52558, 16561, 48212, 32197, 63461, 65495, 55719, 34166,
            27183, 6277, 10330, 30055, 24421, 39894, 1590, 50974, 9457, 61119, 6175, 6847, 56281,
            41441, 55740, 61464, 17539, 35962, 55569, 14010, 50314, 49065, 308, 46191, 20862,
            64832, 3597, 32058, 59561, 30926, 52830, 3180, 56167, 58450, 39944, 51675, 26064,
            49070, 58947, 52813, 62294, 36713, 48767, 22670, 11739, 24851, 3258, 40199, 44300,
            58863, 57240, 16157, 61144, 53112, 39023, 57596, 22055, 38379, 17467, 23479, 32534,
            15470, 46976, 60539, 36433, 55438, 62731, 21650, 22672, 23007, 56552, 15111, 30304,
            845, 57614, 27431, 8468, 61481, 62207, 46583, 8118, 34734, 58967, 59248, 13239, 25141,
            27378, 54893, 12224, 3912, 9628, 19691, 7313, 34692, 44202, 60135, 59757, 15796, 53297,
            58565, 1565, 2660, 62462, 46057, 50953, 24942, 58131, 33242, 20800, 47227, 37536,
            46215, 50335, 52121, 8097, 64235, 27197, 7249, 8568, 16725, 16612, 42968, 20796, 6356,
            31220, 27948, 4246, 33344, 40546, 60800, 32272, 34461, 51856, 24106, 11988, 3380, 5730,
            45737, 30833, 1965, 21053, 13204, 50503, 40670, 51104, 42160, 56854, 31896, 62806,
            35065, 62865, 19119, 13151, 50686, 34188, 17170, 63895, 5483, 36547, 18355, 61042,
            55214, 48008, 27449, 36858, 5832, 5827, 58798, 30184, 14349, 29998, 58597, 26956,
            21310, 38282, 9582, 47665, 22322, 40639, 2660, 9370, 56242, 5313, 60678, 3524, 32640,
            22397, 48941, 6325, 43146, 47535, 34380, 23938, 52169, 42240, 19029, 87, 65211, 16723,
            22411, 9044, 48028, 5360, 21489, 54014, 25091, 40209, 56957, 30166, 61763, 12538,
            57745, 18461, 950, 5884, 61044, 15658, 9510, 37657, 5342, 46055, 33064, 49596, 49727,
            16553, 53187, 39859, 55016, 27294, 10467, 33639, 6496, 21574, 3319, 28053, 61240,
            14564, 22446, 62825, 63701, 41076, 65331, 25976, 28935, 46190, 59052, 5978, 4937,
            29649, 21714, 43348, 59083, 48671, 54719, 54919, 62564, 15064, 15492, 10310, 23814,
            58312, 15505, 35497, 64466, 20340, 51492, 55526, 47630, 40920, 56527, 7780, 54246,
            35602, 1091, 24618, 28046, 3956, 62891, 32475, 39197, 10864, 44184, 459, 56445, 4644,
            48076, 64797, 5477, 9971, 908, 46855, 10116, 57495, 4787, 10777, 33486, 33706, 63880,
            35814, 38102, 44108, 20955, 12199, 3413, 37589, 20131, 28128, 19806, 44211, 225, 6181,
            58015, 61157, 672, 1685, 47442, 56517, 38923, 38796, 47968, 40714, 52112, 51923, 3279,
            20351, 62297, 13769, 53676, 1685, 18586, 40550, 35681, 1342, 15790, 54458, 54743,
            41973, 6767, 32012, 29117, 6801, 24552, 52877, 46380, 15752, 60197, 16849, 37141,
            32613, 64372, 64207, 27250, 49276, 30880, 26452, 25222, 62169, 9643, 26537, 7274,
            21835, 10792, 38833, 33229, 53399, 56249, 27836, 42095, 1994, 55040, 65447, 42454,
            28826, 53882, 16933, 36202, 41189, 58201, 5221, 22199, 30992, 52153, 60946, 27007,
            43634, 29485, 15687, 42811, 48721, 37314, 41995, 53486, 5561, 4448, 36422, 58238,
            32123, 60207, 18145, 1022, 23369, 11938, 33743, 39376, 19270, 7173, 33603, 58949, 3060,
            10799, 27215, 49617, 13604, 35875, 24198, 56380, 48764, 61890, 21136, 23821, 32848,
            16553, 10389, 34924, 64208, 43619, 40757, 9632, 34271, 21110, 24100, 24558, 22422,
            43760, 59069, 41398, 34597, 37637, 60630, 5618, 16275, 48590, 34771, 14023, 39677,
            5882, 7409, 6483, 11030, 44489, 14753, 6355, 47920, 47286, 49687, 32520, 46974, 52864,
            46905, 9705, 35634, 29235, 28158, 31341, 3993, 20930, 61867, 60115, 64147, 52387,
            24318, 23065, 2287, 47151, 7115, 60782, 33894, 54203, 20345, 12088, 43785, 52419,
            35442, 57189, 64822, 11974, 18782, 19726, 27342, 4934, 35411, 51636, 42411, 32915,
            3358, 31351, 6191, 54101, 38763, 41845, 32368, 37795, 60060, 26247, 37383, 37831,
            30981, 59295, 34278, 54376, 51426, 9390, 6193, 10660, 39178, 17982, 45343, 30696,
            37725, 8853, 39267, 30340, 54863, 31520, 57111, 20655, 39748, 37100, 38122, 43901,
            41022, 64161, 40570, 50122, 17037, 33987, 45478, 29723, 22592, 36173, 5241, 45030,
            33006, 28014, 31705, 52871, 52245, 65263, 21204, 43385, 43900, 35230, 1496, 23777, 407,
            43493, 49471, 41992, 44179, 32461, 9755, 55182, 28242, 1552, 44445, 20009, 48914, 8957,
            3780, 30400, 50764, 52875, 34390, 64667, 41288, 14196, 8323, 13296, 12300, 44106,
            37447, 31824, 19937, 7562, 55441, 19922, 65393, 62069, 54216, 53575, 29471, 35523,
            40855, 38995, 4949, 61856, 56360, 47382, 8932, 64144, 26639, 20860, 28353, 28778,
            29764, 8993, 49287, 47173, 33950, 31589, 4833, 5994, 18852, 57108, 38201, 15181, 10162,
            11260, 6547, 26391, 62446, 9488, 17658, 22078, 45846, 40070, 59120, 8767, 64778, 14054,
            3636, 28072, 5851, 30583, 2158, 34866, 31945, 30376, 61634, 41102, 64409, 22678, 18643,
            21341, 24406, 11231, 51896, 62418, 32255, 42126, 4962, 22672, 43634, 27654, 5928, 4376,
            1987, 55380, 19561, 62886, 59174, 25333, 9510, 2132, 2378, 26809, 44758, 36510, 28142,
            12136, 9685, 32159, 42256, 57679, 8624, 58299, 49729, 28094, 52092, 20607, 53823,
            43603, 19836, 54095, 43940, 6498, 37425, 46432, 63707, 2048, 30217, 31148, 15431,
            65083, 4044, 27107, 54770, 1634, 26113, 16574, 19206, 305, 14190, 13627, 24517, 59034,
            2066, 5421, 59845, 36560, 44348, 28794, 12620, 46123, 56797, 17640, 42063, 35763,
            31669, 43113, 41417, 13979, 44036, 48544, 45906, 35142, 39080, 42813, 3177, 53424,
            57840, 25764, 43201, 59484, 20364, 32041, 3452, 36433, 21146, 6679, 13195, 16593,
            26660, 5250, 49757, 30435, 9150, 56914, 14896, 53146, 63927, 52958, 1, 16821, 24439,
            64956, 3804, 21930, 15532, 47984, 8884, 56988, 48868, 35611, 5493, 63657, 41499, 55380,
            37728, 16769, 23559, 57683, 3921, 49532, 9588, 49903, 3020, 42334, 58957, 31275, 38661,
        ]))
        .unwrap(),
        c: 75,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe408e32f2280694b2fe31693dd5ac1bfada7abeff3d7de21539eb51a87beb1cd");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_7() {
    let value = VarTestStruct {
        a: 44853,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            62481, 28416, 26298, 58537, 60679, 56277, 19174, 41894, 17873, 64750, 9105, 19665,
            14539, 14113, 13899, 48921, 48840, 45740, 54161, 5994, 21812, 15017, 18290, 57281,
            36714, 37001, 24523, 1796, 43725, 41057, 8742, 12975, 21189, 57679, 10027, 5673, 28958,
            49524, 3221, 11316, 20434, 60805, 52210, 2892, 165, 50601, 44737, 2009, 16262, 32961,
            50653, 35491, 15144, 1324, 61353, 43976, 38280, 8077, 21034, 20250, 7650, 48293, 29649,
            34225, 5844, 3954, 29912, 2764, 32640, 18295, 37007, 8517, 7629, 40727, 37087, 30131,
            3188, 63417, 35393, 14949, 65277, 53493, 64264, 38666, 28457, 48270, 34153, 5336,
            31342, 1547, 1619, 44200, 57020, 49459, 37090, 9735, 36668, 36033, 4790, 8294, 52302,
            37213, 32977, 38690, 36723, 12201, 60669, 61855, 51776, 56089, 65300, 24103, 11179,
            432, 29915, 53512, 34900, 31077, 13491, 34671, 28147, 56567, 1360, 37625, 26580, 34806,
            491, 18534, 57752, 45232, 37461, 55246, 61194, 23002, 34230, 18780, 28938, 46672,
            38195, 31766, 28682, 38892, 55873, 5043, 37855, 36346, 56134, 7852, 48611, 23716,
            61276, 10763, 48469, 30334, 30417, 58174, 45328, 60762, 52074, 47252, 61442, 43105,
            39409, 57960, 64420, 65204, 32094, 20482, 22905, 13343, 46177, 5213, 19893, 31472,
            47764, 56937, 20526, 49572, 34134, 53627, 31468, 40245, 27105, 51064, 15981, 9629,
            24690, 1030, 18771, 44540, 36668, 11054, 27243, 63344, 28502, 55641, 54777, 54608,
            59283, 47559, 63981, 34242, 54234, 15282, 42195, 40500, 46251, 44616, 8199, 56117,
            47824, 28233, 52037, 20930, 62744, 59877, 12399, 31759, 7760, 14969, 14152, 20453,
            52520, 20847, 62703, 61038, 21267, 17992, 62570, 16749, 61396, 41740, 13623, 22328,
            15944, 25495, 14991, 54763, 30484, 48795, 22842, 37478, 24675, 13499, 26761, 13479,
            40131, 7536, 58445, 60536, 64114, 36916, 7075, 10559, 19603, 27584, 2862, 7345, 51998,
            2117, 26845, 50605, 8319, 15238, 36173, 40133, 7872, 48191, 13986, 35215, 45701, 7781,
            61520, 9528, 4293, 62338, 26599, 1294, 8300, 49410, 36090, 621, 52357, 21349, 45819,
            13239, 9566, 18544, 37557, 61619, 9947, 5656, 24051, 21711, 17246, 38547, 15233, 50244,
            14769, 18844, 25804, 60371, 23289, 37763, 50477, 64181, 2007, 672, 43478, 47081, 41786,
            25944, 39485, 6281, 51717, 19092, 63390, 4412, 46318, 8308, 61595, 42898, 26805, 8768,
            35055, 51644, 40306, 11821, 37106, 34480, 20444, 54769, 63261, 18213, 64695, 19671,
            26815, 59509, 63128, 41509, 7998, 41501, 50065, 12832, 64569, 25107, 64529, 64578,
            20770, 7549, 62249, 24223, 57876, 7567, 42997, 16791, 59898, 62621, 36737, 47054,
            45593, 37796, 37295, 22100, 58075, 38905, 33878, 2479, 16659, 62152, 57572, 30517,
            11628, 3196, 63170, 8436, 21689, 53102, 31366, 6222, 27859, 56762, 2875, 20518, 5918,
            48718, 46889, 13482, 31806, 32284, 57935, 5880, 20217, 15270, 24764, 19503, 33587,
            40218, 16023, 7970, 41774, 22396, 55339, 36683, 32231, 41318, 30071, 1617, 37335,
            28889, 36941, 5695, 21427, 10440, 63200, 29698, 45635, 499, 54840, 49, 53954, 5384,
            34502, 41088, 46046, 35970, 15520, 28796, 6123, 63796, 65404, 55512, 39414, 11147,
            63749, 37177, 33138, 52722, 58530, 51627, 40951, 14044, 46316, 56018, 35770, 30693,
            23792, 62757, 61917, 26267, 40130, 39943, 45543, 43142, 33231, 65384, 59439, 65474,
            8521, 26945, 51428, 2440, 45825, 22215, 8935, 16392, 51727, 62768, 59939, 6076, 24202,
            8759, 11076, 30884, 33871, 27611, 40580, 63578, 29437, 42895, 59764, 50682, 14579,
            50790, 51383, 16598, 27789, 25433, 50379, 42852, 11405, 5936, 11907, 32164, 2400,
            29394, 26647, 16684, 3435, 12672, 64605, 26203, 35997, 25958, 32711, 64450, 19957,
            3957, 64290, 64905, 8994, 48576, 62919, 30096, 24466, 3594, 55728, 3321, 17931, 20397,
            10469, 55488, 45914, 9196, 11926, 36666, 41113, 2318, 54579, 818, 50813, 24859, 24505,
            57096, 52174, 43312, 61774, 35550, 8752, 42920, 61878, 10443, 23277, 25320, 5784,
            12143, 62415, 23333, 8428, 10672, 1276, 30357, 18521, 65093, 8089, 38995, 30980, 4633,
            12220, 15129, 63863, 64463, 3056, 59030, 24671, 21832, 63802, 28060, 22600, 19714,
            53408, 1778, 1891, 28844, 62098, 34647, 51572, 42572, 15025, 25018, 43298, 51819, 5936,
            4540, 9637, 56885, 24843, 30180, 10259, 52824, 60598, 54729, 46273, 53242, 21060,
            27328, 28769, 49682, 44462, 48291, 17234, 32445, 56233, 41542, 29969, 58369, 28834,
            65390, 38261, 43490, 8465, 58880, 39256, 29459, 1809, 26244, 36913, 31709, 18061,
            47202, 60346, 10610, 34835, 13360, 53567, 15500, 4769, 45468, 13235, 34369, 34243,
            8362, 61483, 47901, 9764, 5107, 15661, 57946, 46727, 5387, 51010, 43517, 41813, 23863,
            1216, 32759, 17230, 18053, 52183, 60999, 39583, 8427, 63887, 48959, 1785, 32555, 15182,
            34959, 19879, 45321, 22577, 33786, 32926, 36830, 13020, 18143, 42884, 22247, 11406,
            46773, 28717, 27157, 23251, 18380, 52218, 47888, 51093, 29318, 51654, 9092, 56184,
            31654, 45630, 53222, 61741, 11234, 9853, 40538, 1571, 44868, 23482, 12733, 15011,
            30576, 14725, 29068, 38415, 9497, 10848, 1720, 62394, 26341, 14372, 58833, 6138, 2572,
            24671, 1938, 27415, 8719, 56852, 23011, 56000, 19095, 51538, 59169, 43591, 46191,
            19518, 31921, 12718, 15548, 20704, 23506, 26546, 13734, 27094, 22117, 21928, 29093,
            55958, 11961, 57807, 21101, 23261, 57852, 32829, 28718, 36130, 51187, 54831, 43853,
            22387, 25485, 51134, 53400, 41446, 43657, 22153, 11454, 8741, 10966, 44912, 63416,
            59720, 17897, 46131, 647, 9592, 42705, 41715, 3565, 8066, 55504, 32381, 58413, 42878,
            26059, 19357, 56181, 15133, 28846, 64519, 13659, 64544, 530, 49958, 3206, 36433, 27964,
            55969, 51748, 44453, 2057, 15462, 7802, 40564, 207, 56018, 58324, 10768, 11470, 15693,
            10406, 18332, 26649, 64664, 18507, 45611, 39515, 10304, 35195, 18628, 4075, 12883,
            18375, 28048, 64114, 47846, 33206, 8308, 20278, 16647, 6883, 50107, 8005, 63747, 56211,
            14572, 40972, 12054, 31379, 34031, 45133, 40626, 13240, 9110, 53399, 13841, 35944,
            33993, 31190, 64277, 50766, 6670, 5299, 64809, 55402, 63731, 41724, 20674, 55284,
            56476, 8762, 12172, 41415, 42847, 4334, 11115, 3732, 47257, 39045, 33666, 58688, 30093,
            65457, 711, 56996, 24671, 14765, 7766, 4926, 34712, 37355, 22896, 59725, 11917, 8750,
            61243, 50965, 15595, 45043, 35553, 64907, 50816, 32325, 29850, 13596, 26313, 56126,
            59381, 62146, 54630, 17527, 64434, 52508, 4730, 24408, 9733, 47924, 528, 47039, 17124,
            13134, 33111, 34721, 58143, 39281, 28766, 12671, 33030, 13397, 12475, 985, 59290, 7642,
            19743, 54170, 31709, 23564, 22517, 59813, 6826, 40139, 53646, 16997, 788, 44778, 7725,
            40135, 60811, 14134, 58728, 62932, 62595, 64852, 25802, 64525, 19408, 58019, 43221,
            33576, 61776, 56499, 38031, 5140, 51715, 51013, 55526, 23095, 50384, 34180, 50049,
            50731, 48014, 20740, 42835, 54145, 26779, 34864, 7822, 37892, 44506, 46669, 1064,
            52292, 2306, 45131, 32758, 3065, 65277, 39106, 43503, 4242, 60331, 48806, 48664, 19991,
            3404, 29584, 708, 44886, 60891, 17247, 41643, 59610, 27319, 63310, 6174, 21736, 11989,
            63980, 44838, 3777, 60531, 15462, 4852, 50935, 29957, 49217, 50824, 30687, 14948, 7702,
            41200, 11864, 17199, 56310, 42124, 31080, 6805, 669, 60959, 56462, 64109, 19571, 22045,
            14778, 11045, 45259, 53790, 31786, 60923, 30062, 63435, 49348, 32180, 44880, 19035,
            52610, 3227, 29543, 35046, 19419,
        ]))
        .unwrap(),
        c: 191,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x47415855521dd2b3c7928c4fa89f4e8fd64308b8a8f310c35319976154e8df3b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_8() {
    let value = VarTestStruct {
        a: 20549,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            3953, 42181, 26705, 51056, 39573, 25650, 49315, 48964, 13112, 56492, 18886, 45518, 130,
            28217, 60342, 633, 59257, 5604, 55669, 59890, 2011, 16490, 51189, 22044, 53357, 62482,
            9294, 4095, 3679, 53815, 44405, 61177, 48367, 22326, 48547, 53486, 3920, 46224, 6267,
            59867, 29456, 63664, 38263, 49490, 35072, 17006, 31264, 55283, 1999, 2747, 42329, 7578,
            55385, 10466, 52684, 59493, 42385, 13988, 62351, 31717, 19392, 45222, 21005, 34662,
            64041, 43082, 63999, 693, 20680, 23304, 2114, 53387, 36990, 11975, 49995, 5496, 36261,
            31195, 13010, 12003, 31455, 33374, 52264, 937, 63504, 35982, 60148, 10290, 19632,
            29023, 45602, 54188, 56320, 36702, 35657, 27264, 40892, 38571, 34461, 45393, 13022,
            46954, 989, 34511, 45450, 11819, 8154, 39062, 45419, 14588, 23591, 5359, 22258, 272,
            12666, 20087, 49475, 50430, 65153, 15202, 23103, 52793, 59645, 11258, 27806, 57408,
            27975, 3554, 5756, 8631, 25325, 48852, 51030, 17315, 43318, 30693, 63394, 4540, 3848,
            57485, 39548, 28299, 55132, 57764, 24163, 21103, 52767, 5282, 57370, 41462, 39346,
            52053, 19363, 36189, 33659, 19623, 11518, 15041, 10157, 58625, 4778, 53313, 24799,
            56547, 22690, 40980, 61514, 65, 57921, 52646, 16921, 10647, 46526, 13561, 62477, 51575,
            47397, 65146, 1843, 3029, 15045, 13584, 29802, 24096, 37349, 44160, 33597, 24169,
            14559, 27029, 46397, 12037, 550, 1314, 63674, 45946, 23269, 31708, 28836, 58951, 55617,
            29039, 23374, 14278, 18181, 53120, 11884, 19734, 1319, 22901, 58236, 49651, 62275,
            4941, 21806, 30253, 38415, 50895, 56466, 43614, 58969, 4363, 4331, 60585, 13388, 11071,
            48828, 5063, 21030, 38351, 32086, 63497, 64640, 43751, 41385, 52328, 57837, 25091, 385,
            56321, 25819, 44064, 32585, 40154, 9029, 23680, 15539, 37648, 32500, 15432, 28791,
            61579, 27001, 44449, 28179, 3720, 14480, 2307, 62358, 54551, 23706, 37897, 53586, 5061,
            46529, 11063, 57196, 3376, 60428, 38517, 31100, 44645, 51017, 43090, 57287, 55337,
            25862, 19637, 11647, 33211, 24875, 34302, 10257, 57729, 43018, 44198, 62507, 44656,
            52406, 15588, 61128, 29920, 2264, 38316, 57046, 30565, 57623, 43668, 7929, 22473,
            25933, 542, 57944, 910, 26617, 33200, 1875, 33080, 52737, 25943, 8191, 6764, 38979,
            5347, 48371, 10929, 12827, 14888, 9041, 54830, 46673, 65006, 8369, 36040, 62022, 55232,
            46439, 10472, 21292, 25038, 48333, 63416, 32526, 18974, 44528, 20632, 32554, 26766,
            56638, 28105, 21978, 6332, 34864, 49289, 5005, 31163, 18380, 49278, 41247, 40215,
            50465, 40718, 61293, 21390, 25788, 61342, 53998, 49498, 31579, 29218, 7664, 20367, 922,
            50612, 6735, 33760, 52202, 31405, 2447, 26504, 26314, 62924, 61956, 61709, 35110,
            30514, 28238, 64795, 17172, 56513, 62232, 8333, 42962, 1041, 18146, 57164, 8306, 25025,
            38374, 21390, 63857, 43875, 44727, 3898, 61449, 44171, 59766, 32336, 60317, 42493,
            38116, 37091, 48269, 30372, 24491, 57631, 22307, 54479, 43111, 48823, 32647, 62614,
            19704, 3381, 4800, 12014, 825, 45052, 41676, 55646, 63851, 52639, 45049, 4047, 18673,
            46730, 2936, 32867, 44613, 42201, 40255, 31998, 52108, 32917, 54059, 845, 36793, 4950,
            54606, 34480, 21870, 15301, 46232, 27894, 35437, 9069, 14631, 6579, 64403, 35432,
            28814, 62268, 6068, 2254, 1791, 37680, 52394, 21736, 59657, 41008, 10434, 1068, 44764,
            61238, 13059, 29143, 63911, 40245, 22717, 21774, 21714, 24405, 62445, 7486, 34849,
            34561, 51981, 40502, 1109, 10148, 28660, 39145, 49674, 14565, 39503, 31553, 55370,
            12967, 44958, 22640, 26336, 45522, 28983, 53227, 7755, 13943, 40069, 43769, 20693,
            39131, 52990, 29813, 11736, 65031, 36341, 30416, 19374, 46936, 18955, 6029, 57481,
            35136, 62083, 47691, 7419, 46702, 58737, 38097, 55414, 18791, 63884, 5693, 51292,
            59859, 5100, 29405, 56951, 37431, 61146, 14937, 1655, 7838, 4303, 39046, 62016, 63440,
            54710, 23705, 21698, 55481, 60667, 25430, 52691, 3155, 10867, 60315, 43753, 65288,
            42179, 10460, 33526, 27119, 48175, 56163, 6415, 41109, 40156, 47824, 24375, 2877,
            58008, 2147, 7692, 54797, 23859, 21590, 7840, 15993, 9556, 9766, 3064, 23648, 58762,
            58364, 52678, 54832, 61546, 34738, 52724, 40291, 14096, 55023, 14316, 62275, 41589,
            49367, 30073, 1231, 25959, 39585, 14263, 48319, 60549, 30328, 1690, 43022, 47318,
            19633, 30169, 57083, 36980, 52420, 23664, 24962, 32984, 15740, 65513, 39561, 36453,
            16326, 32989, 65108, 60062, 53715, 3718, 47321, 9614, 22319, 20338, 55238, 64205,
            12283, 61628, 8306, 45078, 38896, 22038, 52739, 31696, 4483, 31496, 44329, 2673, 58504,
            16979, 25096, 44855, 37901, 31987, 26206, 27941, 55262, 5918, 58060, 596, 49901, 62096,
            35728, 39036, 38452, 47798, 54423, 2013, 58878, 17516, 58889, 2305, 49750, 39093, 5492,
            29594, 3589, 37282, 28021, 9508, 15542, 8657, 61546, 33119, 27501, 6859, 25644, 54924,
            39968, 56571, 27605, 607, 36450, 35099, 11138, 31669, 42871, 31793, 39486, 26385,
            26226, 14129, 1754, 18956, 7654, 49135, 37941, 5973, 25121, 57136, 52548, 17488, 31268,
            35353, 39309, 58658, 31773, 28998, 5392, 30623, 33610, 2175, 11003, 920, 6678, 5603,
            60364, 65007, 59139, 23030, 19541, 39502, 50725, 13729, 11633, 8357, 20903, 15389,
            36437, 57520, 52298, 56696, 40329, 16735, 47542, 25805, 15116, 14364, 64628, 53718,
            39841, 6490, 35223, 59895, 21749, 39962, 21810, 63880, 40, 5424, 48138, 15224, 16141,
            1428, 26214, 46969, 45313, 46820, 3569, 17128, 33552, 18239, 50329, 33714, 40945,
            62519, 51447, 2472, 33967, 6734, 2671, 28342, 17757, 2853, 28544, 35438, 3798, 37716,
            63945, 29789, 43279, 5410, 1668, 28038, 23504, 7002, 21300, 62951, 25675, 61469, 15954,
            14060, 33454, 9197, 35916, 11897, 21297, 64804, 45478, 21419, 52206, 30760, 19993,
            62021, 10991, 24063, 35192, 64390, 44214, 45619, 47928, 26170, 28362, 39971, 20761,
            59466, 3898, 17475, 38945, 60879, 41090, 28133, 57647, 7981, 61319, 52109, 64123,
            51880, 24494, 5728, 37745, 32977, 48944, 61442, 24697, 34953, 4312, 10553, 2802, 64784,
            65518, 4406, 51383, 36496, 29353, 18612, 36643, 34687, 202, 15809, 16756, 17434, 65011,
            37243, 29663, 26132, 18702, 40121, 42562, 52255, 23888, 43429, 65116, 57537, 32902,
            62611, 25664, 43718, 50449, 35049, 21908, 48456, 2993, 43746, 45419, 23295, 14159,
            54961, 36612, 47416, 63385, 12164, 39495, 54800, 13471, 63008, 8755, 60454, 41514,
            6931, 28406, 56903, 32888, 43361, 63244, 17963, 50603, 30458, 33237, 12349, 32658,
            40489, 60055, 868, 2339, 29469, 64952, 65232, 23280, 6279, 50332, 50019, 63779, 18598,
            4620, 63912, 39337, 30673, 4532, 37702, 37846, 31037, 22811, 35312, 56464, 43133,
            31778, 47642, 55998, 42524, 2041, 52186, 7099, 63299, 15132, 23302, 25591, 62936,
            17688, 56470, 5775, 38770, 28788, 42216, 48703, 21161, 59804, 24848, 24552, 38103,
            53076, 48233, 57864, 12283, 58694, 37837, 62483, 22248, 3207, 195, 4163, 16993, 10510,
            51879, 49481, 31138, 32349, 14431, 5975, 5804, 51537, 21105, 31817, 43847, 34224,
            63489, 32396, 697, 60571, 35106, 19284, 22140, 49159, 65174, 38939, 62863, 52996,
            52336, 46295, 46431, 54394, 32120, 56278, 14509, 24522, 5439, 30695, 58985, 35727,
            64901, 35161, 28918, 59124, 59869, 10016, 61962, 19295, 23550, 28025, 20276, 61310,
            33394, 51635, 13896, 54242, 44244, 49306, 41227, 63930, 39728, 35502, 36087, 27233,
            49810, 20257, 3549, 5944, 13320, 41870,
        ]))
        .unwrap(),
        c: 240,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xde9f1e6dbba6727cd87bea1d93ac0f92ac4b889c5d3a483650af23e10712621d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_9() {
    let value = VarTestStruct {
        a: 36734,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            19081, 32810, 33919, 8568, 20609, 44802, 35110, 36218, 59983, 22518, 1472, 41772,
            59975, 59928, 22260, 28174, 32815, 11763, 1320, 62405, 58206, 28106, 13787, 44744,
            12464, 57901, 27937, 52625, 10732, 19766, 33048, 62709, 18563, 7133, 25193, 59356,
            59278, 37228, 32843, 31015, 15260, 38063, 57145, 9790, 61497, 19303, 65039, 40034,
            4974, 14568, 39104, 41417, 60699, 42367, 10589, 10345, 22038, 46397, 12159, 58536,
            9319, 47762, 55788, 31862, 6292, 12535, 31027, 26067, 2846, 51896, 9480, 14839, 6586,
            11918, 62648, 46382, 20551, 25127, 61577, 40093, 53669, 5157, 1900, 45711, 37406,
            28789, 45607, 35387, 32860, 65014, 21162, 6374, 33716, 48574, 46777, 27738, 8540,
            31556, 63804, 59170, 63127, 45623, 34364, 9333, 23829, 52269, 53375, 57646, 16341,
            41758, 3273, 31739, 59637, 34303, 28371, 45319, 51183, 18363, 32772, 19011, 46512,
            38507, 19398, 17365, 6742, 22022, 38263, 43803, 45345, 15434, 50542, 53308, 63955,
            25109, 65120, 12016, 24683, 11769, 37715, 47612, 758, 57637, 39030, 61451, 27955,
            26480, 56870, 14359, 13136, 29373, 27964, 9592, 17585, 43888, 52807, 59179, 60588,
            17403, 8024, 48209, 15407, 46231, 43126, 1052, 493, 11375, 53852, 19919, 47846, 690,
            44463, 28120, 62835, 40838, 52071, 16966, 31188, 11420, 55680, 8345, 33857, 60661,
            49902, 47308, 6595, 50664, 56406, 11771, 42777, 21007, 26990, 34886, 56815, 49289,
            28126, 32071, 20342, 61101, 11472, 43864, 17495, 57493, 26384, 60112, 40415, 54428,
            37676, 35336, 5659, 43952, 1820, 60659, 42128, 23481, 1511, 17740, 19556, 7189, 187,
            25146, 49939, 64360, 57579, 24440, 11254, 25465, 44487, 55186, 21889, 32330, 12735,
            34473, 64052, 14340, 41266, 8917, 14460, 2372, 56423, 63573, 46036, 41622, 55954,
            51299, 30236, 41351, 41427, 11856, 15840, 16499, 9052, 1617, 28820, 53368, 64978, 5952,
            54583, 6959, 36968, 38491, 11290, 24280, 59225, 42423, 10858, 58972, 62694, 17945,
            32236, 4876, 49885, 14320, 38274, 51161, 40511, 54055, 11698, 3581, 26390, 42412,
            16387, 60623, 9104, 65037, 33759, 56355, 57896, 34812, 52450, 8116, 1865, 27057, 38613,
            37727, 16730, 65310, 25713, 15196, 35483, 27103, 46787, 27021, 14108, 28113, 40375,
            5219, 49546, 38249, 20616, 9913, 61691, 52180, 43596, 39355, 27859, 32671, 35663,
            47209, 25116, 29800, 12615, 16644, 21300, 54498, 33869, 37133, 16775, 27134, 64503,
            36620, 32691, 33056, 24221, 51813, 40508, 62605, 27413, 28038, 41369, 6957, 51822,
            27961, 37665, 54342, 11522, 9633, 22910, 5392, 36716, 60970, 29281, 36121, 55029,
            39427, 26613, 21841, 33515, 3762, 64478, 17893, 9047, 54351, 59048, 38384, 61266, 8324,
            62132, 60242, 38262, 62380, 56315, 42129, 48504, 50906, 63009, 34832, 9933, 55761,
            38537, 10387, 43365, 4561, 22626, 37789, 10012, 10957, 23006, 42206, 9568, 61257,
            22541, 13400, 42267, 27184, 2238, 20977, 48279, 20661, 42800, 30939, 50651, 38924,
            22894, 28349, 63315, 17893, 27696, 44178, 43338, 50645, 9550, 42527, 7709, 268, 47651,
            50083, 42349, 12834, 57596, 44135, 63979, 48959, 64099, 35136, 23514, 49251, 54830,
            35128, 23921, 38196, 10849, 17991, 53139, 50893, 29409, 34378, 20674, 24454, 27481,
            53260, 29400, 45057, 54446, 2436, 5662, 59825, 38321, 55586, 4122, 38412, 21932, 46899,
            14115, 60484, 10540, 47833, 26175, 59574, 15050, 60366, 29536, 5998, 56437, 9417,
            48398, 1055, 39469, 54949, 62692, 12187, 28902, 51034, 32169, 10743, 29931, 25311,
            8644, 53153, 6242, 11240, 7022, 22311, 65226, 23253, 51921, 26016, 36818, 57480, 42550,
            10502, 41387, 22959, 27416, 990, 53066, 58693, 1730, 56394, 4654, 2825, 59626, 41255,
            52990, 47236, 52090, 22144, 47978, 64800, 2200, 59663, 1161, 19938, 42793, 19828, 7421,
            43782, 23262, 62431, 46623, 12734, 26844, 31080, 61013, 20274, 56498, 2474, 43219,
            40744, 43742, 39451, 53179, 3519, 41552, 1735, 10708, 30431, 40519, 29592, 63614,
            27260, 16044, 43660, 9865, 3302, 10307, 51984, 61184, 52501, 52734, 61325, 44000,
            44361, 64576, 52422, 48468, 14226, 22083, 53032, 5809, 18115, 6507, 40464, 25427,
            58283, 5512, 54631, 30018, 10222, 705, 64481, 15951, 46499, 14846, 18973, 22976, 55839,
            35381, 63270, 56033, 51708, 65343, 40242, 55424, 28390, 22661, 23623, 36398, 233,
            36699, 9948, 31313, 37078, 32464, 13621, 44054, 13083, 49077, 3703, 46140, 50121,
            16581, 7665, 48858, 18817, 60417, 3529, 17193, 5879, 58982, 60326, 43928, 18639, 7864,
            46417, 58747, 51583, 63093, 27592, 32345, 15113, 55570, 33643, 48492, 43793, 45173,
            52138, 12960, 59536, 52839, 8046, 27862, 23385, 10597, 32660, 5050, 41658, 6323, 17656,
            5956, 37780, 36975, 9739, 46319, 5171, 31343, 44979, 49807, 41433, 13, 50503, 34929,
            20664, 35118, 51385, 63751, 42589, 23549, 33358, 14252, 28691, 50288, 57960, 55388,
            10796, 6584, 22685, 36904, 56941, 29592, 64168, 24183, 55027, 49816, 25008, 41278,
            3909, 54649, 27278, 48757, 45572, 49370, 30605, 50774, 2717, 7802, 14564, 58630, 30744,
            9113, 15957, 49563, 25235, 5865, 23366, 23402, 64888, 9922, 51498, 26597, 5462, 19900,
            7574, 63745, 43211, 20357, 21043, 29759, 17634, 56256, 50034, 58289, 12342, 47007,
            28410, 202, 28662, 52429, 62025, 64397, 43949, 21437, 31382, 10295, 20788, 55896,
            48707, 19812, 17700, 38553, 28856, 4525, 36656, 50061, 7360, 7325, 31730, 50665, 59558,
            57661, 52210, 51247, 35625, 15384, 48167, 5959, 6219, 51610, 25393, 26568, 36825,
            33793, 15462, 3731, 46490, 18670, 59749, 64649, 30855, 57728, 46187, 48013, 29656,
            5719, 2129, 39236, 12781, 44300, 17277, 16144, 18436, 48934, 47980, 49588, 44451,
            11375, 19642, 3430, 13018, 30729, 35357, 20384, 7598, 4906, 32580, 58767, 56361, 14687,
            41085, 57927, 16925, 44121, 36156, 38729, 54197, 2831, 22096, 9762, 58970, 42830,
            27376, 42089, 59723, 63066, 28894, 44596, 31886, 2118, 6079, 8228, 47080, 13300, 38540,
            57184, 8925, 13265, 60115, 18196, 24774, 54258, 26994, 30908, 42248, 16526, 45656,
            26613, 11960, 34505, 4644, 63475, 48352, 48284, 14257, 46426, 58673, 28058, 63352,
            12968, 3979, 49824, 26719, 44872, 18876, 65262, 25073, 26748, 60971, 7063, 16460,
            19174, 49338, 55019, 54480, 64045, 17218, 19906, 49895, 10195, 40600, 58356, 51597,
            16293, 8680, 17010, 32074, 53368, 1643, 49264, 50093, 42292, 29629, 47139, 34649, 8461,
            53079, 47853, 1738, 34660, 49167, 55509, 49734, 20701, 48965, 46535, 8257, 20975,
            62645, 60014, 46229, 29956, 60648, 26813, 47195, 25104, 58288, 65234, 19043, 53027,
            4272, 64416, 24705, 64563, 21854, 19159, 28833, 3451, 57904, 42054, 65466, 7439, 25431,
            25170, 11291, 12745, 29751, 43088, 55028, 52414, 61549, 61586, 3664, 17723, 64044,
            3554, 39822, 61535, 28851, 9006, 21400, 56127, 50769, 44122, 1444, 41403, 65153, 29299,
            38533, 39523, 6388, 19035, 35519, 64052, 21244, 46638, 49630, 4620, 14246, 55839,
            39755, 59444, 31426, 64998, 24926, 22412, 49777, 8346, 3047, 11398, 39726, 7626, 26854,
            22072, 43614, 35621, 29573, 26821, 49768, 8466, 52756, 31542, 54525, 58698, 37824,
            5296, 34358, 5260, 18163, 42916, 5765, 60153, 10137, 54670, 14537, 35912, 32866, 12687,
            51059, 39025, 62160, 29538, 27957, 46811, 56877, 63408, 56240, 51150, 20998, 4555,
            55239, 37606, 49990, 3329, 35258, 8374, 39443, 46818, 50064, 39279, 25335, 54222,
            62298, 37825, 10869, 15118, 58081, 9682, 62477, 59610, 25043, 61584, 53776, 52624,
            9470, 3509, 26592,
        ]))
        .unwrap(),
        c: 241,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xcd9fe8ea8862ba4f70244b0649956fb3584ac19580eeb413d3c8d6754e0eb21e");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_chaos_0() {
    let value = VarTestStruct {
        a: 60445,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            41248, 0, 65535, 65535, 60137, 57750, 11223, 65535, 65535, 11355, 16613, 3189, 24359,
            1202, 55946, 768, 27060, 55024, 0, 42256, 36574, 54148, 0, 65535, 36894, 0, 42576,
            65535, 7303, 42979, 0, 65535, 65535, 28505, 64359, 28773, 19200, 18414, 18799, 6519,
            53258, 61139, 47308, 51794, 0, 65535, 2504, 65535, 0, 24384, 14604, 39018, 20528,
            25015, 52982, 16304, 41598, 53136, 19512, 42007, 1305, 23918, 57245, 1315, 462, 2117,
            49542, 24176, 23594, 65535, 279, 42247, 7750, 35436, 9624, 33952, 31649, 30992, 9446,
            65535, 65535, 0, 0, 0, 65535, 15766, 14343, 65535, 11444, 27637, 65535, 34625, 0, 0,
            36230, 42348, 0, 65535, 47951, 0, 59277, 50449, 925, 0, 23828, 17807, 37028, 32494,
            65535, 0, 4225, 24504, 6374, 34511, 23569, 65535, 54283, 0, 46388, 40785, 26950, 5362,
            27878, 36250, 0, 17908, 65535, 44315, 0, 0, 36159, 0,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x6f6184da799c0ebf0154aa56847a4d491a8f62f317d018334bf7367fee6f31a4");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_chaos_1() {
    let value = VarTestStruct {
        a: 1543,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([51731])).unwrap(),
        c: 220,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xee381964ccbada8328e12c5b1f25b3c47ad1930cb99d9d4e1be20bc0a7e3e143");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_lengthy_chaos_2() {
    let value = VarTestStruct {
        a: 30938,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_lengthy_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc2ab319d105839cf5f2740dca530f09f84f06feef99e5c8672811cc0a554fd54");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_lengthy_last_offset_2_overflow() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_lengthy_last_offset_2_overflow/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_lengthy_offset_2_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_lengthy_offset_2_minus_one/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_lengthy_offset_2_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_lengthy_offset_2_plus_one/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_lengthy_offset_2_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_lengthy_offset_2_zeroed/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
fn test_containers_var_test_struct_max() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x15e9ad3c97423dc2d351f940bfbff9a4dec9770850ddd9225b34237e118adc7c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_0() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x56580a519ee0bb5185653c7acb73abe3db0d43a0075aa93d10eab9fa37a68ac6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_1() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x325f49ca48bb009071c1af915c2affdf0115a990516ec4f8519c1160dd9f64d7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_2() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xcab1dfb713ab90635b4c202630a0a178fb5b1b4cbc72695faf5ecb81a94cff8c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_3() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xb49546827cdbce75f2facc47daab8ec3886f914e1f7f1756ebc7d17bfeccc617");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_4() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xfa233782570411ce535e4d9fdb537990d5f40437d2d85d463ca3e7dad4a74d9f");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_5() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x566b5e483ba5cb5ef93506a1b711df754e93308b118b13e046d6e9ad74418273");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_6() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x714e5d28c6cadb4c41c52ff0873f5eedefcc3a29e79d4c50310cda970687abb8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_7() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x8bb40c9d2ea53fd72efb9b07c1f91f35fa9c884869734074a50011e9b4571882");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_8() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x234d219bcd661de659d3675a667e74c56720d96fbe1c3c1f866a4579e84e9b7f");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_9() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
            65535, 65535, 65535, 65535, 65535, 65535, 65535, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc0797bf78883955d067a148d7b37737debccf2e7b16107e3480156744565b8b8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_chaos_0() {
    let value = VarTestStruct {
        a: 65535,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xdcbe7541bc36b70f18046e6312563a5315d439a69a088931ee0daca2fdd2440b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_chaos_1() {
    let value = VarTestStruct {
        a: 23436,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x16a0be99b3ef5107a5959bb009cf98c8a5a37aeeafd1b966c84b3c630186cfc3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_max_chaos_2() {
    let value = VarTestStruct {
        a: 1123,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            7029, 0, 1713, 15092, 0, 28021, 22657, 65535, 0, 45891, 52860, 22869, 26735, 727,
            51438, 0, 23508, 65535, 19428, 15029, 32220, 51499, 0, 0, 19613, 22936, 41355, 65535,
            12931, 52143, 47752, 0, 11560, 0, 3832, 27532, 4162, 57769, 7650, 14678, 12020, 0,
            41742, 65535, 5239, 30538, 55791, 0, 51183, 15024, 0, 53146, 63430, 58921, 65535, 0,
            53123, 56274, 65535, 56632, 22895, 0, 18083, 48767, 65535, 48904, 65024, 52640, 58779,
            6173, 40261, 9293, 16776, 0, 13724, 50851, 19984, 33282, 4993, 19577, 3057, 62153,
            35490, 65535, 0, 63944, 54061, 8850, 34907, 38465, 0, 38176, 65535, 6428, 65535, 34974,
            34814, 7407, 19761, 0, 2668, 65535, 22121, 8684, 2157, 15368, 11467, 54456, 65535,
            65535, 65535, 28929, 36198, 24540, 25335, 10305, 65535, 59362, 8608, 0, 51407, 38436,
            0, 65535, 47542, 65535, 53891, 41076, 15263, 19388, 47317, 0, 30845, 11387, 0, 50002,
            45787, 60505, 49357, 65535, 59708, 24226, 58417, 56933, 65535, 65535, 26079, 0, 10899,
            100, 0, 46467, 0, 65535, 0, 0, 61721, 61304, 4540, 62039, 23305, 0, 56403, 51159,
            49207, 25302, 92, 1548, 0, 11520, 0, 65535, 31936, 4170, 54538, 39614, 22246, 65535,
            15409, 6017, 65535, 14097, 0, 47852, 52370, 65535, 50988, 42747, 0, 13677, 34338,
            25735, 14683, 38457, 0, 57318, 63929, 45269, 65535, 58441, 58946, 43835, 65535, 44329,
            60228, 62067, 51499, 0, 59021, 49051, 35024, 21760, 55030, 64360, 65535, 32642, 56628,
            65535, 22671, 54311, 0, 0, 55702, 59734, 44262, 0, 65535, 65535, 12573, 55715, 5334, 0,
            65535, 1150, 44286, 17947, 44572, 65535, 46005, 65535, 56665, 26196, 38098, 65535,
            65535, 22434, 0, 52258, 0, 47810, 28277, 65535, 6843, 14303, 48941, 54184, 36910,
            57474, 7646, 65535, 65535, 0, 28747, 64255, 19512, 11568, 63813, 52559, 65535, 27316,
            26232, 65535, 0, 49532, 0, 65535, 0, 34366, 34884, 17700, 0, 28505, 26477, 58616,
            12709, 45059, 61217, 34157, 37652, 40798, 20594, 56459, 36929, 65535, 20760, 967,
            65535, 0, 65535, 23771, 19895, 14923, 42866, 4524, 65535, 62818, 0, 26774, 0, 27596,
            33695, 57196, 58176, 53363, 0, 55519, 61383, 0, 42545, 30494, 7084, 52535, 65535, 9370,
            65535, 0, 55314, 34557, 0, 0, 15607, 0, 42958, 63902, 61997, 18283, 56569, 10716,
            49303, 0, 65535, 18456, 22101, 59922, 5112, 16222, 9475, 53670, 14946, 9470, 0, 42784,
            51930, 53120, 40009, 15442, 65535, 65535, 0, 0, 59441, 49844, 0, 60938, 24123, 37496,
            39564, 65535, 46779, 0, 65535, 65535, 65535, 61643, 41330, 65535, 1863, 0, 0, 49648,
            44576, 0, 35293, 0, 0, 0, 63386, 16214, 42818, 58212, 12448, 0, 1525, 3222, 0, 0,
            16261, 65535, 32547, 0, 65535, 56655, 65535, 48615, 54306, 65535, 46318, 21347, 35973,
            0, 0, 1210, 65535, 65535, 0, 52056, 27690, 27173, 0, 54492, 36064, 28574, 5328, 55779,
            65535, 47166, 41079, 0, 17880, 13494, 40666, 1033, 65535, 53527, 60101, 51301, 20698,
            13770, 44646, 0, 6613, 20647, 3082, 2462, 38100, 5549, 26563, 45091, 0, 0, 19272, 0,
            65535, 27932, 26989, 40255, 48837, 43056, 4213, 18234, 65535, 0, 27845, 65535, 65535,
            65535, 11738, 65076, 44029, 0, 0, 38258, 20273, 59229, 13718, 0, 0, 58345, 0, 41205,
            7082, 58487, 65535, 59964, 54195, 65535, 12593, 23308, 15232, 36564, 46983, 61371,
            20614, 18532, 65535, 2879, 52724, 19375, 65535, 65535, 0, 5764, 65493, 16173, 34064,
            59268, 65535, 29691, 11758, 31160, 51828, 65535, 65535, 64362, 52586, 65535, 34317,
            65535, 65535, 51712, 44259, 0, 3386, 31109, 4932, 19250, 62704, 65535, 0, 65535, 65535,
            0, 28075, 33544, 845, 34360, 65535, 211, 65535, 0, 45620, 0, 15229, 65535, 65535,
            45324, 37605, 65535, 42401, 20041, 0, 65535, 20243, 47123, 13011, 0, 50870, 55906,
            54918, 54253, 65535, 29031, 23019, 28577, 65535, 57017, 33408, 0, 16814, 33982, 0,
            53421, 56979, 45577, 65535, 0, 0, 65535, 58722, 53920, 35832, 46487, 57138, 65535,
            4679, 61255, 27105, 0, 0, 65535, 45887, 65535, 31642, 59815, 22598, 37706, 20579,
            59691, 23202, 65535, 65535, 55319, 38439, 12220, 14149, 19160, 16482, 58897, 65535,
            65174, 34750, 0, 11068, 54967, 65535, 13539, 28881, 18944, 0, 64303, 40992, 65535,
            8637, 65535, 65535, 35617, 17201, 0, 28701, 0, 65535, 59421, 25224, 44148, 0, 65535,
            65535, 14124, 5436, 6271, 37644, 17073, 11970, 65535, 16312, 37044, 0, 28997, 42195,
            53237, 0, 12722, 5808, 28708, 0, 41688, 65535, 28055, 0, 38215, 65535, 40634, 10640, 0,
            6556, 45980, 3819, 20581, 0, 20054, 45456, 23045, 20353, 58415, 60020, 38672, 0, 43000,
            0, 19889, 48234, 0, 65535, 55051, 4363, 9520, 27785, 21879, 0, 13374, 65139, 65535, 0,
            16365, 48566, 27789, 65535, 47977, 65535, 65535, 50169, 0, 11009, 49033, 65535, 8637,
            30197, 43510, 65535, 2849, 20391, 58305, 51195, 6989, 378, 1013, 0, 13493, 65535,
            52127, 22120, 19264, 28521, 34697, 12468, 54332, 65535, 25604, 6061, 65535, 58400, 0,
            25568, 10787, 15403, 14483, 27258, 30566, 53978, 8770, 51693, 65535, 0, 0, 55740,
            12675, 1078, 8732, 0, 49989, 44421, 26707, 37035, 0, 65535, 51842, 7533, 0, 0, 0, 7902,
            6186, 27799, 58943, 17381, 62398, 17336, 65535, 65535, 40542, 65535, 26707, 65535,
            65535, 36443, 0, 21147, 65535, 30297, 65535, 21538, 0, 2550, 60043, 52450, 16277,
            39618, 5821, 59967, 46636, 65535, 64870, 16898, 65535, 24691, 0, 10300, 47327, 19061,
            20219, 59751, 846, 65535, 16259, 61375, 34273, 54142, 42713, 62409, 6057, 65535, 21294,
            26123, 61478, 7960, 26936, 65535, 65535, 0, 24364, 29417, 0, 0, 59390, 65535, 55683, 0,
            52407, 9664, 13803, 15131, 883, 10752, 50959, 34024, 42852, 62633, 12525, 33300, 0,
            56530, 8946, 0, 39395, 18583, 64475, 3865, 33929, 10299, 0, 13204, 0, 65535, 60707,
            55792, 18955, 3429, 40759, 36582, 21022, 44261, 0, 65535, 11718, 0, 58019, 63669, 0,
            30029, 42985, 65158, 0, 65535, 4968, 7440, 46252, 41054, 45662, 33726, 17936, 65535,
            61886, 0, 28171, 0, 65535, 60095, 0, 0, 65535, 16410, 65535, 65535, 7424, 12408, 7198,
            0, 29569, 0, 41485, 53009, 65535, 37037, 10227, 61874, 11810, 0, 25594, 6222, 22980, 0,
            34116, 11912, 13686, 65535, 21454, 0, 65535, 1705, 0, 0, 29747, 56886, 24970, 3312,
            22481, 58640, 0, 0, 24693, 65535, 37880, 38997, 2237, 0, 7632, 33494, 25366, 39566,
            65535, 56110, 65535, 7177, 65535, 7310, 65535, 25889, 65535, 60344, 0, 11157, 0, 45833,
            34364, 65535, 0, 65535, 0, 50861, 15127, 6918, 0, 65535, 2753, 42213, 7978, 65535,
            23931, 56988, 62664, 0, 29978, 3643, 18467, 44113, 11397, 0, 65535, 0, 0, 0, 62775,
            65535, 43248, 0, 0, 53021, 43634, 32875, 65535, 37249, 4242, 65535, 0, 5564, 7269, 0,
            0, 26296, 46996, 30260, 25789, 57343, 65382, 0, 0, 32119, 65535, 41586, 0, 24291,
            15466, 33377, 65535, 52787, 59849, 19468, 65535, 30979, 51764, 62184, 11780, 38699,
            6399,
        ]))
        .unwrap(),
        c: 209,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_max_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe0364b8fc432a7b5849ca9453cfdade41ede56abc18f93b71433f11eff8755a6");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_0() {
    let value = VarTestStruct {
        a: 46959,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 40,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x50683dbb595c06624e23b54b9a9aab8245af7b19e0c23e3cd35c5ccaa0beed8e");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_1() {
    let value = VarTestStruct {
        a: 55458,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 194,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x67d4e19ce21a6f72866a977768ebf9ee04cbe3b6769f44c58b3f6e53c0fa6a35");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_2() {
    let value = VarTestStruct {
        a: 56441,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 118,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x695bc170943f72a828f0a0b1cb861ca3df701de71b08b87831e69bf61f0e0e3e");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_3() {
    let value = VarTestStruct {
        a: 51959,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 229,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x5f6b6e1b555aab6e53e8d53c23e768616ff751c9da3d0573c0c2fd6b1b0f1b45");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_4() {
    let value = VarTestStruct {
        a: 55400,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 204,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xbbf774ab4d952407bddbcc33e3f28482ab974102d9666fa00b5d927e1cb05082");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_5() {
    let value = VarTestStruct {
        a: 60183,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 81,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x13937b49bed01535ecf11e8afb110d8ceae82a481be8e77157e62f031b91d25c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_6() {
    let value = VarTestStruct {
        a: 44944,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 138,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9c0ac1fd37b09b9259a7d26c70e9bcb122af290f3c51dff941d7178f649807f1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_7() {
    let value = VarTestStruct {
        a: 28606,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 108,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2c193129d8189cced897c240632e249e85ded4ee7a5af48ba4222254194afbf9");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_8() {
    let value = VarTestStruct {
        a: 20040,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 226,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4feef9858a3460aac32922ce090914cb1a66c9232f92e6ddcb2672ba34e85f12");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_9() {
    let value = VarTestStruct {
        a: 16949,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 54,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xdc7656b3be9495ff7f31a568ac0cbfd73abf7081726578d5c42401fad0168ae9");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_chaos_0() {
    let value = VarTestStruct {
        a: 5285,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 25201, 0, 16037, 31280, 65535, 33272, 11848, 3343, 65535, 60290, 46167, 18257,
            54599, 26677, 0, 62023, 65535, 65535, 15035, 19249, 31650, 14543, 65535, 45908, 17106,
            12336, 0, 16633, 27078, 55428, 65535, 65535, 46068, 47855, 28913, 65535, 0, 0, 40082,
            0, 0, 3044, 43207, 65535, 525, 33135, 0, 21996, 34575, 65535, 54891, 65535, 25276,
            56245, 12873, 65535, 1531, 65535, 65535, 19955, 45127, 0, 0, 0, 65535, 65535, 23395,
            7645, 0, 0, 0, 61667, 58205, 0, 42951, 7421, 18477, 0, 0, 54026, 41239, 65535, 53240,
            57956, 22338, 65535, 5462, 7752, 60406, 38813, 65535, 25686, 3743, 39835, 0, 7450,
            65535, 65535, 11479, 26823, 0, 65535, 65535, 607, 714, 1449, 6110, 9705, 12867, 10565,
            63419, 55156, 16053, 50274, 53790, 28020, 51058, 50085, 29845, 65535, 7651, 0, 14094,
            65535, 65535, 0, 32858, 19501, 65535, 8885, 0, 35592, 65535, 0, 57544, 54370, 0, 15801,
            0, 51075, 24482, 55820, 65535, 52038, 65535, 27980, 39307, 65535, 0, 16996, 0, 59208,
            20510, 15881, 8829, 65535, 64225, 46346, 28246, 10969, 54202, 65535, 0, 65535, 0, 0,
            37290, 2716, 20444, 12323, 19666, 11479, 56763, 19104, 65535, 13366, 674, 44158, 35469,
            3606, 0, 3797, 18256, 65535, 42085, 39421, 13019, 16060, 42752, 44430, 65535, 9563, 0,
            0, 65535, 0, 64357, 17715, 2503, 24279, 65535, 16612, 43217, 1925, 27811, 0, 20501, 0,
            65205, 45780, 28041, 19317, 0, 33409, 3203, 65535, 0, 18461, 38578, 24972, 52610,
            62101, 0, 25269, 0, 37854, 32604, 0, 65535, 18346, 0, 39770, 0, 65535, 65535, 26008,
            6480, 0, 34600, 60311, 38662, 65535, 30635, 0, 47127, 0, 0, 9365, 35023, 18214, 8811,
            18293, 31513, 53344, 31807, 17945, 46472, 7694, 44319, 0, 33851, 0, 65535, 0, 0, 65535,
            17433, 0, 0, 28500, 24201, 0, 4920, 14264, 19481, 10404, 39238, 26336, 23865, 13379,
            65535, 12914, 65535, 0, 65535, 59744, 65535, 43871, 335, 65535, 8267, 0, 65535, 43921,
            65535, 0, 41288, 0, 65535, 24343, 35499, 2751, 65535, 22408, 0, 44083, 16563, 5654,
            31617, 39807, 65535, 6019, 34602, 56655, 65535, 26604, 55985, 60763, 915, 47685, 59586,
            65535, 1967, 63942, 63472, 26126, 13487, 25196, 59062, 15476, 52437, 65535, 32314,
            7459, 24431, 65535, 58121, 51827, 0, 26072, 34047, 64642, 0, 13395, 27029, 49410, 0, 0,
            9058, 58878, 59292, 65535, 4740, 62600, 33728, 0, 51560, 9179, 45812, 65535, 29598,
            32544, 39751, 17154, 52370, 42906, 45270, 41296, 27211, 3819, 65535, 442, 38230, 0,
            34297, 21335, 65535, 53687, 37580, 65535, 62426, 16575, 21314, 42803, 55553, 65535,
            23043, 65499, 2130, 0, 54946, 0, 27054, 28940, 65535, 15787, 0, 0, 14975, 18615, 65535,
            65535, 0, 11809, 59339, 0, 16083, 56503, 8773, 0, 42520, 46543, 0, 40740, 13297, 65535,
            21134, 38998, 65535, 65535, 62995, 35298, 65535, 40208, 6579, 65535, 15773, 65535,
            26272, 53061, 56457, 65535, 45824, 65535, 45839, 65535, 1091, 4444, 14676, 34409,
            26168, 23339, 65535, 42813, 0, 21423, 49180, 13173, 18804, 48727, 62076, 65535, 65535,
            65535, 65535, 65535, 40451, 65535, 0, 65535, 0, 0, 7001, 65535, 8789, 58699, 65535,
            65535, 0, 29819, 65535, 65535, 0, 20166, 41146, 64905, 65535, 0, 835, 0, 25610, 50537,
            0, 4157, 1149, 0, 64393, 65535, 65535, 22098, 65535, 26192, 12468, 20032, 42393, 65535,
            0, 65535, 0, 707, 21110, 30053, 26342, 3133, 62787, 65535, 14161, 8514, 65535, 25547,
            23030, 0, 45946, 16868, 0, 32807, 12855, 14950, 65535, 0, 0, 0, 38357, 56977, 47197,
            65535, 21125, 50627, 34281, 65535, 0, 9672, 57275, 65535, 65535, 13817, 65535, 48657,
            15771, 0, 35347, 59935, 35917, 65535, 11283, 62478, 0, 9114, 0, 32922, 65535, 36643,
            39809, 65535, 65535, 0, 7703, 65535, 44679, 14404, 65535, 65535, 30947, 29931, 65535,
            37938, 36188, 9313, 65535, 0, 65100, 26131, 65535, 65535, 48641, 10554, 60013, 36865,
            0, 38192, 9675, 65535, 31009, 4566, 4778, 30796, 2453, 35154, 65535, 0, 59997, 42411,
            19443, 3928, 46303, 41104, 16133, 51970, 28523, 37131, 39537, 54912, 53765, 159, 65535,
            0, 33532, 65535, 36942, 43427, 65535, 32020, 7777, 32517, 21438, 34153, 45259, 65535,
            22917, 37426, 65535, 64195, 24514, 23822, 8458, 37798, 0, 64114, 0, 20737, 65535,
            65535, 9579, 64430, 65535, 65535, 24374, 48385, 721, 1561, 12345, 65535, 0, 65535, 0,
            39274, 7629, 0, 65535, 35145, 65535, 20828, 0, 0, 24496, 12876, 0, 43849, 65535, 18377,
            65535, 65535, 12875, 21670, 0, 47662, 65535, 0, 29926, 56201, 3072, 18819, 51273,
            19741, 0, 6867, 65535, 45845, 0, 10408, 0, 189, 0, 8170, 11640, 10759, 388, 9322,
            28102, 65535, 32806, 44802, 27005, 65535, 0, 65535, 0, 0, 1069, 17483, 0, 44012, 65535,
            65535, 0, 25105, 9710, 0, 29311, 42414, 33180, 28297, 15970, 35612, 63049, 0, 65535,
            9133, 65535, 29167, 8957, 65535, 12522, 22747, 65535, 27318, 0, 65535, 57282, 8687,
            53351, 62726, 0, 61603, 0, 27164, 27499, 52970, 28852, 35530, 54292, 15841, 17878,
            50213, 65535, 0, 62046, 59100, 45829, 65535, 0, 61520, 39084, 0, 4963, 0, 65535, 22944,
            40495, 36066, 44027, 0, 2378, 17058, 18513, 33054, 0, 46382, 17519, 65535, 65535,
            11423, 11780, 0, 49800, 46886, 12844, 53858, 20569, 52810, 27227, 18848, 31870, 14364,
            40583, 30231, 60103, 18246, 0, 3371, 49760, 0, 64613, 0, 60322, 14342, 0, 0, 65535,
            65535, 65535, 46015, 0, 32529, 0, 65535, 57822, 36520, 43590, 61061, 0, 46411, 0,
            18737, 0, 24866, 65535, 5162, 0, 36443, 9772, 0, 42543, 64520, 65535, 31244, 24361,
            18014, 61188, 48010, 0, 24584, 17885, 0, 15087, 58507, 37786, 0, 12212, 1298, 65535,
            46718, 10029, 0, 12779, 57608, 0, 65535, 65535, 43288, 45635, 0, 5359, 2221, 40257,
            6873, 64832, 0, 28842, 65535, 0, 35793, 65535, 0, 49939, 25980, 65535, 0, 65535, 48116,
            59910, 65535, 34539, 22381, 28923, 0, 50575, 0, 65535, 0, 37828, 5651, 1763, 65535,
            17174, 21028, 65535, 4530, 65535, 30954, 44270, 9603, 55570, 28424, 18843, 31909, 6768,
            50707, 30354, 60514, 19754, 65535, 13464, 0, 65535, 0, 21296, 1788, 64713, 37054, 0,
            38776, 29874, 2652, 53339, 0, 12613, 65535, 17455, 10064, 41502, 18847, 0, 36328, 0, 0,
            26512, 65535, 65535, 63293, 0, 0, 25737, 0, 0, 58874, 0, 0, 21644, 52564, 51301, 53544,
            33705, 0, 59570, 23849, 15388, 253, 48668, 65535, 35260, 65535, 5917, 65535, 17901, 0,
            0, 0, 27616, 57805, 0, 0, 28415, 238, 65535, 0, 40610, 57109, 18428, 7336, 0, 6985,
            16928, 0, 40401, 30673, 27503, 32550, 44556, 19040, 0, 5687, 65535, 54822, 39290,
            35770, 65535, 0, 16468, 19431, 65535, 56164, 0, 0, 0, 60487, 0, 19923, 13928, 10455,
            34982, 65535, 32102, 43195, 4664, 20372, 33651, 65535, 4741, 0, 33006, 65535, 0, 20850,
            24747, 0, 65535, 17982, 0, 65535, 0, 65535, 29028,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xbff50cbed553df006a7ad81b7dc89c1a9a5fd7c8d5e9e3e55a6bc4112cf6a0b1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_chaos_1() {
    let value = VarTestStruct {
        a: 19203,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 143,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x63652fbaf8d9d6069f52ef3d06f6e61915b8033746fc69bcaabdef6daf69cf1f");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_nil_chaos_2() {
    let value = VarTestStruct {
        a: 19771,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([41167])).unwrap(),
        c: 94,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_nil_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xbe0f5ed20e35ba55f1d00c027a5f9a44b269eefa31d7de8647abb984a5874981");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_nil_offset_2_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_nil_offset_2_minus_one/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_nil_offset_2_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_nil_offset_2_plus_one/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_nil_offset_2_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_nil_offset_2_zeroed/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
fn test_containers_var_test_struct_one_0() {
    let value = VarTestStruct {
        a: 13373,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([31906])).unwrap(),
        c: 63,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x15d8fbc422bd7e8dcd7d6dd01b0c520953301abe056d134e1b5f06ed6a34a7f2");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_1() {
    let value = VarTestStruct {
        a: 5133,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([18771])).unwrap(),
        c: 183,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4899c18db80f87208bbc34681b3c19e8fed493b3aa7b1f33e792d192f9c988a5");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_2() {
    let value = VarTestStruct {
        a: 6105,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([26812])).unwrap(),
        c: 6,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x041dd05e1f7b1a9a1074ba2fee348b8ebd72db7fc8009c2659a03a968dfddc57");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_3() {
    let value = VarTestStruct {
        a: 3451,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([45630])).unwrap(),
        c: 227,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xeaac8045bfb7091e56c92d4d1cec95a3df282ffeecee43ec96c3433930806cc2");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_4() {
    let value = VarTestStruct {
        a: 32090,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([18295])).unwrap(),
        c: 17,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4e4d3794a045d1c25d43fdb283932f7c830f9e93ed0716bdda8c4e8b19000933");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_5() {
    let value = VarTestStruct {
        a: 30693,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([24817])).unwrap(),
        c: 213,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa0b55c31403744e66948427e585a2fe66b8f0b26454e52d11e15d9ea43ebae17");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_6() {
    let value = VarTestStruct {
        a: 39023,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([18503])).unwrap(),
        c: 120,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x9735380cbd6f8519644148d132f911a786c0eb47e1f04e65e57ebad8fe56b8ff");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_7() {
    let value = VarTestStruct {
        a: 51727,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([63012])).unwrap(),
        c: 142,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xad8a125fdaa8db83b1fc9d7423a811170584e2e2be39f8644d3e4f01505a7acf");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_8() {
    let value = VarTestStruct {
        a: 14916,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([39519])).unwrap(),
        c: 4,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xa5b1584410838d0961fbb3933d3acf55b4bb50bae0fd55acd95077a0079d29a7");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_9() {
    let value = VarTestStruct {
        a: 18626,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([52279])).unwrap(),
        c: 157,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xc457b698aee081685c2ff7536da84413b7c27a9ccd7f0c0f1c5b4d41dcf7b4d9");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_chaos_0() {
    let value = VarTestStruct {
        a: 40138,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 0, 31331, 0, 34012, 65535, 51817, 65535, 53427, 0, 28979, 15627, 65535, 0, 0,
            40050, 1664, 50298, 14913, 50492, 29081, 37534, 0, 0, 36908, 10703, 65535, 37367,
            65535, 65535, 19047, 65535, 65535, 54224, 13895, 52060, 19452, 21142, 57187, 0, 65535,
            65535, 65535, 6863, 62813, 65535, 47703, 62999, 57778, 65535, 65535, 65535, 0, 19420,
            65535, 0, 47105, 42197, 9861, 38532, 22527, 41356, 65535, 65535, 0, 18121, 2880, 13040,
            36253, 8931, 14034, 65535, 13964, 65535, 35365, 33206, 0, 0, 44620, 37547, 43842,
            44555, 1360, 35094, 46880, 0, 36550, 65535, 64962, 45014, 29030, 61342, 0, 39023,
            65535, 41680, 0, 22466, 0, 0, 46876, 0, 33781, 29365, 46792, 65535, 65535, 0, 29164,
            65244, 9682, 7327, 46804, 65049, 65535, 50717, 6378, 65535, 56690, 5490, 50070, 50125,
            0, 6411, 28536, 45501, 65535, 0, 30649, 13300, 41192, 17404, 27197, 54125, 29291,
            64060, 30878, 65535, 2818, 38130, 49140, 0, 12673, 65535, 23691, 65535, 7003, 59134,
            37492, 65535, 59373, 6187, 44573, 65535, 3927, 54079, 40227, 18652, 65535, 44207,
            27540, 0, 65535, 65535, 20815, 6330, 32172, 27684, 43829, 0, 19196, 49116, 0, 63413,
            36484, 61727, 0, 45525, 65535, 25227, 24952, 20489, 65535, 61837, 11859, 43556, 7585,
            0, 64302, 65535, 48852, 22224, 10597, 49891, 33097, 26806, 30491, 0, 0, 29460, 62085,
            6539, 0, 38401, 18968, 65535, 65535, 50270, 30679, 911, 56770, 4741, 29645, 0, 65535,
            0, 58066, 50512, 15505, 65535, 11000, 40304, 62576, 0, 65535, 38539, 21585, 46585,
            59128, 65535, 0, 17367, 0, 22249, 0, 16182, 19513, 0, 59188, 24875, 1234, 4304, 44436,
            55550, 53822, 18983, 18896, 59599, 1235, 3987, 5370, 33022, 19533, 1721, 47618, 65535,
            65535, 0, 56678, 0, 0, 57226, 45502, 23664, 0, 35706, 65535, 5924, 34244, 0, 65535,
            65535, 26574, 0, 0, 65535, 0, 51932, 0, 47251, 38527, 0, 65535, 0, 50261, 46553, 40994,
            15857, 35908, 1035, 23318, 6546, 65535, 29092, 17553, 18581, 64079, 56127, 32240, 0, 0,
            65535, 26712, 0, 1498, 51383, 51354, 0, 18490, 18593, 0, 0, 49251, 0, 58417, 65535,
            61531, 7094, 0, 65535, 65535, 29654, 45535, 0, 0, 9970, 44354, 0, 65110, 23433, 47176,
            35585, 15472, 4424, 0, 0, 0, 29142, 36414, 51160, 65535, 43971, 65535, 65535, 0, 17995,
            0, 31464, 65535, 0, 26332, 65535, 36307, 48537, 65535, 916, 0, 23668, 0, 27954, 33666,
            0, 28403, 28446, 33962, 24764, 65535, 1217, 65535, 48036, 40577, 0, 16521, 17613, 0,
            65535, 31281, 0, 0, 63326, 36080, 65535, 19587, 59395, 0, 65535, 53301, 6863, 55275,
            17305, 65535, 14220, 65535, 0, 47278, 64644, 65535, 39659, 57317, 0, 7205, 48342,
            51903, 0, 6618, 36489, 38246, 36686, 0, 0, 39783, 65535, 21072, 0, 62327, 52908, 36463,
            0, 65535, 40229, 6626, 0, 45860, 0, 23242, 65535, 0, 0, 0, 65535, 18226, 56490, 50464,
            26601, 33436, 0, 0, 0, 13596, 27867, 57762, 6487, 30669, 36829, 6052, 2983, 59937,
            65535, 48055, 64750, 30683, 0, 0, 45130, 7661, 52102, 1534, 27869, 65535, 65535, 3501,
            0, 57523, 15976, 0, 65535, 28938, 0, 65535, 20728, 49569, 2263, 47277, 65535, 0, 0,
            46410, 65535, 65535, 19180, 13476, 0, 29821, 47456, 0, 48616, 28313, 56836, 12994,
            65535, 65535, 13190, 7953, 0, 43444, 37838, 879, 23657, 59372, 0, 35378, 0, 23690,
            40517, 0, 21115, 0, 65535, 36010, 43698, 65535, 56142, 40819, 55969, 49581, 48318,
            65535, 65535, 33135, 24630, 22381, 57488, 58984, 0, 21338, 65535, 16938, 48527, 46735,
            45623, 17461, 43380, 10343, 23231, 0, 65535, 63867, 16638, 65535, 64242, 53544, 34682,
            15526, 0, 39558, 26170, 26461, 0, 10873, 0, 9769, 5087, 0, 29197, 57137, 62862, 65535,
            60182, 65535, 11225, 65535, 18784, 1638, 65535, 0, 63427, 65535, 0, 30894, 14276,
            56292, 65535, 1498, 65535, 29377, 25531, 43021, 30019, 65535, 61749, 62033, 0, 27949,
            62966, 41220, 23504, 65535, 16717, 0, 0, 62621, 3860, 0, 38983, 20058, 65056, 18576,
            59878, 0, 0, 25259, 41730, 0, 6373, 0, 53269, 0, 65535, 2649, 841, 41928, 0, 50434,
            55626, 19260, 65535, 24479, 39731, 8479, 60265, 65535, 13209, 31132, 24585, 29774,
            47757, 0, 10441, 0, 13586, 0, 65535, 22548, 0, 65535, 20064, 11306, 29994, 65535,
            54857, 63979, 65535, 54872, 65535, 57022, 65376, 12748, 65535, 0, 23926, 2341, 47803,
            11509, 55500, 51645, 2668, 29883, 40166, 52824, 65535, 65535, 0, 42628, 65535, 17838,
            59335, 65535, 50643, 36113, 18966, 37689, 47601, 55203, 23079, 64072, 47483, 39619,
            20526, 48171, 65535, 65535, 0, 58814, 12813, 0, 0, 54754, 26252, 33450, 0, 65535,
            22453, 14678, 65535, 36438, 65535, 5292, 2365, 47397, 8521, 2955, 0, 10240, 65535,
            65535, 63226, 10184, 47615, 0, 0, 8947, 45771, 29423, 10380, 27094, 50251, 64727,
            61484, 0, 44500, 51169, 0, 23049, 19877, 12550, 44396, 59938, 65535, 22958, 20328,
            20778, 492, 38905, 65535, 56110, 37900, 49633, 65535, 2922, 32298, 44884, 38711, 43410,
            60047, 32736, 65535, 50514, 40000, 79, 46856, 65535, 11593, 65535, 46286, 0, 55528,
            48331, 0, 44199, 14987, 9643, 0, 31437, 65535, 0, 0, 28058, 60095, 65535, 38711, 42379,
            52918, 0, 21794, 31634, 56761, 6488, 34581, 22963, 58333, 8707, 28106, 65535, 2145,
            23705, 0, 0, 54189, 19446, 50743, 0, 24975, 556, 0, 0, 50624, 48038, 29965, 65535,
            48400, 65535, 48962, 0, 60618, 33499, 11419, 0, 65535, 0, 28193, 34856, 41569, 17444,
            44444, 30139, 37310, 62485, 0, 25391, 16392, 51019, 5778, 20528, 0, 16400, 37720,
            19899, 0, 0, 40044, 59192, 48819, 53602, 9490, 57172, 29192, 0, 34328, 0, 65535, 0,
            27114, 39647, 5268, 8495, 0, 65535, 4696, 61775, 54791, 65535, 65535, 65535, 65535, 0,
            6110, 65535, 19831, 7836, 65535, 0, 0, 51158, 65535, 65535, 65535, 52334, 6808, 52946,
            48416, 26359, 65535, 0, 56903, 8139, 37205, 65535, 64288, 6618, 30126, 30157, 3369, 0,
            9789, 65535, 13424, 10781, 35789, 40904, 53550, 53621, 51872, 63199, 37027, 0, 4389,
            44798, 43145, 43110, 0, 62754, 21656, 65535,
        ]))
        .unwrap(),
        c: 210,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x75a21e43d653f955dcaa219e22bd3c802e6ee0787005f203fd24b94c0cc26918");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_chaos_1() {
    let value = VarTestStruct {
        a: 30440,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([])).unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x6b8e9bdd7303c481cd6f00e9051e8eb081b07699e806f5ed750d8405f92e52f1");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_one_chaos_2() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            41095, 65535, 28658, 44280, 65535, 65535, 19737, 61292, 19192, 0, 12891, 65535, 0,
            30046, 39353, 42201, 41239, 578, 12759, 22415, 0, 41609, 34114, 5523, 44794, 8868,
            10983, 29661, 35422, 65535, 65535, 0, 6905, 21448, 15523, 10535, 7800, 0, 56314, 37152,
            65535, 17885, 46224, 65535, 55034, 0, 0, 65535, 52284, 22342, 41350, 29118, 0, 37853,
            1988, 61330, 65535, 5963, 12915, 63312, 0, 54718, 34767, 0, 65535, 38426, 65535, 0, 0,
            0, 23697, 65535, 65535, 65535, 20558, 65535, 25024, 19873, 30217, 6650, 56112, 65535,
            4166, 64536, 5189, 32271, 0, 63728, 52464, 41427, 54659, 32115, 65535, 65535, 39551,
            23532, 36607, 13474, 35292, 23256, 51561, 17012, 4652, 32518, 8304, 30481, 0, 65016, 0,
            35130, 31265, 0, 44620, 47169, 0, 32989, 59561, 65535, 65535, 0, 54829, 13548, 2016,
            52180, 64456, 43721, 15993, 9031, 24815, 2034, 0, 0, 5684, 0, 1329, 31017, 65535,
            57785, 0, 28168, 42408, 8684, 21826, 50701, 0, 28631, 0, 0, 60838, 1818, 35417, 65040,
            65256, 54854, 17912, 36016, 18982, 65535, 50637, 8951, 25910, 32664, 0, 2871, 0, 65535,
            49564, 0, 26000, 22484, 10086, 25457, 23747, 0, 20477, 65535, 23799, 0, 0, 65535, 0, 0,
            9289, 36174, 65535, 65535, 0, 374, 10984, 65535, 0, 15202, 0, 0, 40709, 32676, 12446,
            65535, 32728, 17277, 15454, 65535, 16913, 6511, 39335, 20231, 65535, 0, 5165, 1814,
            57596, 65535, 19742, 1826, 40280, 36168, 13576, 54805, 65535, 587, 29621, 0, 5915,
            18461, 64659, 48481, 40473, 45506, 41672, 0, 4992, 65535, 45130, 0, 39908, 65535, 0, 0,
            0, 65535, 17373, 11136, 39073, 0, 48849, 44858, 64613, 0, 0, 23003, 0, 0, 0, 65535,
            56111, 49324, 65535, 26114, 2595, 0, 56135, 56882, 14533, 48290, 24151, 1802, 61817,
            65535, 47529, 49460, 0, 64877, 65535, 49531, 4222, 191, 17371, 0, 19739, 0, 40530,
            40286, 26476, 0, 0, 9967, 48365, 0, 3879, 19655, 65535, 61134, 65535, 18888, 10069,
            16577, 0, 34830, 19296, 0, 57105, 28433, 38900, 52568, 0, 30962, 65535, 65535, 19119,
            0, 62989, 21362, 2361, 23810, 0, 25388, 0, 65535, 0, 37003, 25855, 32639, 41721, 50239,
            9817, 7338, 7118, 7555, 23209, 34271, 63243, 47765, 65535, 52514, 39175, 36103, 20546,
            35462, 32576, 59386, 0, 34460, 30107, 63828, 24445, 30837, 65535, 51703, 65535, 31688,
            65535, 60384, 58880, 65535, 47994, 21225, 4590, 20131, 0, 46715, 65535, 40950, 9830,
            1496, 47800, 48413, 4054, 47494, 7523, 65535, 0, 14621, 28097, 0, 63050, 0, 16605,
            52921, 65535, 32972, 9185, 0, 39493, 65535, 39956, 24680, 47327, 65535, 0, 29333,
            10409, 21410, 5227, 60079, 65535, 14338, 57190, 65535, 65535, 0, 53073, 56010, 5430, 0,
            65535, 65535, 2971, 57303, 15702, 26827, 65535, 20140, 8250, 0, 4990, 20050, 4431,
            46771, 15130, 13649, 30386, 65535, 0, 65535, 1727, 40850, 50322, 0, 8445, 29183, 65535,
            61595, 35072, 65535, 50201, 0, 37744, 0, 46965, 0, 26798, 65535, 40206, 55515, 14295,
            0, 12508, 65535, 36847, 65535, 59149, 65535, 0, 15295, 45749, 17057, 37635, 65535,
            50778, 63009, 65535, 8546, 0, 1714, 0, 63245, 65535, 58685, 15646, 29123, 43203, 3134,
            53746, 28666, 45743, 41775, 0, 49610, 19369, 65535, 65535, 0, 0, 59450, 39419, 38487,
            63573, 0, 65535, 57911, 13618, 27665, 21072, 34656, 63629, 0, 30903, 28620, 0, 0,
            65535, 31921, 39864, 25472, 0, 0, 39651, 47640, 8025, 12961, 19217, 65535, 48299,
            48664, 0, 23475, 46398, 35504, 62413, 53601, 53923, 42587, 0, 28851, 65535, 49397,
            54315, 28324, 47720, 65535, 7728, 0, 65535, 65535, 0, 6771, 50757, 18825, 4054, 16905,
            0, 65535, 24279, 65535, 65535, 0, 56769, 0, 31211, 12642, 39340, 65535, 6935, 0, 58991,
            47581, 65535, 15245, 50806, 14231, 9902, 39182, 13628, 43562, 35187, 0, 588, 0, 39399,
            31080, 61435, 29568, 53504, 35721, 65535, 32135, 0, 15481, 2032, 17682, 64410, 17573,
            23476, 21416, 30720, 59855, 24068, 36427, 0, 5766, 0, 0, 22846, 5434, 43093, 50164, 0,
            0, 1832, 34512, 0, 7348, 0, 55706, 65535, 65535, 65535, 24482, 0, 12981, 43476, 37424,
            16718, 56666, 4126, 57305, 16012, 46051, 65535, 0, 0, 65535, 65535, 65535, 45145, 0,
            65535, 26513, 46416, 18062, 65535, 52481, 45361, 54272, 59825, 55116, 29104, 25618,
            65535, 27448, 48426, 65535, 65535, 0, 16734, 32735, 65535, 32123, 13043, 0, 0, 65535,
            58840, 0, 42030, 38537, 65535, 58153, 41247, 8699, 0, 65535, 25546, 19561, 65535,
            32976, 14783, 9629, 65535, 30608, 0, 0, 2000, 1731, 16822, 14065, 48259, 65535,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_one_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x70cc1bfa7fb688bab448160b81321a6a245a8847e671257b95e9ddc6043efc1d");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_one_last_offset_2_wrong_byte_length() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_one_last_offset_2_wrong_byte_length/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_one_offset_2_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_one_offset_2_minus_one/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_one_offset_2_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_one_offset_2_plus_one/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_one_offset_2_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_one_offset_2_zeroed/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
fn test_containers_var_test_struct_random_0() {
    let value = VarTestStruct {
        a: 13603,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            36974, 14793, 41047, 42644, 47525, 8585, 41126, 3068, 61868, 32452, 52070, 33625,
            59274, 4232, 4123, 62962, 5919, 57924, 42027, 62102, 54757, 44714, 22173, 55963, 55023,
            35385, 25614, 14518, 50974, 21008, 35291, 64803, 23383, 32083, 40008, 54466, 4501,
            40608, 30567, 30581, 45418, 35755, 52742, 9300, 7454, 22498, 6943, 47429, 46974, 23901,
            57481, 34202, 15665, 29487, 22450, 48240, 7168, 37505, 29279, 9176, 14888, 17827,
            30185, 10835, 16258, 10, 2254, 55532, 37893, 26048, 60132, 65144, 38122, 41241, 48651,
            32337, 14493, 27793, 4045, 62823, 41331, 55548, 61248, 8373, 17875, 15170, 39035,
            48214, 39540, 47175, 25028, 39359, 55471, 34582, 31956, 62883, 58081, 25685, 11263,
            32593, 61245, 15820, 41533, 22717, 38000, 1384, 27193, 31524, 22975, 41184, 29342,
            5847, 32060, 7879, 24652, 34137, 33187, 26967, 42794, 5307, 38986, 28813, 57421, 29231,
            36, 18699, 35421, 59357, 26104, 30013, 52482, 5618, 38088, 31838, 7805, 17322, 28129,
            2877, 29566, 6862, 32532, 27071, 1987, 23147, 13110, 18689, 44738, 18454, 18160, 51485,
            37708, 30555, 30998, 59779, 62206, 44125, 65321, 47938, 30689, 52748, 40869, 2952,
            12566, 5409, 44384, 61449, 6342, 56545, 19438, 4594, 22158, 27778, 51319, 50187, 35936,
            14422, 40344, 58111, 5552, 43834, 49356, 55870, 8915, 25853, 46690, 47187, 14809, 1919,
            19597, 42198, 26016, 15751, 52908, 19762, 24896, 44586, 22383, 32549, 52973, 32963,
            54469, 27375, 54695, 8847, 61163, 29739, 21356, 1500, 21492, 7855, 18915, 46901, 55982,
            34455, 49702, 20122, 39680, 24157, 9292, 45732, 34031, 20797, 15331, 42589, 69, 40291,
            13901, 12701, 34931, 17402, 38396, 3110, 39186, 980, 65109, 8001, 54203, 7982, 10644,
            15853, 32133, 33766, 61594, 15788, 29198, 40624, 52298, 4386, 8873, 64378, 46318,
            44016, 31213, 31756, 35290, 21201, 18664, 62670, 24327, 48958, 18623, 3362, 11938,
            14438, 10886, 11030, 56209, 59949, 37520, 17563, 33924, 24993, 34084, 49026, 5634,
            52415, 38219, 48486, 45027, 25230, 2654, 41060, 45731, 39398, 57706, 9221, 26315, 7224,
            16867, 49921, 7805, 18418, 27190, 29605, 36359, 29785, 63860, 24874, 37547, 10873,
            30645, 46879, 1128, 36289, 16248, 65211, 25291, 54314, 20839, 29417, 53234, 58341,
            46797, 56326, 63209, 64319, 6554, 17870, 15067, 55045, 40733, 2326, 15114, 13536,
            25525, 1743, 55935, 19768, 35755, 12992, 55374, 60641, 27321, 43157, 64574, 35891,
            44609, 60838, 513, 51352, 57846, 8060, 36767, 36506, 19069, 54924, 16010, 37227, 28707,
            60322, 32929, 51131, 10723, 30838, 31526, 8309, 47710, 2473, 23498, 53300, 37291,
            10765, 29267, 14344, 19826, 40084, 44731, 10118, 32600, 53186, 61810, 42415, 54321,
            4864, 32063, 15243, 26552, 14641, 28192, 57558, 9781, 44137, 32123, 38308, 12573,
            48273, 47813, 20783, 4285, 45602, 27703, 62809, 56829, 41949, 32555, 12407, 47653,
            33000, 18411, 41481, 9563, 7496, 3352, 42560, 62847, 17073, 42997, 47040, 56191, 25939,
            45878, 20457, 18613, 5765, 32674, 64671, 30294, 22750, 33890, 51595, 21694, 18936,
            46983, 21385, 45557, 50079, 23949, 43257, 40700, 40058, 64281, 10550, 26952, 6781,
            10292, 41284, 40684, 19296, 38469, 65436, 48807, 54970, 33267, 225, 37537, 14390,
            10819, 45704, 47157, 23273, 40019, 63952, 48361, 41840, 37051, 31639, 34707, 24711,
            26598, 24132, 31161, 54780, 40532, 25239, 14389, 10673, 58898, 60210, 61180, 60406,
            58563, 18362, 9816, 3990, 36543, 53267, 36507, 64624, 62830, 40623, 6927, 18675, 63757,
            48167, 36978, 53133, 39634, 37097, 46323, 31345, 45398, 45348, 1612, 59525, 3728,
            54322, 65201, 15868, 46368, 35881, 45423, 36049, 56122, 57932, 53129, 62648, 48375,
            21424, 60423, 2348, 52797, 6775, 5255, 41656, 44466, 6959, 59394, 50100, 64363, 58849,
            35646, 18008, 36382, 9509, 44699, 20277, 738, 12298, 31313, 32696, 40912, 36950, 25236,
            17136, 28897, 47315, 39651, 62937, 14642, 23035, 28629, 32736, 16679, 35939, 31181,
            51426, 53744, 4499, 11172, 56374, 63738, 3664, 33845, 37157, 965, 32592, 63003, 63686,
            19615, 4657, 41773, 31900, 50581, 18028, 1079, 29992, 34383, 5175, 18724, 55095, 34374,
            48355, 12191, 62499, 62508, 63612, 39047, 26733, 53960, 55239, 20815, 65434, 55386,
            60984, 34748, 29996, 3357, 55343, 7686, 20719, 47697, 25815, 46829, 46412, 55814,
            14954, 3357, 42532, 15634, 35270, 32870, 59622, 3985, 27252, 45296, 48358, 8451, 64871,
            57567, 7304, 63953, 10696, 62588, 13406, 49243, 63350, 58218, 10163, 20681, 37966,
            64938,
        ]))
        .unwrap(),
        c: 97,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf7c368f32d7a4842614e5b13e4d4df0423427c72aa564c7743265ef21217f744");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_1() {
    let value = VarTestStruct {
        a: 12339,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            6435, 5027, 12935, 58835, 25601, 42816, 55130, 46980, 33955, 2700, 62344, 26772, 49951,
            17175, 2289, 34685, 61812, 51435, 45366, 28638, 36391, 22398, 20053, 60454, 27696,
            39806, 23627, 30652, 8110, 20266, 16441, 20423, 47009, 33684, 60909, 9702, 57568,
            26503, 25931, 61716, 16870, 54646, 61593, 19618, 48952, 4915, 53893, 24200, 63028,
            38000, 44874, 7726, 31012, 24641, 61568, 59741, 52712, 50516, 1360, 61226, 18309, 1403,
            32679, 6717, 25356, 41731, 54184, 38756, 3767, 25101, 24133, 2397, 38331, 2687, 37038,
            43443, 47201, 37141, 57101, 31255, 14285, 18735, 52887, 57902, 27817, 43542, 35864,
            42910, 54409, 22273, 32147, 23776, 15718, 27147, 30733, 49369, 13919, 46822, 46991,
            43084, 36413, 53876, 61482, 23379, 10338, 2753, 26758, 35000, 60336, 58532, 41487,
            56416, 33731, 57977, 48319, 54818, 623, 31523, 48801, 30764, 2552, 25466, 44332, 14911,
            43224, 31602, 105, 48493, 44213, 24487, 57050, 14160, 34137, 57442, 62213, 29737,
            33973, 40612, 19783, 51676, 31939, 20052, 50605, 20918, 55316, 48016, 40253, 58739,
            26284, 31291, 19970, 11793, 11690, 14549, 35505, 61927, 8663, 27698, 5182, 27535,
            38689, 43328, 34168, 25500, 61636, 2259, 64968, 36733, 31201, 25144, 41771, 2888,
            28180, 10426, 40259, 47533, 35148, 29417, 2389, 33575, 33454, 53437, 29607, 56328,
            26017, 1631, 55664, 41612, 6499, 21837, 54618, 41586, 21958, 48422, 32507, 4943, 28887,
            35079, 29344, 42857, 18651, 21237, 43919, 29056, 63768, 10172, 44679, 3866, 9606,
            24041, 32219, 22596, 8366, 42644, 32522, 41151, 2680, 15538, 34354, 47859, 36035,
            60830, 54743, 52989, 24891, 42186, 33301, 36198, 30264, 44612, 3714, 29131, 28926,
            55360, 43546, 38201, 31205, 18149, 17004, 46729, 47446, 15866, 31071, 9267, 60229,
            1970, 25222, 59538, 1375, 21638, 18073, 38411, 33281, 12698, 11192, 11252, 24193,
            52988, 48070, 39438, 1888, 7320, 63951, 40461, 22286, 40137, 61093, 52731, 30123,
            17484, 3302, 22216, 55458, 608, 34610, 10863, 22823, 50379, 6078, 37084, 2682, 5584,
            43468, 44929, 16330, 57616, 12260, 59257, 2719, 11929, 39447, 16197, 53235, 60854,
            48756, 20252, 48603, 18883, 1404, 31551, 15159, 9520, 40266, 41646, 61275, 56828,
            55784, 13765, 5796, 17724, 49215, 57779, 48446, 61955, 31367, 42786, 50032, 49065,
            62786,
        ]))
        .unwrap(),
        c: 164,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe1b98199d4cb498e33bf2efdbaa2fdde0efa008171804b1ec780bfc2f20fa12d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_2() {
    let value = VarTestStruct {
        a: 205,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            50820, 37658, 24377, 10169, 41075, 53746, 8356, 25932, 45622, 27068, 52763, 3905,
            15862, 28126, 20621, 13913, 3287, 32731, 64049, 38140, 4633, 59798, 46915, 50652,
            56348, 14212, 31268, 28124, 30184, 42573, 50609, 38750, 56173, 55013, 29426, 30317,
            27321, 30176, 53921, 30516, 50391, 64286, 4002, 26549, 37697, 64128, 62791, 47733,
            6758, 23354, 35398, 39783, 5603, 31593, 29931, 62807, 39525, 22960, 31611, 60076,
            61069, 33118, 51633, 36681, 35201, 63131, 57976, 53980, 26862, 5526, 27693, 59949,
            28315, 40673, 21657, 37447, 7173, 6273, 60144, 46334, 51675, 21959, 14083, 63322,
            19817, 11565, 64397, 44620, 33698, 17540, 54907, 18417, 46083, 57982, 15207, 19947,
            39484, 38645, 20556, 47523, 35769, 60442, 16245, 7136, 36210, 64424, 59417, 7065,
            25400, 17770, 12639, 53513, 26893, 24945, 20458, 44064, 32684, 33195, 34288, 54811,
            64545, 26163, 1606, 34438, 61765, 27354, 49031, 43873, 27699, 55178, 20057, 26741,
            56039, 48720, 42869, 11207, 18823, 35744, 16640, 51189, 56213, 39393, 11279, 57428,
            25401, 51327, 12373, 46056, 39658, 22790, 16024, 27028, 6877, 8169, 26767, 23285,
            24104, 40186, 18733, 6293, 30884, 49327, 63942, 44730, 59946, 567, 4896, 3305, 61423,
            16351, 57417, 16923, 61467, 4028, 50748, 25219, 2858, 23941, 16045, 6325, 39192, 52108,
            20202, 23170, 28164, 32713, 8566, 65058, 17592, 31227, 9495, 58572, 59169, 64539,
            18195, 25848, 62999, 2567, 625, 27932, 38439, 63734, 18357, 16889, 10120, 58645, 45807,
            28477, 24032, 61881, 28697, 15837, 40711, 62441, 43212, 36747, 47247, 48702, 5004,
            50713, 58757, 327, 32023, 18047, 44629, 56156, 49809, 27253, 8667, 43371, 22270, 49207,
            57148, 55652, 12853, 57297, 4882, 5033, 15717, 20909, 51369, 1660, 28602, 58525, 64722,
            33487, 10225, 41969, 15432, 39244, 6650, 11309, 50468, 39975, 47851, 28207, 21584,
            32420, 12698, 49458, 57098, 64727, 23627, 25878, 61213, 34397, 27200, 58343, 26552,
        ]))
        .unwrap(),
        c: 77,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x990f1a2c4c2362a7c59bbf94a93ac6898f23516b4e8144c23bf68d6c152df640");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_3() {
    let value = VarTestStruct {
        a: 59954,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            47544, 35901, 35508, 52836, 1719, 31754, 34244, 52550, 16561, 58801, 25853, 43681,
            39390, 12185, 9972, 47546, 1829, 5990, 64073, 18298, 9266, 12496, 4894, 41007, 6298,
            60698, 4441, 23191, 20980, 44225, 26750, 26529, 44543, 60132, 53479, 24363, 10817,
            6294, 33523, 21955, 35783, 814, 30126, 41274, 13287, 20372, 38718, 43249, 10103, 41521,
            41728, 15359, 23356, 13482, 47949, 60925, 19649, 50587, 2028, 16188, 47406, 32411,
            18392, 50087, 23556, 28540, 46938, 34260, 24645, 1090, 17582, 12425, 40898, 18533,
            57465, 9365, 16851, 36173, 49601, 57394, 9303, 1450, 11421, 34731, 36704, 36258, 58268,
            51543, 60559, 10002, 18373, 38304, 63147, 46545, 11631, 36682, 65507, 61565, 13008,
            37688, 35285, 10122, 16840, 44192, 52338, 24551, 10878, 38335, 1428, 8548, 41925,
            37327, 32416, 57973, 14418, 65315, 54073, 7303, 35650, 38067, 26344, 33488, 6148,
            58584, 11080, 36753, 48068, 60853, 823, 28807, 24356, 42206, 36600, 60392, 34488,
            18009, 9267, 4261, 30247, 1832, 49902, 55776, 25964, 63822, 39898, 54359, 37226, 6056,
            51461, 42397, 51733, 8952, 1902, 28244, 5940, 55887, 21082, 57457, 54552, 46612, 30577,
            49304, 29271, 52470, 24464, 9714, 63341, 24988, 64426, 58887, 62248, 41551, 56777,
            54860, 28940, 55726, 6549, 22294, 55725, 30601, 42710, 14039, 52355, 7119, 42975,
            36398, 1930, 23194, 44716, 38544, 2894, 21186, 42457, 54454, 55759, 64726, 1852, 23267,
            9989, 28219, 217, 39404, 62326, 36654, 45520, 58659, 22569, 31612, 25724, 52933, 54063,
            33087, 41451, 18482, 56623, 6304, 65297, 62609, 53445, 20788, 41257, 22370, 45448,
            65004, 37023, 6513, 35082, 34973, 11324, 23313, 11166, 61355, 31282, 23348, 3442,
            41310, 14410, 2014, 22002, 61242, 60764, 50457, 28559, 36741, 53740, 61396, 19742,
            20263, 59788, 45465, 5999, 58492, 34682, 60825, 55849, 53614, 48937, 54765, 14165,
            20739, 49363, 2825, 36502, 9126, 61867, 63656, 55683, 33646, 55788, 1976, 48822, 27901,
            36850, 36062, 13705, 42944, 4739, 19406, 42522, 14031, 9424, 62422, 20085, 31389, 4691,
            1664, 17488, 59411, 51719, 53248, 53066, 11988, 11526, 839, 13086, 64255, 41602, 41621,
            6730, 35219, 45484, 21924, 35220, 8997, 54406, 1963, 18713, 1689, 48031, 64652, 2562,
            56373, 45801, 6715, 61166, 9535, 15176, 35880, 60603, 53642, 30585, 58224, 57970,
            23717, 52159, 55203, 64886, 43811, 21809, 60137, 52074, 2427, 41056, 52065, 48321,
            61357, 31128, 63474, 19282, 42205, 64338, 52686, 48111, 12309, 33128, 56312, 25846,
            23180, 62647, 1918, 47884, 43671, 32982, 720, 52850, 21660, 60389, 44679, 60224, 6524,
            30144, 35778, 58718, 39114, 2284, 26229, 683, 5325, 17429, 56506, 59126, 8096, 60346,
            24052, 56057, 12781, 18297, 61239, 17808, 29364, 43074, 14597, 61708, 56273, 46909,
            49018, 36433, 1378, 4165, 1576, 12138, 34945, 55039, 55036, 22472, 38716, 13039, 58305,
            12691, 31453, 31231, 26723, 43467, 34003, 48679, 18972, 41114, 28527, 46927, 55097,
            4018, 37957, 16218, 52456, 10564, 54694, 32175, 45058, 26121, 34762, 13729, 21576,
            41371, 31687, 2777, 6054, 21893, 1826, 7885, 11857, 30076, 17308, 22458, 41625, 42706,
            20125, 42911, 31021, 2016, 7295, 15907, 59269, 14430, 27729, 41255, 56802, 40413,
            52836, 40571, 19781, 19511, 39353, 2203, 20540, 50713, 28025, 11288, 23858, 30906,
            14831, 51241, 38482, 29467, 40739, 22915, 28559, 62212, 15451, 1785, 36094, 12095,
            55418, 58100, 14415, 42213, 3993, 27868, 25731, 53728, 53814, 56621, 9064, 11021,
            55263, 6028, 48344, 5647, 44402, 6470, 60431, 41746, 22183, 13371, 14935, 7984, 59835,
            35098, 9046, 18696, 60865, 11445, 32353, 37537, 42674, 39469, 56849, 36301, 64063,
            34090, 45803, 45644, 32168, 8650, 42425, 2885, 55870, 53898, 8613, 45166, 12328, 43003,
            7596, 16808, 52606, 33787, 8079, 5887, 34729, 8977, 4941, 64214, 12625, 23713, 35509,
            35288, 27855, 61603, 23221, 24087, 2651, 47664, 14691, 45924, 28964, 7892, 4004, 56152,
            64321, 11425, 55781, 24967, 27437, 60968, 28528, 802, 40192, 50137, 923, 30539, 5466,
            35683, 31453, 53346, 25938, 61027, 60517, 31683, 41838, 21897, 46743, 32110, 11414,
            26229, 51251, 3953, 19554, 56673, 7711, 52659, 54031, 49501, 34924, 3052, 41045, 55152,
            38717, 50952, 27832, 6652, 16988, 32005, 35892, 31525, 63326, 62447, 43759, 6586, 2966,
            48284, 39202, 11599, 18244, 61583, 64894, 8393, 52087, 56738, 63364, 33619, 30876,
            37388, 38748, 26641, 16052, 64964, 4936, 4889, 31626, 61209, 5332, 4895, 15946, 47219,
            43451, 60011, 46921, 42616, 6807, 44286, 53386, 15090, 3790, 9451, 42557, 21237, 58854,
            17340, 39880, 5134, 51854, 42730, 10774, 33289, 61764, 52806, 36261, 64602, 45571,
            59385, 59626, 35994, 17746, 16175, 24702, 17890, 23900, 28308, 6044, 36617, 51900,
            58907, 28840, 39632, 10362, 1773, 55690, 21503, 29648, 33760, 47045, 16792, 15348,
            41911, 65046, 27133, 58266, 50916, 22440, 11367, 61567, 51332, 20347, 30981, 21759,
            20725, 30837, 56781, 37830, 31915, 48263, 14330, 2594, 57138, 51927, 51244, 27232,
            3128, 44021, 51173, 7697, 32119, 17398, 32775, 21509, 46252, 27407, 62467, 45228,
            49480, 61986, 38413, 5459, 2861, 42474, 48881, 28027, 20981, 59394, 60034, 58475,
            53265, 22845, 44462, 9073, 51844, 46219, 37527, 28131, 15546, 38281, 14527, 5713,
            35002, 64971, 206, 40774, 45065, 65170, 5097, 16471, 56033, 19897, 27009, 55421, 7846,
            18876, 49670, 13259, 59362, 45667, 64558, 10061, 9596, 31551, 46737, 2639, 18143,
            35668, 25923, 36376, 23629, 57770, 10111, 24001, 7830, 3948, 46498, 21584, 4200, 13663,
            33067, 59311, 4819, 37117, 64931, 44531, 52134, 1430, 51212, 36068, 15568, 49790,
            12749, 23572, 16151, 19046, 24408, 64158, 15625, 47083, 20856, 54012, 29810, 28222,
            24397, 16557, 19267, 55778, 21668, 30801, 31746, 22174, 34529, 22945, 27457, 62190,
            50136, 48305, 16009, 63764, 65302, 65438, 47414, 60619, 28274, 5480, 65506, 15983,
            19708, 58833, 56349, 38304, 17205, 61093, 64211, 32485, 28569, 19674, 13339, 46112,
            24498, 25750, 29375, 50973, 25680, 18754, 24211, 25697, 56, 13857, 5751, 18928, 16508,
            10814, 18695, 67, 60001, 37795, 5120, 29170, 28343, 44425, 5103, 21851, 9834, 7667,
            55788, 56104, 12307, 58516, 14587, 22737, 28475, 22249, 58531, 58094, 6508, 48690,
            31553, 61208, 53678, 13813, 55542, 37296, 48334, 40318, 62315, 42786, 37277, 8146,
            14890, 29045, 5103, 17431, 24505, 25625, 17976, 59622, 20697, 53216, 15896, 28389,
            56453, 25137, 31685, 38166, 51712, 53769, 16104, 10828, 32264, 65100, 27909, 49558,
            21803, 9027, 12724, 62924, 63455, 24521, 57571, 20608, 29422, 14941, 38930, 3872,
            59608, 12715, 48381, 51290, 50549, 42440, 19838, 13794, 35247, 34355, 11713, 41696,
            12890, 11399, 33195, 10695, 3108, 20482, 40575, 55627, 510, 33803, 57263, 21731, 2987,
            64150, 15790, 23502, 9509, 44955, 44989, 31999, 65326, 55944, 64065, 34754, 62481,
            30984, 31635, 13396,
        ]))
        .unwrap(),
        c: 231,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x41d081029855c4979db545ce107d84ef51497ce93419d43d2ed3ee7d85660b6a");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_4() {
    let value = VarTestStruct {
        a: 64822,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            16734, 9497, 13409, 58763, 25059, 15369, 39800, 59064, 57777, 39067, 51491, 16990,
            21832, 49126, 22305, 16738, 49169, 53302, 48143, 64253, 11487, 62349, 18465, 25005,
            2187, 20076, 30722, 20603, 52198, 34362, 11076, 53420, 13240, 44102, 7925, 30092, 9770,
            44512, 21895, 9402, 27408, 41562, 18541, 11001, 35630, 33585, 20222, 16148, 39468,
            54090, 56945, 32539, 39850, 18492, 9324, 49132, 17133, 65101, 40288, 32959, 64232,
            34002, 27234, 3247, 60173, 6612, 31249, 41236, 21144, 37743, 14100, 43723, 56098,
            20453, 26463, 9332, 10448, 61593, 56811, 55137, 64910, 49636, 56860, 6119, 20563, 3717,
            45400, 31513, 22454, 1679, 44069, 58266, 27392, 21672, 57541, 57911, 39043, 2211,
            44837, 11206, 26407, 5650, 12664, 14980, 46066, 1742, 46314, 19538, 40224, 12916,
            13292, 17050, 37958, 39923, 47825, 11199, 15046, 26984, 43252, 53440, 18540, 42290,
            27623, 53563, 13108, 62984, 37857, 28030, 33459, 56216, 18200, 56614, 36556, 15662,
            1037, 43164, 20624, 8888, 51760, 57500, 1107, 44480, 12656, 8819, 12157, 3525, 15378,
            55142, 40246, 25204, 15596, 45618, 4788, 55734, 34111, 59080, 65496, 62130, 59227,
            28310, 12030, 49527, 6787, 31127, 2232, 47740, 12675, 53517, 9498, 5376, 35772, 4043,
            43995, 26459, 32253, 51908, 47110, 16206, 58912, 63831, 50467, 43485, 60556, 32610,
            28632, 59872, 24892, 47267, 11664, 41738, 21242, 38358, 42981, 27249, 8946, 63540,
            18209, 49392, 38071, 18504, 6692, 18317, 2330, 15972, 61190, 12897, 35275, 29690,
            42809, 7628, 56816, 40985, 34180, 38613, 19570, 24215, 20289, 31268, 25707, 30953,
            61128, 49858, 47164, 27258, 63210, 25744, 10710, 16104, 37579, 8674, 59213, 51119,
            14578, 35741, 32345, 44208, 4890, 16064, 55411, 45236, 40737, 12112, 41466, 3068, 5286,
            28355, 49680, 21941, 12506, 29789, 41957, 52635, 43889, 25845, 36905, 31230, 27641,
            6706, 36949, 29425, 31070, 44041, 29936, 35986, 47553, 47686, 3527, 3694, 59911, 52014,
            2102, 9887, 16587, 45417, 46869, 53432, 57067, 48705, 51375, 33265, 50675, 42162,
            52850, 11513, 27881, 51457, 17062, 18988, 9284, 33599, 9660, 43392, 53174, 37759,
            49597, 6983, 29122, 63296, 52955, 30240, 61494, 18793, 44289, 26155, 30080, 21586,
            42541, 54747, 1374, 4462, 29187, 33881, 41771, 14322, 7045, 3478, 3686, 9997, 64316,
            36056, 16200, 52613, 20349, 47039, 19367, 31126, 15810, 12497, 19972, 38231, 12327,
            15223, 39398, 48524, 52897, 10594, 26469, 29975, 14058, 28287, 54062, 63545, 32326,
            55902, 49495, 6971, 16175, 6269, 16332, 40733, 14148, 57254, 20291, 30514, 1401, 5330,
            62581, 10125, 57801, 53755, 793, 24246, 41421, 34479, 354, 60708, 36099, 40827, 15605,
            27539, 10509, 12268, 15083, 2483, 10801, 36195, 58324, 55028, 160, 29721, 2470, 51783,
            5065, 5192, 56437, 32574, 45830, 39511, 56774, 48139, 61561, 2382, 1528, 34507, 15936,
            7072, 39164, 59390, 28913, 8056, 30601, 5245, 39879, 12841, 36986, 62506, 18167, 55951,
            2609, 30796, 2075, 48830, 1061, 33832, 6580, 4035, 44183, 9653, 7051, 56146, 54571,
            27132, 8366, 24509, 57094, 61014, 63036, 46907, 46808, 27189, 8008, 27669, 65397,
            19509, 31043, 21722, 29604, 35622, 40847, 21522, 64302, 51059, 21307, 994, 43154, 6147,
            4465, 8106, 27534, 34215, 39459, 52628, 34530, 42293, 25910, 61857, 32612, 38607,
            48095, 55746, 64429, 5639, 55007, 1663, 2163, 64568, 57610, 38969, 55004, 23756, 9830,
            41968, 36551, 42024, 12681, 6845, 23292, 59869, 57931, 38959, 9817, 51524, 18205,
            33326, 61883, 53064, 10571, 45597, 23549, 15586, 7176, 43530, 54365, 47336, 1916,
            44005, 17095, 51578, 21104, 59930, 5761, 51585, 31712, 39207, 49513, 40989, 62146,
            47088, 44958, 64994, 43389, 63619, 5571, 43822, 63750, 22179, 20902, 23967, 8418,
            15853, 41176, 16517, 47557, 16346, 1651, 12510, 51067, 34628, 372, 45316, 24357, 58746,
            21948, 18187, 65335, 33868, 28452, 50715, 38157, 54584, 65232, 18879, 36185, 44192,
            39901, 26183, 29071, 59147, 61432, 65026, 26747, 2119, 41935, 39579, 2170, 33594, 7133,
            37391, 21320, 62596, 63632, 58419, 49259, 9457, 29473, 36503, 45520, 39648, 61208,
            51551, 19402, 11087, 36862, 35980, 22827, 9086, 60845, 55162, 38429, 39683, 45375,
            48240, 20337, 39223, 55330, 16255, 47375, 62729, 44078, 61580, 24641, 2120, 10603,
            28425, 25779, 2045, 29794, 24616, 35983, 10817, 10156, 20282, 25531, 20521, 28380,
            47790, 15657, 48250, 26996, 36368, 2970, 49697, 7927, 43512, 2825, 30974, 57358, 40868,
            4760, 65411, 18766, 19284, 35368, 7148, 48838, 40734, 6172, 20580, 8186, 45145, 52163,
            36315, 15311, 29498, 4463, 3688, 33609, 55836, 28252, 58520, 34515, 46552, 61523,
            24952, 19857, 3336, 13679, 55511, 5099, 38850, 33963, 42866, 35611, 31759, 60452,
            32834, 55234, 8671, 48217, 12951, 23795, 10353, 60005, 50334, 22863, 4494, 8371, 24235,
            3459, 49590, 54442, 56983, 29468, 61233, 52999, 50233, 14298, 23565, 57732, 48815,
            61357, 63393, 63211, 65028, 52663, 17295, 54230, 37747, 21716, 7801, 21972, 11855,
            8872, 60260, 3514, 30734, 56542, 44127, 15399, 39049, 13877, 18266, 12728, 36734,
            58673, 13172, 30899, 33758, 57028, 56440, 47497, 53878, 455, 29107, 29059, 53381,
            28659, 7968, 59421, 60965, 56542, 46548, 40813, 34449, 9629, 38091, 15287, 11362,
            61806, 61220, 43427, 9448, 51328, 61558, 22077, 1288, 18853, 42480, 20553, 34622, 9965,
            40304, 56925, 453, 24072,
        ]))
        .unwrap(),
        c: 41,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xd6139a50ec151d61a71e52f8bd45e3b30bed9b3aaa69c833c3da30bd36d243e4");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_5() {
    let value = VarTestStruct {
        a: 27545,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            21413, 8654, 13117, 51057, 44329, 9178, 12592, 57532, 49952, 31, 62331, 54527, 20925,
            7217, 19218, 56366, 43338, 30314, 44804, 46668, 37749, 56160, 21115, 19460, 10844,
            39304, 39656, 48719, 1175, 3569, 23957, 52379, 51340, 45625, 61608, 33272, 9657, 33622,
            35346, 23400, 22480, 1646, 8067, 13352, 45083, 52481, 21408, 42809, 18754, 45494,
            31515, 64093, 43622, 41770, 39804, 58939, 21346, 39284, 62459, 30183, 41116, 8063,
            63486, 50992, 6541, 49668, 60143, 38467, 26826, 12182, 37815, 18526, 17712, 33594,
            12022, 16696, 19151, 44382, 31811, 20482, 42567, 20900, 54855, 16896, 27407, 46202,
            42501, 10659, 30202, 9054, 1340, 64714, 8189, 52178, 712, 49939, 63055, 54182, 60645,
            28568, 22527, 51057, 53132, 1652, 14120, 55140, 20577, 42350, 39306, 39901, 37111,
            62066, 44384, 8075, 2975, 8973, 9748, 44527, 41078, 13066, 9238, 49084, 48165, 49417,
            39356, 57288, 25594, 10919, 30294, 58612, 54396, 54135, 26532, 14982, 58127, 11476,
            27682, 23718, 60617, 17202, 24420, 20563, 28407, 56551, 35332, 59401, 2774, 12601,
            1199, 28657, 58228, 9550, 51679, 56963, 44504, 30517, 55203, 57026, 20210, 44338,
            55511, 1189, 41244, 35557, 12489, 10931, 7227, 49806, 25541, 59745, 13449, 40286,
            32662, 56553, 47090, 26271, 55614, 5123, 39726, 44554, 21558, 30578, 39393, 46994,
            38432, 48010, 36725, 28385, 30852, 23857, 35242, 30498, 18176, 8110, 28993, 16601,
            43712, 36377, 878, 34191, 10115, 6034, 3833, 34199, 19402, 10556, 30570, 31450, 3999,
            32260, 49742, 19134, 60144, 40792, 13499, 29805, 26377, 30190, 2815, 15483, 26424,
            40657, 62597, 6101, 52829, 20630, 21497, 10114, 42981, 20637, 55214, 11988, 52133,
            40299, 41685, 19382, 57901, 48895, 16931, 55797, 24608, 27750, 35616, 695, 19623,
            55022, 58160, 4217, 21996, 47287, 9066, 49126, 13741, 17970, 49058, 55653, 52010, 3553,
            63109, 48656, 32895, 16240, 18198, 14261, 5852, 26095, 20822, 652, 23025, 58326, 48328,
            11988, 18805, 50594, 14264, 57689, 32144, 13985, 29853, 64814, 23343, 20157, 15998,
            60728, 28482, 56246, 4032, 48872, 23408, 22535, 63105, 27901, 46529, 49777, 9464, 494,
            16701, 1206, 225, 41632, 55076, 9591, 57060, 48760, 5072, 58394, 21332, 61403, 50567,
            34739, 61692, 4558, 49268, 61278, 47862, 60112, 44638, 24051, 1077, 47496, 10180,
            24812, 40513, 63623, 16823, 44383, 11923, 26762, 39442, 59621, 17596, 30537, 57658,
            65104, 24590, 64604, 40265, 25098, 9950, 42222, 25481, 16125, 2171, 32553, 7630, 62558,
            30171, 17754, 48642, 22275, 7637, 58428, 35485, 56539, 59926, 30201, 48305, 37085,
            29333, 26215, 3784, 56490, 8789, 40120, 33186, 8941, 58379, 55493, 14184, 22585, 34044,
            38215, 847, 44160, 35127, 23719, 39814, 33300, 13886, 50489, 7672, 20590, 750, 57369,
            35885, 38292, 7828, 19205, 97, 32135, 36588, 7704, 43158, 45747, 63375, 4283, 49423,
            40946, 11366, 9287, 35779, 37003, 62576, 55195, 15070, 10340, 6438, 20519, 29621, 8625,
            61174, 35659, 8832, 40928, 32446, 63888, 21344, 39968, 49611, 27218, 32740, 19588,
            7319, 61430, 13021, 18217, 52802, 61141, 6213, 45390, 21528, 65051, 23046, 32058,
            39284, 40898, 61535, 62940, 36949, 18942, 17841, 42794, 29454, 36643, 23817, 28916,
            26417, 9265, 33014, 42171, 52412, 19692, 4864, 21306, 42823, 52206, 46163, 56650,
            56915, 37407, 20063, 2065, 55659, 39768, 6072, 19178, 61664, 33798, 1738, 21948, 46264,
            51883, 457, 3210, 17697, 30844, 30922, 39855, 583, 9437, 35302, 42587, 19868, 61758,
            24495, 52663, 21017, 18973, 5219, 33515, 16067, 19238, 44512, 47818, 37123, 1710,
            38117, 63783, 46, 61974, 48117, 63709, 31330, 41901, 12686, 45671, 28016, 7959, 6473,
            45092, 1525, 36424, 21716, 28716, 29690, 36111, 39841, 44261, 28668, 53630, 25657,
            23128, 42585, 63590, 16290, 47071, 17586, 63367, 32173, 47347, 33849, 46199, 44858,
            1431, 21333, 41585, 25872, 44014, 26043, 32445, 25089, 30491, 57854, 5699, 63622,
            58202, 65170, 55483, 47836, 29777, 48829, 31728, 15466, 57028, 44130, 49665, 58482,
            38995, 45642, 41884, 41663, 5947, 65329, 49007, 38614, 6826, 49817, 16491, 6084, 61512,
            23725, 2538, 11947, 28985, 3442, 33443, 60318, 41826, 22767, 41128, 24852, 4993, 54919,
            58195, 65200, 46522, 31519, 61164, 56224, 33206, 32765, 25182, 63650, 26199, 52602,
            47729, 63543, 20645, 56556, 18113, 18926, 52879, 9942, 14315, 32647, 40445, 37993,
            50037, 9929, 52152, 5929, 10107, 932, 51200, 41618, 41859, 35266, 16116, 38731, 17805,
            13825, 40712, 39972, 61992, 56937, 48542, 37801, 60178, 32444, 16899, 19746, 38263,
            62850, 21174, 63289, 22588, 2779, 61385, 23093, 45035, 60014, 40008, 60399, 17843,
            56663, 36167, 31505, 15600, 30531, 25171, 56859, 11091, 44987, 35997, 65273, 3892,
            7268, 63562, 20626, 22262, 50615, 19627, 5829, 40067, 12945, 31450, 47946, 21168,
            49041, 56746, 56499, 55680, 76, 3117, 60005, 21900, 19558,
        ]))
        .unwrap(),
        c: 10,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe72553d4b1b08c4c64c3b7781bba9d4c6eb20c6cb6c2cb91fd10b3004d9cbf6b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_6() {
    let value = VarTestStruct {
        a: 2546,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            34018, 8390, 30159, 22918, 60518, 657, 6213, 58030, 24457, 42466, 40615, 18842, 17930,
            21037, 52428, 59240, 48155, 42710, 13138, 19201, 33753, 32815, 54534, 20160, 22286,
            44228, 25521, 9223, 40720, 15788, 6038, 62872, 39859, 23700, 57158, 53083, 11309,
            40725, 1558, 25212, 31354, 46330, 7851, 21645, 7365, 57600, 40310, 55336, 25315, 1824,
            19125, 6533, 8833, 6165, 22423, 32182, 54976, 55260, 15679, 10223, 13181, 13315, 16577,
            46196, 39818, 42779, 8735, 27555, 48730, 37154, 54589, 51826, 49335, 53927, 4064,
            47031, 22823, 36071, 24381, 9280, 58774, 34858, 20478, 35270, 1322, 16684, 819, 55770,
            45201, 50553, 13608, 3280, 57801, 44270, 23123, 63775, 18291, 60870, 17669, 17275,
            53773, 27042, 54772, 29957, 18286, 33936, 8136, 65026, 42341, 63119, 406, 30194, 7991,
            25185, 50298, 379, 15588, 20844, 19818, 31347, 26126, 5144, 23273, 41826, 27028, 58115,
            34546, 49994, 47001, 6618, 26080, 12506, 62220, 21096, 11180, 42564, 41073, 27052,
            39006, 25417, 29074, 9520, 33476, 45148, 13077, 33902, 16624, 29648, 41728, 63676, 141,
            3569, 27794, 29044, 46305, 14395, 29144, 52352, 23925, 33807, 11661, 12498, 49388,
            51006, 2272, 46677, 3473, 5723, 38086, 40645, 46357, 264, 27917, 11511, 8712, 42179,
            50300, 29592, 48781, 48744, 63278, 2587, 63990, 57261, 11977, 19185, 34199, 1404,
            14520, 60498, 25689, 17033, 7525, 56408, 24282, 48551, 59994, 4635, 14452, 17579,
            34087, 20437, 56108, 29764, 47434, 7779, 32911, 46410, 37329, 39708, 7296, 30065,
            17759, 40292, 17383, 48373, 8578, 65108, 30537, 14267, 1763, 15449, 25201, 8090, 62505,
            28057, 17162, 35386, 64970, 23526, 48384, 26426, 52805, 32682, 40288, 486, 60113, 4626,
            27971, 33038, 52074, 47860, 7127, 44211, 15324, 13280, 10912, 28088, 40103, 39615,
            14579, 30440, 59337, 46958, 996, 21936, 28687, 35555, 58923, 37446, 33971, 20055,
            14682, 39316, 1154, 49858, 23148, 51971, 2627, 65155, 24528, 29153, 44830, 54030,
            31984, 4977, 55284, 64169, 22970, 65323, 18149, 37260, 29378, 49863, 56516, 6457,
            11161, 18672, 49883, 26058, 54728, 16794, 33905,
        ]))
        .unwrap(),
        c: 248,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf7d6dd5cae0fef7e20398d9b7032e2432627bac1bd36af4ae0282af071a2d9f3");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_7() {
    let value = VarTestStruct {
        a: 32956,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            27138, 27095, 53009, 54159, 8538, 53786, 56204, 29089, 35375, 14190, 46500, 3428,
            53800, 5512, 61459, 34103, 46566, 56473, 28012, 61737, 8839, 56906, 1214, 20870, 246,
            19739, 13023, 15645, 30344, 31638, 1481, 25217, 40583, 41707, 8317, 44506, 20646,
            33362, 27605, 56049, 30706, 22501, 47687, 61778, 4231, 9735, 58330, 20570, 60656,
            33736, 25224, 13867, 58191, 42151, 50251, 59452, 317, 16137, 62367, 10744, 63987,
            59365, 46735, 13258, 37835, 24328, 2060, 15162, 12492, 10300, 20493, 41130, 11947,
            40310, 57510, 22455, 8054, 27136, 58481, 49567, 2032, 131, 44782, 12937, 54439, 61512,
            61524, 62347, 8736, 50916, 12666, 27574, 40709, 35405, 64670, 55436, 14262, 6434,
            58879, 11548, 40304, 47497, 28882, 1881, 12486, 8941, 3523, 47093, 8760, 16683, 5622,
            11376, 60724, 43644, 23036, 46199, 9602, 35494, 33105, 41735, 34010, 37561, 19942,
            35756, 16424, 38879, 22, 18089, 7052, 16949, 10183, 51297, 25324, 43948, 16975, 3912,
            26108, 38607, 38494, 52661, 7871, 45283, 4980, 63383, 42754, 62136, 4752, 29277, 42875,
            44561, 34551, 14393, 58444, 5157, 47658, 35416, 24084, 43456, 59128, 15069, 64469,
            41346, 36531, 38917, 47953, 14898, 44740, 49690, 51994, 19349, 54806, 23286, 16891,
            62169, 60527, 11793, 19973, 12429, 14622, 51864, 17134, 64595, 54163, 39808, 18116,
            3296, 38106, 24841, 29761, 12477, 63978, 27408, 12793, 47253, 60616, 44759, 32227,
            62722, 10266, 14664, 8372, 9215, 10840, 15321, 53085, 65302, 51733, 16477, 1313, 49804,
            33294, 19688, 42705, 57595, 60812, 39935, 31669, 33687, 2333, 38506, 38605, 40852,
            7757, 53279, 56054, 6949, 23466, 32810, 33892, 9494, 21550, 25402, 61141, 15210, 1103,
            51505, 52012, 29688, 64627, 30075, 28157, 47930, 32419, 40236, 21740, 7598, 17683,
            6070, 59508, 31350, 17551, 50124, 24196, 1802, 47780, 53671, 29605, 28133, 12668,
            34794, 11749, 17617, 3078, 14367, 1900, 47771, 25973, 23276, 18400, 21753, 23116,
            29395, 46882, 10426, 47657, 35829, 17090, 24589, 19686, 31672, 61289, 64620, 4646,
            49954, 28110, 18390, 4502, 22866, 23785, 36788, 56125, 45974, 6807, 15408, 64023,
            44838, 22551, 16602, 12922, 1566, 64936, 20741, 59916, 27648, 51077, 4551, 30119,
            34908, 30419, 21673, 30183, 14105, 51267, 61895, 38579, 62346, 31458, 51983, 17318,
            29503, 64281, 27917, 56382, 34922, 6485, 59189, 18593, 23705, 12107, 40881, 28457,
            4734, 32111, 51688, 58145, 32323, 15636, 11963, 16032, 63379, 7171, 45269, 21313, 6147,
            61893, 48061, 34978, 19708, 11435, 65480, 20529, 35854, 35069, 38227, 33274, 62855,
            15434, 57372, 5902, 51897, 62070, 59825, 19809, 27229, 49262, 63455, 26041, 16993,
            60909, 28260, 28100, 22839, 57375, 58905, 16800, 5481, 39291, 25427, 24021, 42725,
            10959, 45795, 54089, 37514, 47272, 62542, 64829, 10522, 9255, 64290, 64276, 4902,
            43196, 46261, 3170, 60109, 62504, 17271, 31596, 20487, 6650, 20499, 8138, 41823, 18591,
            45074, 42787, 61814, 52028, 19432, 30827, 63397, 11406, 30258, 7461, 60551, 11479,
            50137, 65372, 36159, 59593, 1851, 15446, 19800, 60816, 25830, 42604, 45828, 35234,
            37801, 52106, 4016, 32927, 31656, 36649, 2063, 40313, 46107, 50384, 62705, 34346,
            56262, 1093, 19034, 1052, 22440, 48493, 22499, 49191, 36399, 27688, 48059, 16068,
            36658, 10437, 4328, 12581, 16048, 35362, 725, 47841, 9966, 866, 20715, 25907, 47019,
            37472, 3882, 59489, 7705, 50806, 2485, 28500, 20584, 8140, 5373, 44611, 55233, 20756,
            34544, 24175, 42368, 560, 56311, 55131, 12949, 59484, 6934, 52228, 30045, 44797, 31089,
            39704, 41975, 17873, 54053, 18226, 52941, 41095, 51365, 59761, 49544, 18025, 207, 1440,
            21504, 44228, 1139, 19626, 33958, 32109, 45426, 32576, 50809, 14185, 10056, 24119,
            45551, 58304, 39065, 48892, 41104, 62603, 34998, 852, 48416, 52650, 35204, 35174,
            40093, 28325, 61824, 60746, 55360, 43636, 38440, 33899, 59983, 49849, 7524, 20437,
            60493, 46740, 57142, 34972, 54637, 60366, 53596, 60203, 42763, 38171, 21174, 55197,
            26371, 52440, 22871, 3978, 10656, 30761, 31160, 34323, 2339, 2908, 37549, 54861, 56206,
            39191, 34191, 36935, 33710, 38831, 1587, 56670, 39769, 3197, 18915, 44647, 44763,
            22931, 65521, 28297, 51022, 25266, 29469, 24319, 45755, 13753, 17225, 32524, 48431,
            62589, 37658, 17921, 62420, 41068, 11872, 52950, 32768, 7916, 28433, 42604, 54639,
            15654, 6970, 21004, 28292, 6859, 61208, 56419, 43687, 49985, 47039, 12726, 5232, 50535,
            31048, 52868, 51061, 10273, 14352, 9173, 4546, 47185, 11783, 39041, 11533, 32230,
            22878, 60683, 4184, 35442, 20342, 56707, 46927, 50184, 25142, 16346, 17540, 57063,
            4401, 25252, 31904, 27261, 39794, 61657, 15807, 46252, 52853, 32827, 21069, 53573,
            35790, 27692, 53323, 33537, 12526, 27341, 47223, 64366, 26671, 32312, 56988, 2543,
            44859, 12924, 45008, 11834, 63608, 43116, 62862, 60577, 24799, 54599, 17601, 23230,
            29613, 6269, 17671, 6091, 59582, 377, 6041, 9979, 27737, 24849, 14650, 5855, 63418,
            56318, 50877, 13570, 34833, 43046, 13955, 52910, 28323, 47321, 10098, 8892, 4499,
            18720, 6500, 49628, 65080, 18211, 27528, 18223, 1656, 30945, 51455, 37376, 47519,
            40919, 29123, 2864, 2031,
        ]))
        .unwrap(),
        c: 86,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x4b6da8debc43236f10ae7a472cbae050e165235867af5cea48d89e370815e23c");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_8() {
    let value = VarTestStruct {
        a: 2060,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            42551, 29164, 21013, 20151, 44157, 25636, 59364, 61542, 49967, 15147, 57085, 44552,
            43195, 27874, 30615, 22557, 43488, 36787, 23434, 41992, 57121, 45859, 29516, 20842,
            39067, 51267, 24797, 30974, 63775, 5778, 13659, 30132, 44887, 53971, 230, 64789, 40643,
            58569, 38991, 3576, 54672, 5166, 16126, 6009, 32496, 19734, 57012, 6853, 58658, 16471,
            63692, 43740, 24576, 54188, 51297, 52961, 57528, 9474, 7741, 18863, 9320, 34739, 32986,
            10073, 30654, 8007, 58475, 22398, 57276, 52330, 1758, 6845, 16111, 40830, 28603, 30045,
            57656, 38487, 45300, 30217, 56178, 24602, 48076, 23423, 25217, 57885, 21904, 10872,
            60590, 26442, 3569, 53565, 8093, 20691, 56966, 16851, 39030, 25672, 22670, 45150,
            60140, 45849, 14729, 40935, 55134, 25857, 23457, 41727, 6891, 14634, 10075, 56317,
            39538, 10360, 41205, 10986, 36806, 11126, 13145, 49735, 43748, 11144, 20969, 44433,
            30647, 41960, 34342, 7613, 38463, 33848, 16228, 46338, 38082, 24806, 58737, 63255,
            30869, 10462, 35147, 62312, 18932, 40803, 34723, 54841, 22710, 10132, 31702, 59412,
            5173, 13325, 25521, 46021, 38595, 63826, 3344, 32726, 20657, 38184, 30400, 29754,
            39295, 12400, 33213, 41239, 60225, 39839, 42074, 18088, 39370, 17856, 61683, 34670,
            18419, 48036, 63294, 57632, 7937, 2985, 65236, 19579, 1669, 6386, 37756, 41076, 19581,
            7222, 65515, 4506, 34012, 33251, 52177, 45074, 63783, 41908, 41603, 55325, 318, 18030,
            34736, 19747, 30852, 64029, 57662, 360, 60986, 52559, 24371, 31159, 59553, 55886,
            15878, 12810, 7182, 61734, 63587, 57296, 7908, 23449, 25449, 60806, 8485, 38748, 6794,
            2757, 53464, 49365, 4862, 30161, 35101, 12354, 31715, 39918, 30077, 57029, 2470, 32267,
            32751, 6955, 21684, 52611, 60503, 33989, 34572, 52418, 22517, 15281, 58638, 60268,
            54988, 52577, 9040, 9057, 49866, 53910, 42312, 13338, 64471, 60760, 26611, 29903,
            23246, 21874, 51719, 27617, 65155, 18459, 63874, 63840, 30375, 31004, 41274, 50660,
            39557, 49125, 40675, 14711, 47989, 43794, 32410, 49237, 32757, 6520, 40476, 12523,
            57270, 16611, 5527, 41238, 15833, 662, 57490, 62141, 59865, 32478, 10893, 64993, 55974,
            822, 24001, 31496, 64852, 57677, 37743, 51914, 10020, 45536, 15774, 64257, 54614,
            19167, 29789, 57250, 20088, 11718, 42562, 54684, 57510, 46453, 11211, 24467, 59278,
            8183, 32390, 34239, 13329, 33155, 34542, 18109, 44545, 35008, 58703, 23180, 14850,
            16621, 36739, 53324, 57098, 8750, 24626, 59903, 43762, 4151, 39438, 23536, 32418,
            32346, 46364, 22460, 14707, 49497, 26242, 24031, 18492, 31687, 33648, 48029, 33285,
            57017, 41227, 30324, 9039, 50650, 16476, 21071, 17078, 13294, 57921, 63691, 62087,
            12360, 20456, 60334, 60759, 7908, 56391, 16393, 63271, 57833, 59928, 56350, 13028,
            24916, 25642, 41326, 15141, 18788, 43179, 39416, 25315, 37569, 32650, 35030, 56705,
            55462, 8114, 22370, 13000, 47608, 51822, 11902, 44005, 49597, 33375, 44066, 30704,
            9401, 11854, 26428, 23333, 62424, 20738, 30592, 2619, 6457, 13129, 9486, 51703, 31906,
            60795, 3512, 38232, 36482, 19605, 10895, 45636, 37364, 49145, 33325, 53503, 8438,
            42185, 51736, 50109, 42235, 14239, 7631, 8454, 38760, 62033, 27601, 33010, 12512,
            35438,
        ]))
        .unwrap(),
        c: 160,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x84bef9b1a73afced6bee012877fdb48c4aa6fe6d04abe017f751694eef538871");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_9() {
    let value = VarTestStruct {
        a: 10642,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            54718, 63609, 42996, 4237, 51836, 49123, 55803, 62568, 48996, 39224, 10120, 2400,
            32915, 50304, 23980, 28472, 50420, 54327, 58710, 19752, 5651, 52544, 6064, 22161,
            24494, 21480, 12930, 28580, 64999, 21928, 3585, 34374, 6448, 2412, 35581, 46120, 3428,
            1223, 19292, 17038, 31961, 18863, 688, 6701, 41240, 43500, 20607, 41445, 5162, 50706,
            25534, 4615, 18023, 51691, 17938, 44050, 43037, 52846, 5064, 44070, 54035, 3607, 64313,
            4889, 46221, 26376, 7784, 24246, 35361, 40511, 44494, 61501, 12461, 10880, 48563,
            40000, 7910, 16986, 848, 62700, 49868, 60236, 30866, 2268, 37253, 25882, 48126, 43521,
            60291, 12751, 38199, 24997, 58062, 31034, 23461, 48189, 30813, 7890, 21827, 37219,
            19286, 42506, 47303, 63010, 20238, 44252, 13568, 18847, 5375, 33839, 17941, 62808,
            2632, 22775, 18496, 17186, 37109, 20731, 58902, 28162, 10266, 7132, 27628, 38544,
            23193, 65172, 62758, 11279, 35856, 18530, 10894, 53363, 45254, 44042, 14844, 55036,
            25273, 51636, 8149, 10164, 8245, 61949, 54238, 53127, 25539, 22896, 36207, 37876, 5564,
            52730, 34746, 55687, 7464, 1151, 29280, 15186, 10651,
        ]))
        .unwrap(),
        c: 112,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x87f0a7aa36ee9495cff11dbc34a49df4aff53a34b5b1d117737b6297600034a8");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_chaos_0() {
    let value = VarTestStruct {
        a: 61327,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            48055, 8544, 0, 43486, 65535, 65535, 65535, 43330, 38506, 25502, 36573, 26738, 65535,
            43808, 65535, 35062, 15678, 0, 65535, 65535, 0, 51713, 5776, 0, 20291, 65535, 46586,
            9043, 65535, 65535, 63644, 28783, 65535, 10862, 2379, 43396, 30094, 0, 65459, 18342,
            8943, 0, 31887, 21528, 51531, 65535, 0, 58502, 48719, 48379, 53529, 9293, 65535, 0,
            25977, 65535, 49779, 64590, 3911, 10509, 65535, 44604, 0, 31723, 3906, 46741, 48681,
            22813, 2334, 0, 0, 18540, 17367, 33387, 6489, 61347, 65535, 48731, 65535, 53503, 65535,
            0, 65535, 40992, 34865, 4640, 0, 48418, 24104, 65535, 65535, 65535, 65535, 23109,
            22177, 53557, 0, 0, 35835, 22838, 65535, 53662, 63722, 63059, 58363, 48893, 13445,
            52629, 16651, 61519, 12682, 17280, 65535, 0, 9288, 65535, 38481, 46527, 24686, 61987,
            61038, 65535, 14142, 60712, 9968, 0, 0, 44026, 0, 35585, 26161, 65535, 20729, 41423,
            13074, 7299, 34124, 42360, 65535, 65535, 56850, 21792, 51715, 37892, 37185, 41500,
            32616, 0, 0, 59368, 58330, 44092, 35226, 51351, 65535, 64690, 65535, 0, 65535, 0, 0,
            20660, 30481, 46379, 27036, 58231, 53001, 8268, 32033, 49955, 63629, 31128, 39678,
            42896, 59238, 8420, 65535, 23669, 0, 0, 56133, 0, 17950, 65535, 64027, 44021, 17505,
            65535, 61866, 65535, 65535, 0, 57572, 0, 32735, 34950, 0, 35938, 0, 28556, 0, 19159, 0,
            65535, 54154, 242, 45388, 0, 29313, 2174, 47601, 30986, 1451, 55358, 55275, 65535,
            32677, 63547, 65535, 2236, 38283, 16176, 32096, 54940, 0, 56533, 14617, 23329, 0, 9483,
            48295, 0, 30089, 49798, 16647, 65535, 3770, 65535, 7856, 65535, 2317, 53944, 3987,
            37793, 0, 0, 64222, 8098, 65535, 0, 60158, 0, 65535, 0, 40857, 1249, 65535, 42738,
            26882, 0, 4260, 40285, 65497, 55677, 0, 44440, 37594, 10481, 54917, 43962, 4982, 53518,
            23944, 13978, 43412, 24919, 13137, 11767, 65535, 16436, 9498, 43299, 63167, 65535,
            8354, 59068, 1377, 65535, 28350, 58447, 23475, 5438, 65535, 52436, 65535, 4232, 44224,
            44922, 27855, 31954, 39291, 8952, 3659, 65535, 45278, 56515, 2365, 59731, 28586, 45669,
            43867, 65535, 46538, 12456, 16941, 0, 46966, 16505, 8089, 65535, 20779, 44528, 64715,
            10776, 57067, 47195, 55112, 65535, 0, 21751, 30049, 55494, 0, 56693, 65477, 18304,
            62399, 50538, 65535, 36289, 65535, 0, 65535, 0, 34239, 40826, 0, 65535, 0, 0, 59697,
            34261, 48326, 45585, 1149, 4908, 0, 40177, 0, 50834, 36995, 65535, 50390, 35759, 7367,
            43845, 65535, 0, 65535, 52819, 47853, 65535, 38859, 53553, 36937, 65535, 22217, 47048,
            0, 23995, 49423, 59537, 17383, 0, 39907, 65535, 33303, 0, 65535, 57934, 65535, 16235,
            21731, 32887, 0, 58920, 65535, 65535, 11913, 0, 59728, 6271, 39449, 0, 17386, 9330, 0,
            0, 65535, 65535, 65535, 0, 57114, 6859, 0, 62582, 12580, 0, 7093, 12773, 0, 0, 61759,
            65535, 2755, 27001, 0, 65535, 33604, 55547, 38612, 47139, 30198, 41113, 26879, 39412,
            52639, 49144, 64727, 39990, 65535, 21796, 0, 65535, 2733, 44938, 43068, 47316, 16123,
            10619, 38642, 54714, 13858, 42426, 0, 35176, 5617, 878, 3591, 29091, 8321, 8286, 48804,
            65535, 64141, 7849, 2535, 28852, 15777, 36423, 30409, 65535, 65535, 8277, 38158, 65535,
            44814, 62281, 4908, 54631, 42687, 27754, 0, 26194, 65535, 53917, 4007, 1012, 65535,
            1947, 7104, 53378, 21992, 58601, 0, 5086, 0, 12490, 65535, 27495, 52391, 3392, 0,
            18726, 12722, 65535, 10550, 15248, 4147, 0, 52045, 0, 43132, 44254, 8064, 53649, 29406,
            59263, 47571, 42844, 37539, 14568, 35186, 47115, 42554, 18970, 0, 35941, 38170, 35209,
            65535, 6108, 42277, 13256, 7191, 0, 27360, 12580, 52094, 65535, 43310, 35666, 25786,
            18344, 45715, 65535, 65535, 63271, 61110, 55741, 25693, 39066, 0, 65535, 56241, 20922,
            65535, 9193, 10095, 0, 65535, 12597, 14839, 65247, 36873, 65535, 54991, 0, 40366,
            19914, 33889, 42555, 0, 0, 13483, 15478, 26602, 50775, 65535, 0, 24170, 24878, 0, 0, 0,
            1829, 65535, 65535, 26913, 0, 38756, 41348, 58925, 31179, 0, 0, 57071, 17552, 41678, 0,
            0, 59288, 65535, 65535, 0, 0, 0, 34046, 47293, 63103, 37279, 0, 51273, 47453, 52101,
            29518, 0, 65535, 65535, 0, 0, 17927, 32878, 59897, 65535, 32497, 51361, 9147, 65535,
            65535, 7159, 12320, 2948, 63446, 33955, 0, 65535, 0, 10030, 44648, 4009, 65535, 65535,
            0, 58508, 12900, 57835, 62532, 0, 18193, 65535, 2996, 0, 30968, 3280, 0, 65535, 65535,
            0, 30809, 19489, 28107, 40919, 65535, 51387, 65535, 33558, 65535, 46831, 17202, 4165,
            0, 0, 4824, 19954, 56038, 61215, 46504, 43945, 52040, 6544, 39481, 65535, 23365, 46924,
            58671, 36886, 55998, 32471, 15417, 28067, 59311, 35919, 65535, 39574, 48757, 33149,
            48754, 65535, 12312, 14966, 37668, 46928, 22250, 0, 7043, 46495, 65535, 46169, 36046,
            60670, 0, 2630, 4376, 13583, 41975, 27686, 65535, 65535, 56180, 0, 40381, 32830, 65535,
            52207, 41821, 0, 0, 1957, 65535, 37311, 40303, 44876, 36839, 47492, 53209, 0, 65535,
            21094, 12815, 0, 9133, 65535, 65535, 3878, 38525, 64568, 43355, 55650, 0, 16810, 52810,
            54272, 34111, 43130, 14634, 24247, 37573, 1273, 63106, 35901, 0, 36398, 22557, 49942,
            8125, 44735, 65535, 38812, 46284, 0, 52107, 18447, 53412, 25887, 63792, 65535, 60081,
            22907, 52200, 57769, 0, 33612, 0, 51950, 31312, 42421, 27456, 0, 0, 65535, 38666,
            45497, 49012, 0, 20589, 33660, 42817, 36023, 18361, 3948, 45466, 0, 0, 3116, 64358,
            65535, 45247, 0, 19889, 60714, 65535, 65535, 46172, 36597, 60612, 34941, 28718, 57652,
            65535, 40064, 34439, 30836, 49357, 65535, 65535, 6028, 20536, 7821, 11758, 41594, 5480,
            50109, 45486, 65535, 33646, 0, 51166, 8137, 47159, 15817, 0, 55199, 65535, 0, 9270,
            59028, 65535, 18359, 26572, 37642, 65535, 0, 0, 0, 0, 8381, 2294, 56785, 32374, 0,
            65535, 54245, 19743, 65535, 44594, 65535, 20335, 65535, 6446, 38290, 11996, 3640,
            19236, 56251, 0, 65535, 18442, 14177, 29326, 15895, 13796, 65535, 17814, 18234, 33170,
            44025, 25628, 4543, 5240, 12269, 50694, 36294, 34897, 38937, 0, 0, 65535, 65535, 0,
            32512, 44967, 14845, 33262, 42683, 39972, 7063, 65535, 65535, 34545, 0, 23781, 6760,
            4664, 34910, 65535, 24389, 65535, 65535, 65535, 13997, 58789, 65535, 65535, 27990,
            2090, 0, 0, 56801, 65535, 27248, 43872, 31835, 54234, 61682, 8409, 14113, 43837, 34413,
            35895, 9764, 39419, 8802, 65535, 0, 65535, 3351, 65535, 5754, 60784, 39575, 5760,
            63845, 65535, 27443, 0, 65535, 19478, 7717, 12398, 29842, 36410, 65535, 0, 65535, 2471,
            9256, 0, 0, 9280, 3237, 60696, 43639, 0, 22322, 0, 42833, 11185, 0, 65535, 46656,
            54641, 39184, 65535, 10422, 0, 65535, 37156, 53804, 0, 32577, 27676, 65535, 44695,
            65535, 31136, 0, 65535, 65535, 0, 26618, 65535, 8899, 64311, 9554, 32401, 2234, 41629,
            65535, 0, 13659, 38338, 48099, 19777, 40789, 65535, 0, 0, 32284, 65535, 41548, 65535,
            29436, 6519,
        ]))
        .unwrap(),
        c: 54,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x848cbb400c84bed5e4e210776c75894ff0c0f8d6058e9b6b30399d9174f61ee4");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_chaos_1() {
    let value = VarTestStruct {
        a: 57484,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            57695, 21309, 65535, 36350, 38811, 1214, 0, 65535, 65535, 51370, 6760, 0, 128, 26614,
            50542, 0, 14353, 7815, 13360, 40678, 7110, 0, 60556, 54461, 22528, 0, 48277, 0, 65535,
            0, 35630, 0, 0, 49861, 2839, 0, 28681,
        ]))
        .unwrap(),
        c: 2,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xf9e1edc08d6a8666c941982ca4fc444ba36e4cebab7b35a7ab4568e78427235b");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_random_chaos_2() {
    let value = VarTestStruct {
        a: 22342,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([40410])).unwrap(),
        c: 151,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_random_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x96fd92859ccf7ed5cecea85dc34c4a56fd99ff02bab864cfef5c138efe9f187d");
    assert_eq!(root, expected_root);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_random_offset_2_minus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_random_offset_2_minus_one/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_random_offset_2_plus_one() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_random_offset_2_plus_one/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
#[should_panic]
fn test_containers_var_test_struct_random_offset_2_zeroed() {
    let encoding = read_ssz_snappy_from_test_data("ssz-rs/tests/data/containers/invalid/VarTestStruct_random_offset_2_zeroed/serialized.ssz_snappy");

    deserialize::<VarTestStruct>(&encoding);
}

#[test]
fn test_containers_var_test_struct_zero() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x16acbeea0d56bf42f89e617952156532bc11ef5ec02054964d827ae524bd9356");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_0() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2c871e8c0540811d51f15de23d73717fc2a929dec0fda436be955d7cf2f3df9d");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_1() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2af7038b882598953c563fe437767e0df6418ac184c3dedd82a790f42306db53");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_2() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xd8817199ad16ef7defe2ebe7eed43e875d3190444975a212c29032255783e892");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_3() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_3/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2fec69323cd5e304fab170b42dbedd74ea45eafcce0e0ea7b786e0c127237c44");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_4() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_4/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xb0c8e63107347f4d1c70b4f6aff92840432065befc84a8c0a79d0e50e65fb0cf");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_5() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_5/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xe5f19c1bb9eed4f20d95ff6205e1b4cc884207a99ff6d06f61b4fc7a68a362da");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_6() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_6/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x2234142ef7bd4660edcd29578f9308d36d3c3cbc87e769c64a391b1f6cf52bca");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_7() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_7/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x09e5ca8868427972a8491f46951fb2c508b2f3dd5ce3fdb550be256dbd959477");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_8() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_8/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xb5db5710ba6f6237071537b206aa4c78616410315b54507ae5e835a70b52ffcd");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_9() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_9/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x3435d4b16347c2f0f695680b96bbf19e7026196ab96bc9fb96f9d35b954cba51");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_chaos_0() {
    let value = VarTestStruct {
        a: 30711,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            728, 55064, 35225, 37227, 9777, 65535, 21575, 59226, 0, 38436, 65535, 65535, 65535,
            42399, 0, 0, 65535, 0, 7547, 63710, 47366, 52622, 62452, 65535, 0, 32112, 25947, 20244,
            65535, 10318, 54100, 17850, 11595, 0, 0, 23824, 41973, 6026, 57254, 65535, 21772,
            32160, 11991, 0, 48970, 0, 49440, 0, 65535, 63697, 27185, 40496, 45588, 22785, 5755,
            5950, 16151, 0, 65535, 0, 47431, 0, 44687, 18008, 65535, 16472, 40344, 60750, 42176,
            65535, 3047, 65535, 5934, 65535, 39627, 16700, 61818, 0, 12801, 14876, 34651, 0, 35627,
            13246, 27491, 17156, 56913, 0, 40485, 26716, 20105, 12201, 0, 50210, 56220, 32674,
            58006, 17356, 0, 0, 65535, 65535, 12415, 3852, 6320, 20044, 34591, 35071, 39025, 65535,
            0, 1214, 12489, 0, 7894, 50487, 7556, 43456, 9897, 0, 43418, 51627, 22828, 0, 65535, 0,
            2329, 53343, 26009, 65535, 5267, 22485, 16557, 64098, 49563, 31682, 48433, 65535,
            65535, 58115, 65535, 11748, 31947, 23907, 65535, 65535, 62202, 32368, 53444, 47210,
            65535, 37640, 9048, 37398, 43230, 0, 65535, 35061, 0, 12384, 59158, 31163, 57569, 1723,
            6263, 59878, 52424, 31661, 23799, 0, 13195, 65535, 34387, 0, 46439, 36212, 58077,
            49181, 0, 57490, 980, 4360, 65535, 0, 22147, 65535, 61031, 65535, 0, 54805, 51111,
            65535, 41665, 7998, 0, 65535, 63362, 42377, 0, 19455, 0, 23535, 0, 51549, 58357, 58806,
            2026, 6066, 19732, 65535, 23699, 19514, 64814, 65535, 22031, 55332, 28372, 28189,
            40742, 22937, 65535, 65535, 23312, 50385, 65535, 27753, 0, 47606, 50144, 65535, 0,
            65535, 8301, 0, 0, 42703, 3591, 46786, 0, 58289, 45473, 25231, 34072, 23287, 54205, 0,
            0, 16069, 41459, 0, 65535, 53774, 2466, 0, 65535, 59475, 26961, 8919, 26201, 55610,
            19872, 57935, 63090, 8968, 42662, 59153, 65535, 65535, 3304, 4936, 47294, 14922, 49555,
            52677, 56876, 65535, 65535, 53601, 49707, 0, 11098, 12866, 5442, 65535, 25597, 44803,
            0, 38117, 36739, 0, 65535, 0, 10357, 12077, 65535, 0, 32185, 37625, 37027, 44710, 0,
            49747, 29736, 14697, 20130, 0, 14817, 60481, 49719, 44836, 36862, 33794, 65535, 65535,
            65535, 44211, 65535, 51526, 65535, 54193, 17520, 56053, 39102, 61771, 49769, 0, 25683,
            26878, 27505, 41063, 3229, 65535, 61963, 65535, 36914, 48463, 64422, 0, 22118, 0,
            19016, 0, 52923, 36107, 36238, 36707, 0, 3873, 25427, 0, 17269, 54337, 0, 65535, 45648,
            58826, 6468, 56179, 22362, 65535, 38017, 4298, 41039, 12557, 21685, 2289, 58315, 33753,
            65535, 57922, 35370, 0, 0, 0, 14421, 19692, 35952, 6252, 61471, 17700, 65535, 8858,
            39168, 0, 52820, 65535, 65535, 32618, 9688, 0, 9689, 21516, 30617, 30594, 33147, 19780,
            0, 63835, 65535, 0, 12600, 42766, 50061, 5733, 18650, 65535, 8553, 65535, 0, 65535,
            47847, 44970, 33468, 65535, 45876, 3604, 39105, 26802, 24696, 16997, 46813, 65535,
            39459, 0, 46856, 25573, 5246, 64735, 17847, 60812, 65535, 0, 51362, 63841, 3543, 54847,
            33391, 7072, 0, 55016, 65535, 65535, 56800, 1493, 61797, 24652, 55907, 5532, 53461,
            19903, 44623, 65535, 0, 65535, 2688, 32414, 1351, 0, 24909, 26975, 65535, 59155, 40679,
            0, 6353, 0, 0, 44941, 0, 42581, 42159, 52022, 0, 17279, 41472, 11201, 56014, 9889,
            65535, 65535, 58766, 29724, 41036, 65535, 53326, 49879, 6517, 18826, 65535, 10943,
            65535, 58785, 15510, 0, 6926, 20418, 65535, 54987, 65535, 30155, 42056, 65535, 0,
            51961, 65535, 63397, 22581, 27829, 39141, 11289, 0, 15171, 28495, 54709, 5637, 64926,
            39350, 65535, 14673, 14000, 18078, 44865, 25566, 64543, 0, 0, 56756, 61801, 65535,
            23630, 0, 0, 3570, 24661, 45551, 28218, 21891, 41677, 55408, 0, 65535, 49083, 65535,
            46625, 55203, 50560, 19128, 52746, 65535, 62563, 0, 11499, 38536, 17834, 65535, 0,
            29726, 21688, 0, 17987, 52017, 24201, 62024, 0, 5023, 44682, 65535, 65535, 0, 9744,
            59326, 498, 28033, 56069, 25381, 11864, 22820, 10557, 39237, 5684, 53039, 53417, 65535,
            21168, 38665, 52661, 62665, 49173, 36447, 65535, 22949, 40073, 43483, 0, 32218, 0,
            65535, 26183, 0, 30884, 0, 449, 17651, 63169, 41148, 9354, 0, 45610, 3967, 65535, 0,
            47594, 710, 10835, 35313, 60006, 0, 35776, 2782, 52578, 65535, 65535, 65535, 20990,
            65535, 65535, 65535, 64330, 65535, 28477, 65535, 0, 48706, 42560, 0, 9433, 871, 8318,
            55074, 65535, 26368, 20360, 0, 22528, 19644, 33552, 65535, 3032,
        ]))
        .unwrap(),
        c: 0,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_chaos_0/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0xd772e661be2b3fcd82c2bf7a4351073a3f54305159d70dc2f2e6c9099cf85e22");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_chaos_1() {
    let value = VarTestStruct {
        a: 24501,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            65535, 20397, 900, 1821, 41061, 47857, 0, 38153, 0, 40001, 20908, 16043, 53524, 32823,
            361, 65535, 64400, 40679, 65535, 3973, 56719, 10770, 25036, 54855, 0, 65535, 65535,
            16604, 61859, 57669, 0, 26245, 0, 65535, 39443, 45709, 65535, 25484, 0, 16960, 65535,
            65535, 48280, 13530, 41391, 65535, 12308, 11905, 39267, 332, 65535, 9742, 10462, 61167,
            10985, 54368, 65535, 65535, 20572, 1130, 14110, 9575, 47507, 59631, 37946, 0, 20252, 0,
            0, 33512, 1802, 50255, 25738, 0, 45169, 0, 59406, 0, 20907, 16072, 65535, 39212, 0,
            4139, 24417, 0, 21988, 65535, 65535, 50614, 42726, 42872, 65535, 65535, 42623, 0,
            65535, 58782, 12227, 65535, 36507, 0, 7541, 16064, 64689, 49628, 38404, 62473, 32840,
            30111, 41059, 17896, 11793, 40497, 0, 0, 5473, 0, 25106, 50598, 0, 21076, 41957, 25919,
            65535, 38093, 13801, 45753, 34461, 52994, 63114, 21495, 12245, 65535, 0, 65535, 7432,
            17725, 0, 65535, 0, 5823, 25219, 34048, 60246, 0, 25739, 43039, 65535, 36904, 65256,
            24627, 0, 62659, 65535, 65535, 0, 65535, 21617, 59535, 6811, 65535, 60550, 45136, 2548,
            32069, 47784, 24506, 25679, 44030, 23259, 20837, 65535, 56553, 65535, 52829, 29933,
            41890, 22243, 65535, 52253, 26808, 4844, 24363, 13559, 51410, 60293, 8859, 60686,
            32395, 65535, 18779, 65535, 23017, 44212, 25075, 3535, 0, 24572, 38259, 65535, 528, 0,
            20540, 58634, 2330, 0, 22785, 64774, 0, 22420, 26416, 29542, 0, 49474, 35291, 23607,
            11301, 0, 0, 0, 0, 39672, 65535, 0, 0, 53786, 65535, 6797, 41096, 0, 13077, 15698, 0,
            65535, 21385, 52668, 0, 53386, 2196, 4114, 0, 12560, 11542, 43275, 12673, 61084, 2573,
            29014, 0, 6664, 65535, 23844, 36735, 48596, 47765, 34909, 59281, 10256, 48045, 65535,
            17207, 18237, 0, 45775, 0, 65535, 65535, 0, 18636, 5956, 4999, 0, 23720, 12395, 9109,
            0, 0, 29786, 65535, 29917, 9173, 0, 61951, 0, 0, 65535, 34928, 36727, 54200, 0, 0, 0,
            36814, 39826, 65535, 42483, 2985, 65535, 0, 10514, 49823, 6599, 26408, 65535, 34090,
            65535, 47696, 0, 2194, 54533, 57458, 25828, 42712, 0, 0, 65535, 65535, 65535, 63567,
            65535, 0, 32852, 65535, 51290, 8906, 0, 65535, 22170, 65535, 0, 65535, 5516, 35147,
            31223, 57681, 44441, 36192, 58929, 25928, 49926, 65535, 37192, 30743, 65535, 61103,
            29954, 10965, 52007, 39704, 29393, 8916, 0, 65535, 65535, 65535, 65535, 27538, 4668, 0,
            24096, 32032, 48203, 65535, 34130, 0, 65535, 0, 32739, 29719, 0, 0, 65535, 11843,
            15198, 0, 9459, 0, 14167, 65535, 65535, 3867, 12337, 58749, 29577, 63649, 0, 16754,
            60760, 22961, 65535, 0, 21098, 44357, 36207, 65535, 17253, 9661, 0, 65535, 65535,
            15177, 14664, 12575, 32444, 25203, 5733, 29988, 0, 34297, 12448, 30668, 65535, 65535,
            13994, 0, 39381, 35400, 0, 15965, 65057, 29191, 55894, 11310, 57815, 0, 59672, 59146,
            0, 37116, 0, 8858, 65535, 29929, 4421, 35300, 44930, 56637, 17938, 49724, 7627, 58740,
            6202, 65535, 0, 65391, 43356, 54562, 0, 12896, 29374, 48728, 6048, 65535, 24109, 64234,
            65535, 57225, 0, 49605, 65535, 61930, 38566, 0, 9702, 33044, 41293, 65535, 65535, 0,
            29297, 0, 5873, 2061, 39516, 56793, 15315, 27549, 54868, 64947, 52282, 0, 39975, 60199,
            21218, 21706, 530, 4921, 52171, 65535, 22547, 36253, 15095, 54083, 35402, 4943, 9921,
            1343, 60166, 32316, 38283, 0, 65535, 0, 31018, 31867, 42885, 30562, 57058, 36408,
            59785, 17636, 11660, 0, 44416, 26953, 36874, 34520, 40647, 20886, 65535, 0, 43942,
            65535, 6084, 65535, 0, 65535, 52626, 1348, 24618, 28333, 65535, 12209, 30680, 6476,
            65535, 38765, 65535, 25888, 0, 65535, 0, 574, 0, 17513, 3254, 31839, 47429, 62565,
            26438, 10233, 61432, 65535, 34544, 30678, 0, 46614, 39049, 56301, 33024, 4258, 9687,
            65535, 65535, 5919, 25962, 26830, 31588, 48747, 38049, 63567, 41025, 5194, 0, 3830,
            61427, 3735, 0, 1643, 0, 55207, 18541, 50410, 22689, 0, 0, 0, 8744, 29640, 29513, 1764,
            61868, 58701, 61993, 2891, 53276, 65535, 37552, 36613, 8513, 13545, 1126, 65535, 65535,
            5615, 30478, 32778, 39446, 35466, 33408, 43814, 32237, 65535, 0, 65535, 59503, 65535,
            29207, 11649, 4953, 6166, 33893, 1392, 33391, 20531, 65535, 39423, 51804, 50439, 53540,
            65535, 65535, 42394, 42426, 11317, 40453, 62102, 15386, 0, 54713, 12579, 41934, 29109,
            48151, 65535, 65535, 44555, 12839, 65535, 65535, 65535, 60915, 32157, 65535, 0, 65535,
            22509, 0, 0, 10632, 25799, 11182, 31598, 7630, 36358, 26249, 12856, 15530, 61074,
            54691, 56853, 21914, 18170, 21851, 54364, 0, 64213, 13143, 41212, 34480, 31985, 54385,
            65535, 0, 29953, 53631, 35218, 44347, 65535, 22684, 21981, 0, 64986, 59683, 24502, 0,
            65535, 60606, 0, 13754, 0, 20338, 0, 18363, 30261, 21023, 63416, 65535, 27879, 65535,
            63170, 38572, 38091, 65535, 8864, 0, 0, 65535, 65535, 65535, 19744, 19450, 10967, 6299,
            5452, 28071, 9538, 27387, 56390, 13748, 11021, 65535, 0, 53354, 47543, 59420, 9552, 0,
            44235, 65535, 65535, 0, 0, 47492, 63843, 0, 11749, 0, 2835, 65535, 13391, 0, 65535,
            21124, 63885, 50287, 34566, 65535, 57185, 38282, 65535, 13381, 27609, 65535, 2021, 0,
            64671, 11213, 65535, 0, 65535, 0, 4530, 9420, 0, 63070, 9620, 6277, 0, 65535, 65535,
            17984, 4475, 0, 0, 65535, 0, 0, 49444, 32491, 17581, 65535, 45537, 0, 9667, 11778,
            41307, 36147, 64476, 53688, 65535, 58629, 50734, 12116, 62095, 26049, 56676, 32042,
            14196, 30469, 0, 54011, 0, 10939, 65535, 5773, 17244, 65535, 40043, 61825, 9238, 19987,
            65535, 56357, 27296, 15875, 65535, 10125, 63028, 48302, 65535, 28427, 26098, 0, 12839,
            16028, 17825, 65535, 4383, 15141, 26202, 62534, 0, 42383, 41747, 64781, 28665, 43451,
            60649, 65080, 30481, 20350, 555, 29652, 0, 50399, 65535, 35336, 60963, 42991, 25898,
            65535, 0, 61383, 60181, 59664, 0, 620, 0, 23843, 899, 25610, 40129, 53188, 16822,
            35660, 0, 0, 65535, 36333, 25068, 45479, 24058, 48489, 21581, 65535, 30983, 43164,
            14094, 38186, 36408, 32854, 0, 43473, 14787, 49509, 13158, 33909, 1723, 49512, 503,
            65535, 21099, 3886, 65535, 65535, 11778, 0, 45297, 0, 604, 25107, 31694, 59670, 58098,
            65535, 25738, 65535, 11456, 0, 65535, 51124, 38865, 54749, 2690, 10742, 23760, 65535,
            0, 0, 65535, 55421, 10142, 11710, 51903, 57988, 65535, 0, 62967, 65535, 58756, 52983,
            17425, 0, 0, 11452, 9229, 1927, 1826, 65535, 65535, 52281, 25106, 41897, 34924, 45915,
            65535, 64873, 65535, 12566, 55462, 30150, 4389, 0, 8230, 65535, 16639, 52017, 0, 39976,
            50788, 10386, 17062, 52717, 7305, 0, 36353, 64471, 0, 47924, 55809, 0, 10971, 5333,
            3482, 24538, 33364, 0, 0, 0, 0, 17253, 41719, 65535, 0, 65535, 0, 8726, 0, 26174, 4856,
            0, 61316, 52387, 42381, 45486, 65535, 65535, 33976, 64271, 65535, 65535, 20289, 32179,
            4831, 24867, 0, 51068, 51180, 0, 14927, 60369, 0,
        ]))
        .unwrap(),
        c: 255,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_chaos_1/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x7fbb2d2fde27c7a3135a7e9b312987d3633ee8b4d23c8b4c8b56c4088d0290ab");
    assert_eq!(root, expected_root);
}

#[test]
fn test_containers_var_test_struct_zero_chaos_2() {
    let value = VarTestStruct {
        a: 0,
        b: List::<u16, 1024>::try_from(Vec::<u16>::from_iter([
            0, 63908, 4719, 0, 65535, 31561, 63902, 43408, 0, 0, 43171, 2965, 37781, 65535, 3809,
            0, 12793, 65535, 63759, 65535, 60581, 0, 10171, 62303, 62419, 42802, 65535, 0, 60120,
            32106, 45977, 7417, 0, 52239, 65535, 8323, 19153, 41076, 5947, 49315, 46038, 261,
            33734, 39354, 1415, 0, 35761, 29100, 15563, 31732, 2230, 0, 54489, 41040, 0, 65535,
            37776, 41629, 65535, 36146, 0, 0, 7533, 50145, 0, 52685, 0, 38920, 65535, 0, 65535,
            5120, 0, 65535, 0, 65535, 65535, 12205, 32362, 46068, 51503, 0, 14495, 65535, 55026,
            48141, 65535, 51413, 6204, 60291, 13734, 49359, 15864, 0, 33278, 52695, 65535, 2238, 0,
            56467, 31773, 0, 3157, 28140, 65535, 36472, 36615, 65535, 38150, 51941, 65535, 42260,
            17174, 2717, 15186, 45771, 41472, 40979, 0, 45352, 65535, 15687, 0, 57566, 2125, 28480,
            0, 27146, 22447, 64070, 62696, 65535, 0, 35567, 12773, 0, 64382, 18831, 9367, 65535,
            8006, 0, 13486, 23492, 15216, 65535, 65535, 65535, 38860, 61579, 65535, 18485, 26811,
            16865, 60728, 27714, 46074, 38945, 65535, 60651, 19970, 31751, 11585, 0, 4715, 65535,
            63052, 65535, 65535, 39425, 30674, 35543, 28810, 54905, 42064, 65535, 65535, 37847,
            65535, 52392, 56332, 7220, 58504, 47340, 50459, 22500, 65535, 5235, 34869, 0, 24227,
            65535, 9331, 8151, 18640, 24073, 47222, 15379, 31549, 53458, 25758, 64229, 39967, 0,
            6921, 65195, 28559, 65535, 52666, 64543, 0, 65535, 13316, 35206, 65535, 41064, 28906,
            15265, 65535, 0, 42436, 52479, 56223, 8179, 52392, 54755, 19878, 53916, 31155, 0,
            65535, 27011, 46885, 5051, 0, 30649, 655, 25365, 6594, 51459, 65535, 65535, 62783,
            4361, 0, 59625, 50415, 14691, 1540, 46426, 61089, 6761, 37513, 65376, 38631, 33211,
            65535, 0, 1554, 60180, 38396, 26765, 65535, 30589, 65535, 10895, 25159, 0, 17067,
            12472, 65535, 47570, 22530, 0, 65535, 0, 22769, 34077, 65535, 65535, 65535, 34212,
            2378, 12489, 26474, 0, 16533, 65535, 46743, 7834, 0, 0, 49003, 65535, 47066, 37184,
            33265, 65535, 16943, 0, 65535, 0, 54706, 65535, 34148, 32396, 65535, 48912, 13886,
            65535, 46992, 20723, 65535, 35465, 57601, 1941, 65535, 65535, 0, 28605, 19729, 65535,
            54391, 57285, 19758, 0, 65535, 0, 49138, 16322, 31209, 46535, 5848, 65535, 63523,
            35933, 0, 43778, 65535, 65535, 51226, 19815, 39110, 15431, 0, 44153, 0, 9234, 17812,
            6344, 65535, 23311, 58033, 8180, 0, 36287, 62570, 59705, 61207, 3065, 65535, 53855, 0,
            0, 25197, 59467, 40048, 0, 65535, 25532, 64791, 0, 0, 0, 14018, 38100, 27994, 59238, 0,
            24263, 38404, 11698, 0, 28552, 65535, 16404, 65535, 50241, 62506, 37386, 0, 65535,
            48661, 37180, 43958, 49984, 17679, 53779, 65535, 4593, 0, 41995, 65535, 36543, 0, 0,
            43312, 20832, 0, 26121, 0, 54080, 0, 65535, 15264, 43824, 1952, 20518, 65535, 65535, 0,
            65535, 46339, 12002, 46426, 30352, 23485, 24990, 0, 0, 65535, 60485, 0, 65535, 49979,
            52034, 61653, 0, 4249, 44208, 65535, 18885, 65535, 65535, 0, 25183, 0, 16287, 44307,
            61967, 58819, 4939, 0, 6681, 51867, 12452, 0, 36178, 9375, 7957, 65535, 55450, 41892,
            12676, 48849, 16823, 37583, 3906, 0, 6103, 11146, 41422, 33991, 65535, 0, 58500, 20239,
            0, 30944, 65535, 65535, 0, 0, 65535, 61951, 25986, 10284, 21690, 0, 27076, 15133,
            32848, 65535, 29715, 10221, 3326, 35267, 14463, 10658, 6384, 65535, 65535, 20990,
            54147, 0, 65535, 58811, 0, 12865, 22231, 65535, 0, 65535, 64745, 57194, 8938, 65535,
            65535, 11992, 40631, 51280, 65535, 724, 58869, 0, 11295, 0, 29624, 47820, 23260, 39392,
            65535, 60755, 63797, 15225, 15584, 0, 36110, 44187, 37597, 9016, 0, 65535, 35568,
            34638, 65535, 65535, 50656, 0, 42194, 65535, 45405, 0, 16092, 65535, 0, 20101, 2857, 0,
            37677, 0, 45447, 65535, 54737, 36100, 32606, 63236, 34225, 12352, 19945, 9105, 0, 4259,
            65535, 26545, 65535, 61528, 49217, 51832, 4775, 50206, 49568, 31800, 65535, 0, 65535,
            54351, 9749, 41126, 26837, 364, 41456, 51557, 29385, 47218, 20570, 65535, 0, 2841,
            31752, 21995, 19470, 0, 7284, 0, 33767, 22033, 58904, 23344, 34108, 56907, 36785,
            65535, 62652, 65535, 0, 48004, 65535, 65535, 65535, 10378, 0, 11708, 59959, 65535,
            53672, 23235, 11370, 22538, 39351, 15922, 65535, 38162, 52079, 797, 0, 10791, 61504, 0,
            62127, 64896, 29736, 33222, 5846, 65535, 30435, 64814, 6635, 52479, 46922, 24994,
            31630, 8396, 28572, 8290, 0, 31492, 0, 65535, 65141, 65535, 54280, 19746, 7333, 5987,
            38802, 9375, 5217, 23375, 26364, 4643, 42628, 0, 5971, 8893, 46675, 65535, 45932,
            20493, 46519, 19780, 23509, 42351, 28007, 51891, 0, 52227, 34446, 37872, 18392, 61418,
            62668, 8188, 65535, 65535, 0, 11523, 19431, 50364, 29260, 65535, 40307, 1063, 65535,
            45733, 28449, 0, 47410, 0, 0, 0, 60080, 49023, 3945, 54839, 65535, 35123, 30218, 58562,
            0, 65535, 513, 64204, 38384, 49152, 65535, 16068, 53210, 23605, 38802, 49598, 65535, 0,
            0, 46591, 2669, 20287, 36655, 0, 48442, 0, 46763, 10527, 50308, 65535, 19874, 0, 51635,
            38255, 62755, 14112, 35672, 0, 65535, 65535, 62582, 0, 11989, 65535, 41908, 48241, 96,
            65535, 57830, 65535, 7856, 39120, 14950,
        ]))
        .unwrap(),
        c: 77,
    };
    let encoding = serialize(&value);
    let expected_encoding = read_ssz_snappy_from_test_data(
        "ssz-rs/tests/data/containers/valid/VarTestStruct_zero_chaos_2/serialized.ssz_snappy",
    );
    assert_eq!(encoding, expected_encoding);

    let recovered_value: VarTestStruct = deserialize(&expected_encoding);
    assert_eq!(recovered_value, value);

    let root = hash_tree_root(&value);
    let expected_root =
        root_from_hex("0x6147fa8c73be30da574a1b8a983141ae0986c0ec6d1a5cc63bf164a87f1667a5");
    assert_eq!(root, expected_root);
}
